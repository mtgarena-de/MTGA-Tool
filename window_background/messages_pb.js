/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AIConfigData', null, global);
goog.exportSymbol('proto.AIConfigOption', null, global);
goog.exportSymbol('proto.AIConfigYesNo', null, global);
goog.exportSymbol('proto.AIConfigureRequest', null, global);
goog.exportSymbol('proto.AIConfigureResponse', null, global);
goog.exportSymbol('proto.AICreateRequest', null, global);
goog.exportSymbol('proto.AICreateResponse', null, global);
goog.exportSymbol('proto.AIDestroyRequest', null, global);
goog.exportSymbol('proto.AIDestroyResponse', null, global);
goog.exportSymbol('proto.AIFatalError', null, global);
goog.exportSymbol('proto.AIMode', null, global);
goog.exportSymbol('proto.AIReconfigureData', null, global);
goog.exportSymbol('proto.AbilityCategory', null, global);
goog.exportSymbol('proto.AbilityGameAdjustments', null, global);
goog.exportSymbol('proto.AbilityPaymentType', null, global);
goog.exportSymbol('proto.AbilitySubCategory', null, global);
goog.exportSymbol('proto.AbilityType', null, global);
goog.exportSymbol('proto.AbilityWord', null, global);
goog.exportSymbol('proto.Action', null, global);
goog.exportSymbol('proto.ActionCostReq', null, global);
goog.exportSymbol('proto.ActionCostResp', null, global);
goog.exportSymbol('proto.ActionCostType', null, global);
goog.exportSymbol('proto.ActionInfo', null, global);
goog.exportSymbol('proto.ActionType', null, global);
goog.exportSymbol('proto.ActionsAvailableReq', null, global);
goog.exportSymbol('proto.AllowCancel', null, global);
goog.exportSymbol('proto.AlternativeCost', null, global);
goog.exportSymbol('proto.AlternativeCostReq', null, global);
goog.exportSymbol('proto.AlternativeCostResp', null, global);
goog.exportSymbol('proto.AnnotationInfo', null, global);
goog.exportSymbol('proto.AnnotationType', null, global);
goog.exportSymbol('proto.Answer', null, global);
goog.exportSymbol('proto.AnyLobbyMessage', null, global);
goog.exportSymbol('proto.AnyMessage', null, global);
goog.exportSymbol('proto.AnyServiceMessage', null, global);
goog.exportSymbol('proto.AnyServiceMessageTypesRequestContext', null, global);
goog.exportSymbol('proto.AnyServiceMessageTypesUserContext', null, global);
goog.exportSymbol('proto.AnyToGREMessage', null, global);
goog.exportSymbol('proto.AssignDamageConfirmation', null, global);
goog.exportSymbol('proto.AssignDamageReq', null, global);
goog.exportSymbol('proto.AssignDamageResp', null, global);
goog.exportSymbol('proto.AttackInfo', null, global);
goog.exportSymbol('proto.AttackState', null, global);
goog.exportSymbol('proto.AttackWarning', null, global);
goog.exportSymbol('proto.AttackWarningType', null, global);
goog.exportSymbol('proto.Attacker', null, global);
goog.exportSymbol('proto.AuthenticateRequest', null, global);
goog.exportSymbol('proto.AuthenticateResponse', null, global);
goog.exportSymbol('proto.AuthenticationType', null, global);
goog.exportSymbol('proto.AutoAnswer', null, global);
goog.exportSymbol('proto.AutoPassOption', null, global);
goog.exportSymbol('proto.AutoPassPriority', null, global);
goog.exportSymbol('proto.AutoTapAction', null, global);
goog.exportSymbol('proto.AutoTapStopsSetting', null, global);
goog.exportSymbol('proto.AutoYield', null, global);
goog.exportSymbol('proto.BasicLandType', null, global);
goog.exportSymbol('proto.BehaviorTree', null, global);
goog.exportSymbol('proto.BinaryGameState', null, global);
goog.exportSymbol('proto.BlockInfo', null, global);
goog.exportSymbol('proto.BlockState', null, global);
goog.exportSymbol('proto.BlockWarning', null, global);
goog.exportSymbol('proto.BlockWarningType', null, global);
goog.exportSymbol('proto.Blocker', null, global);
goog.exportSymbol('proto.CLIPSConfiguration', null, global);
goog.exportSymbol('proto.CancelActionReq', null, global);
goog.exportSymbol('proto.CardColor', null, global);
goog.exportSymbol('proto.CardMechanicType', null, global);
goog.exportSymbol('proto.CardType', null, global);
goog.exportSymbol('proto.CastingTimeOptionReq', null, global);
goog.exportSymbol('proto.CastingTimeOptionResp', null, global);
goog.exportSymbol('proto.CastingTimeOptionType', null, global);
goog.exportSymbol('proto.CastingTimeOptionsReq', null, global);
goog.exportSymbol('proto.CastingTimeOptionsResp', null, global);
goog.exportSymbol('proto.CheckpointConfiguration', null, global);
goog.exportSymbol('proto.Choice', null, global);
goog.exportSymbol('proto.ChoicePersistence', null, global);
goog.exportSymbol('proto.ChooseModalResp', null, global);
goog.exportSymbol('proto.ChooseStartingPlayerReq', null, global);
goog.exportSymbol('proto.ChooseStartingPlayerResp', null, global);
goog.exportSymbol('proto.ClearLobbyUserStatusRequest', null, global);
goog.exportSymbol('proto.ClearLobbyUserStatusResponse', null, global);
goog.exportSymbol('proto.ClientInfo', null, global);
goog.exportSymbol('proto.ClientMessageType', null, global);
goog.exportSymbol('proto.ClientSessionInfo', null, global);
goog.exportSymbol('proto.ClientSync', null, global);
goog.exportSymbol('proto.ClientToFrontDoorMessage', null, global);
goog.exportSymbol('proto.ClientToGREMessage', null, global);
goog.exportSymbol('proto.ClientToLapaMessage', null, global);
goog.exportSymbol('proto.ClientToLobbyMessage', null, global);
goog.exportSymbol('proto.ClientToMatchDoorConnectRequest', null, global);
goog.exportSymbol('proto.ClientToMatchServiceMessage', null, global);
goog.exportSymbol('proto.ClientToMatchServiceMessageType', null, global);
goog.exportSymbol('proto.ClientType', null, global);
goog.exportSymbol('proto.CoinFace', null, global);
goog.exportSymbol('proto.Color', null, global);
goog.exportSymbol('proto.CombatDamageOrder', null, global);
goog.exportSymbol('proto.CombatDamageOrderAssignment', null, global);
goog.exportSymbol('proto.Composite', null, global);
goog.exportSymbol('proto.ConcedeReq', null, global);
goog.exportSymbol('proto.ConfigureRequest', null, global);
goog.exportSymbol('proto.ConfigureResponse', null, global);
goog.exportSymbol('proto.ConnectReq', null, global);
goog.exportSymbol('proto.ConnectResp', null, global);
goog.exportSymbol('proto.ConnectionState', null, global);
goog.exportSymbol('proto.ConnectionStateChangedEventType', null, global);
goog.exportSymbol('proto.ConnectionStatus', null, global);
goog.exportSymbol('proto.ConstructedMatchType', null, global);
goog.exportSymbol('proto.ContinuationToken', null, global);
goog.exportSymbol('proto.ControlReq', null, global);
goog.exportSymbol('proto.ControllerType', null, global);
goog.exportSymbol('proto.CorrelationInfo', null, global);
goog.exportSymbol('proto.CosmeticConfig', null, global);
goog.exportSymbol('proto.CosmeticInfo', null, global);
goog.exportSymbol('proto.CostCategory', null, global);
goog.exportSymbol('proto.CostType', null, global);
goog.exportSymbol('proto.Counter', null, global);
goog.exportSymbol('proto.CounterType', null, global);
goog.exportSymbol('proto.CreateMatchGameRoomRequest', null, global);
goog.exportSymbol('proto.CreateMatchGameRoomResponse', null, global);
goog.exportSymbol('proto.CreateMatchGameRoomResponseV2', null, global);
goog.exportSymbol('proto.DamageAssigner', null, global);
goog.exportSymbol('proto.DamageAssignment', null, global);
goog.exportSymbol('proto.DamageRecType', null, global);
goog.exportSymbol('proto.DamageRecipient', null, global);
goog.exportSymbol('proto.DamageType', null, global);
goog.exportSymbol('proto.DeckInfo', null, global);
goog.exportSymbol('proto.DeckMessage', null, global);
goog.exportSymbol('proto.DeclareAttackersReq', null, global);
goog.exportSymbol('proto.DeclareAttackersResp', null, global);
goog.exportSymbol('proto.DeclareBlockersReq', null, global);
goog.exportSymbol('proto.DeclareBlockersResp', null, global);
goog.exportSymbol('proto.Decorator', null, global);
goog.exportSymbol('proto.DeleteQueueRequest', null, global);
goog.exportSymbol('proto.DeleteQueueResponse', null, global);
goog.exportSymbol('proto.Designations', null, global);
goog.exportSymbol('proto.DetermineOptionsState', null, global);
goog.exportSymbol('proto.DieRollResultsResp', null, global);
goog.exportSymbol('proto.DifficultyLevel', null, global);
goog.exportSymbol('proto.Distribution', null, global);
goog.exportSymbol('proto.DistributionReq', null, global);
goog.exportSymbol('proto.DistributionResp', null, global);
goog.exportSymbol('proto.DraftGameRoomConfig', null, global);
goog.exportSymbol('proto.DraftGameRoomInfo', null, global);
goog.exportSymbol('proto.DropConstructedMatchmakingRequest', null, global);
goog.exportSymbol('proto.DropMatchmakingRequestV2', null, global);
goog.exportSymbol('proto.DropMatchmakingResponse', null, global);
goog.exportSymbol('proto.DropMatchmakingResponseCode', null, global);
goog.exportSymbol('proto.DropMatchmakingResponseV2', null, global);
goog.exportSymbol('proto.DropQueueRequest', null, global);
goog.exportSymbol('proto.DropQueueResponse', null, global);
goog.exportSymbol('proto.DummyResponse', null, global);
goog.exportSymbol('proto.EchoRequest', null, global);
goog.exportSymbol('proto.EchoResponse', null, global);
goog.exportSymbol('proto.EdictalMessage', null, global);
goog.exportSymbol('proto.EffectViolationBlocking', null, global);
goog.exportSymbol('proto.EndTurn', null, global);
goog.exportSymbol('proto.FailureReason', null, global);
goog.exportSymbol('proto.FinalMatchResult', null, global);
goog.exportSymbol('proto.ForceDrawReq', null, global);
goog.exportSymbol('proto.FrontDoorToClientMessage', null, global);
goog.exportSymbol('proto.GRECancelScheduledMessage', null, global);
goog.exportSymbol('proto.GREConfigRequest', null, global);
goog.exportSymbol('proto.GREConfiguration', null, global);
goog.exportSymbol('proto.GRECreateRequest', null, global);
goog.exportSymbol('proto.GRECreateResponse', null, global);
goog.exportSymbol('proto.GREDestroyRequest', null, global);
goog.exportSymbol('proto.GREDestroyResponse', null, global);
goog.exportSymbol('proto.GREExpireTimerRequest', null, global);
goog.exportSymbol('proto.GREFatalError', null, global);
goog.exportSymbol('proto.GREForceResultRequest', null, global);
goog.exportSymbol('proto.GREGameLoggerConfigureRequest', null, global);
goog.exportSymbol('proto.GREInterpretRequest', null, global);
goog.exportSymbol('proto.GREMessageType', null, global);
goog.exportSymbol('proto.GREReplacePlayer', null, global);
goog.exportSymbol('proto.GREResumeMatchRequest', null, global);
goog.exportSymbol('proto.GREScheduledMessage', null, global);
goog.exportSymbol('proto.GREStartMatchRequest', null, global);
goog.exportSymbol('proto.GRESubmitDeckRequest', null, global);
goog.exportSymbol('proto.GRETHHostEmulatorErrorCodes', null, global);
goog.exportSymbol('proto.GRETHHostEmulatorLaunch', null, global);
goog.exportSymbol('proto.GRETHHostEmulatorLaunchResp', null, global);
goog.exportSymbol('proto.GRETHHostEmulatorShutdown', null, global);
goog.exportSymbol('proto.GRETHHostEmulatorShutdownResp', null, global);
goog.exportSymbol('proto.GRETHHostErrorCode', null, global);
goog.exportSymbol('proto.GRETHHostOperationMode', null, global);
goog.exportSymbol('proto.GRETickMessage', null, global);
goog.exportSymbol('proto.GRETimeoutMessage', null, global);
goog.exportSymbol('proto.GRETimerExpiredMessage', null, global);
goog.exportSymbol('proto.GRETimerExpiredNotification', null, global);
goog.exportSymbol('proto.GREToAnyMessage', null, global);
goog.exportSymbol('proto.GREToClientMessage', null, global);
goog.exportSymbol('proto.GREToServerMessage', null, global);
goog.exportSymbol('proto.GameFormat', null, global);
goog.exportSymbol('proto.GameInfo', null, global);
goog.exportSymbol('proto.GameMetrics', null, global);
goog.exportSymbol('proto.GameObjectInfo', null, global);
goog.exportSymbol('proto.GameObjectType', null, global);
goog.exportSymbol('proto.GameRoomType', null, global);
goog.exportSymbol('proto.GameStage', null, global);
goog.exportSymbol('proto.GameStateMessage', null, global);
goog.exportSymbol('proto.GameStateRedactorConfiguration', null, global);
goog.exportSymbol('proto.GameStateType', null, global);
goog.exportSymbol('proto.GameStateUpdate', null, global);
goog.exportSymbol('proto.GameType', null, global);
goog.exportSymbol('proto.GameVariant', null, global);
goog.exportSymbol('proto.GatherReq', null, global);
goog.exportSymbol('proto.GatherResp', null, global);
goog.exportSymbol('proto.GatherSource', null, global);
goog.exportSymbol('proto.Gathering', null, global);
goog.exportSymbol('proto.GeneralConfiguration', null, global);
goog.exportSymbol('proto.GetGameRoomIdsRequest', null, global);
goog.exportSymbol('proto.GetGameRoomIdsResponse', null, global);
goog.exportSymbol('proto.GetGameRoomInfoRequest', null, global);
goog.exportSymbol('proto.GetGameRoomInfoResponse', null, global);
goog.exportSymbol('proto.GetLobbyUserIdsRequest', null, global);
goog.exportSymbol('proto.GetLobbyUserIdsResponse', null, global);
goog.exportSymbol('proto.GetLobbyUserInfoRequest', null, global);
goog.exportSymbol('proto.GetLobbyUserInfoResponse', null, global);
goog.exportSymbol('proto.GetSettingsResp', null, global);
goog.exportSymbol('proto.GreToClientEvent', null, global);
goog.exportSymbol('proto.Group', null, global);
goog.exportSymbol('proto.GroupReq', null, global);
goog.exportSymbol('proto.GroupResp', null, global);
goog.exportSymbol('proto.GroupSpecification', null, global);
goog.exportSymbol('proto.GroupType', null, global);
goog.exportSymbol('proto.Grouping', null, global);
goog.exportSymbol('proto.GroupingContext', null, global);
goog.exportSymbol('proto.GroupingStyle', null, global);
goog.exportSymbol('proto.HeuristicPriority', null, global);
goog.exportSymbol('proto.HighlightType', null, global);
goog.exportSymbol('proto.IRFormat', null, global);
goog.exportSymbol('proto.IRLoaderConfiguration', null, global);
goog.exportSymbol('proto.IdType', null, global);
goog.exportSymbol('proto.IllegalRequestMessage', null, global);
goog.exportSymbol('proto.Int32Value', null, global);
goog.exportSymbol('proto.IntermissionReq', null, global);
goog.exportSymbol('proto.InvalidAttacker', null, global);
goog.exportSymbol('proto.InvalidBlocker', null, global);
goog.exportSymbol('proto.InvalidCombatDamageOrderAssignment', null, global);
goog.exportSymbol('proto.InvalidDamageAssignment', null, global);
goog.exportSymbol('proto.InvalidTargetSelection', null, global);
goog.exportSymbol('proto.Inverter', null, global);
goog.exportSymbol('proto.JoinConstructedMatchmakingRequest', null, global);
goog.exportSymbol('proto.JoinMatchGameRoomRequest', null, global);
goog.exportSymbol('proto.JoinMatchGameRoomResponse', null, global);
goog.exportSymbol('proto.JoinMatchGameRoomResponseV2', null, global);
goog.exportSymbol('proto.JoinMatchmakingRequestV2', null, global);
goog.exportSymbol('proto.JoinMatchmakingResponse', null, global);
goog.exportSymbol('proto.JoinMatchmakingResponseCode', null, global);
goog.exportSymbol('proto.JoinMatchmakingResponseV2', null, global);
goog.exportSymbol('proto.JoinQueueRequest', null, global);
goog.exportSymbol('proto.JoinQueueResponse', null, global);
goog.exportSymbol('proto.KeyValuePairInfo', null, global);
goog.exportSymbol('proto.KeyValuePairValueType', null, global);
goog.exportSymbol('proto.LinkType', null, global);
goog.exportSymbol('proto.LinkedFace', null, global);
goog.exportSymbol('proto.LobbyDraftInfo', null, global);
goog.exportSymbol('proto.LobbyError', null, global);
goog.exportSymbol('proto.LobbyErrorCode', null, global);
goog.exportSymbol('proto.LobbyMatchCompletedEvent', null, global);
goog.exportSymbol('proto.LobbyMatchConfig', null, global);
goog.exportSymbol('proto.LobbyMatchCreatePendingEvent', null, global);
goog.exportSymbol('proto.LobbyMatchCreatedEvent', null, global);
goog.exportSymbol('proto.LobbyMatchInfo', null, global);
goog.exportSymbol('proto.LobbyMatchPlayerInfo', null, global);
goog.exportSymbol('proto.LobbyServiceInfo', null, global);
goog.exportSymbol('proto.LobbyToClientMessage', null, global);
goog.exportSymbol('proto.LobbyUserInfo', null, global);
goog.exportSymbol('proto.LobbyUserQueueInfo', null, global);
goog.exportSymbol('proto.LobbyUserStateType', null, global);
goog.exportSymbol('proto.Loop', null, global);
goog.exportSymbol('proto.LoopbackRequest', null, global);
goog.exportSymbol('proto.LoopbackResponse', null, global);
goog.exportSymbol('proto.ManaColor', null, global);
goog.exportSymbol('proto.ManaInfo', null, global);
goog.exportSymbol('proto.ManaInfoTypesSpec', null, global);
goog.exportSymbol('proto.ManaPayment', null, global);
goog.exportSymbol('proto.ManaPaymentOption', null, global);
goog.exportSymbol('proto.ManaPaymentStrategyType', null, global);
goog.exportSymbol('proto.ManaRequirement', null, global);
goog.exportSymbol('proto.ManaSelectionType', null, global);
goog.exportSymbol('proto.ManaSpecType', null, global);
goog.exportSymbol('proto.MatchCompletedReasonType', null, global);
goog.exportSymbol('proto.MatchConfig', null, global);
goog.exportSymbol('proto.MatchControllerClientSessionSettings', null, global);
goog.exportSymbol('proto.MatchControllerEventType', null, global);
goog.exportSymbol('proto.MatchControllerGetSettingsRequest', null, global);
goog.exportSymbol('proto.MatchControllerGetSettingsResponse', null, global);
goog.exportSymbol('proto.MatchControllerHealthReport', null, global);
goog.exportSymbol('proto.MatchControllerServiceInfo', null, global);
goog.exportSymbol('proto.MatchControllerSetSettingsRequest', null, global);
goog.exportSymbol('proto.MatchControllerSetSettingsResponse', null, global);
goog.exportSymbol('proto.MatchControllerSettings', null, global);
goog.exportSymbol('proto.MatchControllerState', null, global);
goog.exportSymbol('proto.MatchControllerStateChangedEvent', null, global);
goog.exportSymbol('proto.MatchGameRoomConfig', null, global);
goog.exportSymbol('proto.MatchGameRoomInfo', null, global);
goog.exportSymbol('proto.MatchGameRoomOpponentConnectionStateChangedEvent', null, global);
goog.exportSymbol('proto.MatchGameRoomPlayerInfo', null, global);
goog.exportSymbol('proto.MatchGameRoomStateChangedEvent', null, global);
goog.exportSymbol('proto.MatchGameRoomStateType', null, global);
goog.exportSymbol('proto.MatchPlayerMetrics', null, global);
goog.exportSymbol('proto.MatchResultSaved', null, global);
goog.exportSymbol('proto.MatchScope', null, global);
goog.exportSymbol('proto.MatchServiceError', null, global);
goog.exportSymbol('proto.MatchServiceErrorCode', null, global);
goog.exportSymbol('proto.MatchServiceToClientMessage', null, global);
goog.exportSymbol('proto.MatchState', null, global);
goog.exportSymbol('proto.MatchWinCondition', null, global);
goog.exportSymbol('proto.MayCast', null, global);
goog.exportSymbol('proto.MayPlay', null, global);
goog.exportSymbol('proto.MechanicType', null, global);
goog.exportSymbol('proto.MessageIdType', null, global);
goog.exportSymbol('proto.MiscellaneousTerm', null, global);
goog.exportSymbol('proto.ModalOption', null, global);
goog.exportSymbol('proto.ModalReq', null, global);
goog.exportSymbol('proto.MulliganOption', null, global);
goog.exportSymbol('proto.MulliganResp', null, global);
goog.exportSymbol('proto.MulliganType', null, global);
goog.exportSymbol('proto.Node', null, global);
goog.exportSymbol('proto.NumericInputReq', null, global);
goog.exportSymbol('proto.NumericInputResp', null, global);
goog.exportSymbol('proto.OnChat', null, global);
goog.exportSymbol('proto.OnHover', null, global);
goog.exportSymbol('proto.OnSelect', null, global);
goog.exportSymbol('proto.OnShuffle', null, global);
goog.exportSymbol('proto.OptionContext', null, global);
goog.exportSymbol('proto.OptionResponse', null, global);
goog.exportSymbol('proto.OptionType', null, global);
goog.exportSymbol('proto.OptionalActionMessage', null, global);
goog.exportSymbol('proto.OptionalResp', null, global);
goog.exportSymbol('proto.OrderCombatDamageReq', null, global);
goog.exportSymbol('proto.OrderCombatDamageResp', null, global);
goog.exportSymbol('proto.OrderCombatDamageType', null, global);
goog.exportSymbol('proto.OrderDamageConfirmation', null, global);
goog.exportSymbol('proto.OrderKey', null, global);
goog.exportSymbol('proto.OrderReq', null, global);
goog.exportSymbol('proto.OrderResp', null, global);
goog.exportSymbol('proto.OrderedDamageAssignment', null, global);
goog.exportSymbol('proto.OrderingContext', null, global);
goog.exportSymbol('proto.OrderingFunctionType', null, global);
goog.exportSymbol('proto.OrderingHeuristicDefinition', null, global);
goog.exportSymbol('proto.OrderingHeuristicParameter', null, global);
goog.exportSymbol('proto.OrderingParameterId', null, global);
goog.exportSymbol('proto.OrderingType', null, global);
goog.exportSymbol('proto.Parallel', null, global);
goog.exportSymbol('proto.ParameterType', null, global);
goog.exportSymbol('proto.Pass', null, global);
goog.exportSymbol('proto.PayCostsReq', null, global);
goog.exportSymbol('proto.PerformActionFor', null, global);
goog.exportSymbol('proto.PerformActionResp', null, global);
goog.exportSymbol('proto.Phase', null, global);
goog.exportSymbol('proto.PlayerConfig', null, global);
goog.exportSymbol('proto.PlayerDieRoll', null, global);
goog.exportSymbol('proto.PlayerInfo', null, global);
goog.exportSymbol('proto.PlayerIs', null, global);
goog.exportSymbol('proto.PlayerMetricKeyValuePair', null, global);
goog.exportSymbol('proto.PlayerMetrics', null, global);
goog.exportSymbol('proto.PlayerOrTeam', null, global);
goog.exportSymbol('proto.PresenceState', null, global);
goog.exportSymbol('proto.Prompt', null, global);
goog.exportSymbol('proto.PromptMessage', null, global);
goog.exportSymbol('proto.PromptParameter', null, global);
goog.exportSymbol('proto.PromptPriority', null, global);
goog.exportSymbol('proto.ProtoVersion', null, global);
goog.exportSymbol('proto.QualificationType', null, global);
goog.exportSymbol('proto.QueueInfo', null, global);
goog.exportSymbol('proto.QueueType', null, global);
goog.exportSymbol('proto.ReasonFaceDown', null, global);
goog.exportSymbol('proto.Reference', null, global);
goog.exportSymbol('proto.ReferenceType', null, global);
goog.exportSymbol('proto.ReplacementEffect', null, global);
goog.exportSymbol('proto.ReplacementEffectSpawnerType', null, global);
goog.exportSymbol('proto.ReportResultMessage', null, global);
goog.exportSymbol('proto.RequiresConfirmation', null, global);
goog.exportSymbol('proto.ResultCode', null, global);
goog.exportSymbol('proto.ResultReason', null, global);
goog.exportSymbol('proto.ResultSpec', null, global);
goog.exportSymbol('proto.ResultType', null, global);
goog.exportSymbol('proto.SearchFromGroupsReq', null, global);
goog.exportSymbol('proto.SearchFromGroupsResp', null, global);
goog.exportSymbol('proto.SearchReq', null, global);
goog.exportSymbol('proto.SearchResp', null, global);
goog.exportSymbol('proto.SelectAction', null, global);
goog.exportSymbol('proto.SelectCountersReq', null, global);
goog.exportSymbol('proto.SelectCountersResp', null, global);
goog.exportSymbol('proto.SelectFromGroupsReq', null, global);
goog.exportSymbol('proto.SelectFromGroupsResp', null, global);
goog.exportSymbol('proto.SelectManaTypeReq', null, global);
goog.exportSymbol('proto.SelectManaTypeResp', null, global);
goog.exportSymbol('proto.SelectNGroupReq', null, global);
goog.exportSymbol('proto.SelectNGroupResp', null, global);
goog.exportSymbol('proto.SelectNReq', null, global);
goog.exportSymbol('proto.SelectNResp', null, global);
goog.exportSymbol('proto.SelectReplacementReq', null, global);
goog.exportSymbol('proto.SelectReplacementResp', null, global);
goog.exportSymbol('proto.SelectTargetsReq', null, global);
goog.exportSymbol('proto.SelectTargetsResp', null, global);
goog.exportSymbol('proto.SelectionContext', null, global);
goog.exportSymbol('proto.SelectionListType', null, global);
goog.exportSymbol('proto.Selector', null, global);
goog.exportSymbol('proto.Sequence', null, global);
goog.exportSymbol('proto.ServerToGREMessage', null, global);
goog.exportSymbol('proto.ServiceFabricConfigPackageInfo', null, global);
goog.exportSymbol('proto.ServiceFabricServiceInfo', null, global);
goog.exportSymbol('proto.ServiceInfoRequest', null, global);
goog.exportSymbol('proto.SetSettingsReq', null, global);
goog.exportSymbol('proto.SetSettingsResp', null, global);
goog.exportSymbol('proto.Setting', null, global);
goog.exportSymbol('proto.SettingKey', null, global);
goog.exportSymbol('proto.SettingScope', null, global);
goog.exportSymbol('proto.SettingStatus', null, global);
goog.exportSymbol('proto.SettingsMessage', null, global);
goog.exportSymbol('proto.ShuffleRestriction', null, global);
goog.exportSymbol('proto.SmartStopsSetting', null, global);
goog.exportSymbol('proto.SortBy', null, global);
goog.exportSymbol('proto.SortFilterPagingOptions', null, global);
goog.exportSymbol('proto.StaticList', null, global);
goog.exportSymbol('proto.Step', null, global);
goog.exportSymbol('proto.Stop', null, global);
goog.exportSymbol('proto.StopType', null, global);
goog.exportSymbol('proto.SubType', null, global);
goog.exportSymbol('proto.SubZoneType', null, global);
goog.exportSymbol('proto.SubmitAttackersResp', null, global);
goog.exportSymbol('proto.SubmitBlockersResp', null, global);
goog.exportSymbol('proto.SubmitDeckReq', null, global);
goog.exportSymbol('proto.SubmitDeckResp', null, global);
goog.exportSymbol('proto.SubmitPaymentReq', null, global);
goog.exportSymbol('proto.SubmitPaymentResp', null, global);
goog.exportSymbol('proto.SubmitTargetsResp', null, global);
goog.exportSymbol('proto.SuperFormat', null, global);
goog.exportSymbol('proto.SuperType', null, global);
goog.exportSymbol('proto.Target', null, global);
goog.exportSymbol('proto.TargetInfo', null, global);
goog.exportSymbol('proto.TargetSelection', null, global);
goog.exportSymbol('proto.TargetType', null, global);
goog.exportSymbol('proto.Task', null, global);
goog.exportSymbol('proto.TeamConfig', null, global);
goog.exportSymbol('proto.TeamInfo', null, global);
goog.exportSymbol('proto.TeamType', null, global);
goog.exportSymbol('proto.TestConfig', null, global);
goog.exportSymbol('proto.Timeout', null, global);
goog.exportSymbol('proto.TimeoutConfig', null, global);
goog.exportSymbol('proto.TimeoutMessage', null, global);
goog.exportSymbol('proto.TimeoutType', null, global);
goog.exportSymbol('proto.TimerBehavior', null, global);
goog.exportSymbol('proto.TimerConfig', null, global);
goog.exportSymbol('proto.TimerControl', null, global);
goog.exportSymbol('proto.TimerEvent', null, global);
goog.exportSymbol('proto.TimerInfo', null, global);
goog.exportSymbol('proto.TimerPackage', null, global);
goog.exportSymbol('proto.TimerType', null, global);
goog.exportSymbol('proto.TreeOfCongress', null, global);
goog.exportSymbol('proto.TurnInfo', null, global);
goog.exportSymbol('proto.TypeCategory', null, global);
goog.exportSymbol('proto.UIMessage', null, global);
goog.exportSymbol('proto.UInt32Value', null, global);
goog.exportSymbol('proto.UserConnectionInfo', null, global);
goog.exportSymbol('proto.UserOption', null, global);
goog.exportSymbol('proto.ValueHeuristicDefinition', null, global);
goog.exportSymbol('proto.ValueHeuristicParameter', null, global);
goog.exportSymbol('proto.Visibility', null, global);
goog.exportSymbol('proto.WellKnownCatalogId', null, global);
goog.exportSymbol('proto.WishCards', null, global);
goog.exportSymbol('proto.ZoneInfo', null, global);
goog.exportSymbol('proto.ZonePermissions', null, global);
goog.exportSymbol('proto.ZoneType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AIConfigData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AIConfigData.repeatedFields_, null);
};
goog.inherits(proto.AIConfigData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AIConfigData.displayName = 'proto.AIConfigData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AIConfigData.repeatedFields_ = [11,12,16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AIConfigData.prototype.toObject = function(opt_includeInstance) {
  return proto.AIConfigData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AIConfigData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIConfigData.toObject = function(includeInstance, msg) {
  var f, obj = {
    configurevalueheuristicsList: jspb.Message.toObjectList(msg.getConfigurevalueheuristicsList(),
    proto.ValueHeuristicDefinition.toObject, includeInstance),
    configureorderingheuristicsList: jspb.Message.toObjectList(msg.getConfigureorderingheuristicsList(),
    proto.OrderingHeuristicDefinition.toObject, includeInstance),
    valueheuristicparametersList: jspb.Message.toObjectList(msg.getValueheuristicparametersList(),
    proto.ValueHeuristicParameter.toObject, includeInstance),
    orderingheuristicparametersList: jspb.Message.toObjectList(msg.getOrderingheuristicparametersList(),
    proto.OrderingHeuristicParameter.toObject, includeInstance),
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tracingenabled: jspb.Message.getFieldWithDefault(msg, 2, 0),
    viewopponenthand: jspb.Message.getFieldWithDefault(msg, 3, 0),
    viewopponentlibrary: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maximumdepth: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maximumbreadth: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maximumnodeexpansion: jspb.Message.getFieldWithDefault(msg, 7, 0),
    timeoutinmilliseconds: jspb.Message.getFieldWithDefault(msg, 8, 0),
    transpositiontablesizeinkb: jspb.Message.getFieldWithDefault(msg, 9, 0),
    randomseed: jspb.Message.getFieldWithDefault(msg, 10, 0),
    configurehistoryon: jspb.Message.getFieldWithDefault(msg, 13, 0),
    allowopponentundo: jspb.Message.getFieldWithDefault(msg, 14, 0),
    allowopponentcontrol: jspb.Message.getFieldWithDefault(msg, 15, 0),
    diagnosticmode: jspb.Message.getFieldWithDefault(msg, 18, 0),
    randomorderingrange: jspb.Message.getFieldWithDefault(msg, 19, 0),
    transenable: jspb.Message.getFieldWithDefault(msg, 20, false),
    concedeonexception: jspb.Message.getFieldWithDefault(msg, 21, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AIConfigData}
 */
proto.AIConfigData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AIConfigData;
  return proto.AIConfigData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AIConfigData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AIConfigData}
 */
proto.AIConfigData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = new proto.ValueHeuristicDefinition;
      reader.readMessage(value,proto.ValueHeuristicDefinition.deserializeBinaryFromReader);
      msg.addConfigurevalueheuristics(value);
      break;
    case 12:
      var value = new proto.OrderingHeuristicDefinition;
      reader.readMessage(value,proto.OrderingHeuristicDefinition.deserializeBinaryFromReader);
      msg.addConfigureorderingheuristics(value);
      break;
    case 16:
      var value = new proto.ValueHeuristicParameter;
      reader.readMessage(value,proto.ValueHeuristicParameter.deserializeBinaryFromReader);
      msg.addValueheuristicparameters(value);
      break;
    case 17:
      var value = new proto.OrderingHeuristicParameter;
      reader.readMessage(value,proto.OrderingHeuristicParameter.deserializeBinaryFromReader);
      msg.addOrderingheuristicparameters(value);
      break;
    case 1:
      var value = /** @type {!proto.AIMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {!proto.AIConfigOption} */ (reader.readEnum());
      msg.setTracingenabled(value);
      break;
    case 3:
      var value = /** @type {!proto.AIConfigOption} */ (reader.readEnum());
      msg.setViewopponenthand(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setViewopponentlibrary(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumdepth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumbreadth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumnodeexpansion(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutinmilliseconds(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTranspositiontablesizeinkb(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandomseed(value);
      break;
    case 13:
      var value = /** @type {!proto.AIConfigOption} */ (reader.readEnum());
      msg.setConfigurehistoryon(value);
      break;
    case 14:
      var value = /** @type {!proto.AIConfigYesNo} */ (reader.readEnum());
      msg.setAllowopponentundo(value);
      break;
    case 15:
      var value = /** @type {!proto.AIConfigYesNo} */ (reader.readEnum());
      msg.setAllowopponentcontrol(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagnosticmode(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandomorderingrange(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransenable(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConcedeonexception(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AIConfigData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AIConfigData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AIConfigData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIConfigData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurevalueheuristicsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.ValueHeuristicDefinition.serializeBinaryToWriter
    );
  }
  f = message.getConfigureorderingheuristicsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.OrderingHeuristicDefinition.serializeBinaryToWriter
    );
  }
  f = message.getValueheuristicparametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.ValueHeuristicParameter.serializeBinaryToWriter
    );
  }
  f = message.getOrderingheuristicparametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.OrderingHeuristicParameter.serializeBinaryToWriter
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTracingenabled();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getViewopponenthand();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getViewopponentlibrary();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaximumdepth();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaximumbreadth();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMaximumnodeexpansion();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTimeoutinmilliseconds();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTranspositiontablesizeinkb();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getRandomseed();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getConfigurehistoryon();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getAllowopponentundo();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getAllowopponentcontrol();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getDiagnosticmode();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getRandomorderingrange();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getTransenable();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getConcedeonexception();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
};


/**
 * repeated ValueHeuristicDefinition configureValueHeuristics = 11;
 * @return {!Array.<!proto.ValueHeuristicDefinition>}
 */
proto.AIConfigData.prototype.getConfigurevalueheuristicsList = function() {
  return /** @type{!Array.<!proto.ValueHeuristicDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ValueHeuristicDefinition, 11));
};


/** @param {!Array.<!proto.ValueHeuristicDefinition>} value */
proto.AIConfigData.prototype.setConfigurevalueheuristicsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ValueHeuristicDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ValueHeuristicDefinition}
 */
proto.AIConfigData.prototype.addConfigurevalueheuristics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ValueHeuristicDefinition, opt_index);
};


proto.AIConfigData.prototype.clearConfigurevalueheuristicsList = function() {
  this.setConfigurevalueheuristicsList([]);
};


/**
 * repeated OrderingHeuristicDefinition configureOrderingHeuristics = 12;
 * @return {!Array.<!proto.OrderingHeuristicDefinition>}
 */
proto.AIConfigData.prototype.getConfigureorderingheuristicsList = function() {
  return /** @type{!Array.<!proto.OrderingHeuristicDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderingHeuristicDefinition, 12));
};


/** @param {!Array.<!proto.OrderingHeuristicDefinition>} value */
proto.AIConfigData.prototype.setConfigureorderingheuristicsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.OrderingHeuristicDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderingHeuristicDefinition}
 */
proto.AIConfigData.prototype.addConfigureorderingheuristics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.OrderingHeuristicDefinition, opt_index);
};


proto.AIConfigData.prototype.clearConfigureorderingheuristicsList = function() {
  this.setConfigureorderingheuristicsList([]);
};


/**
 * repeated ValueHeuristicParameter valueHeuristicParameters = 16;
 * @return {!Array.<!proto.ValueHeuristicParameter>}
 */
proto.AIConfigData.prototype.getValueheuristicparametersList = function() {
  return /** @type{!Array.<!proto.ValueHeuristicParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ValueHeuristicParameter, 16));
};


/** @param {!Array.<!proto.ValueHeuristicParameter>} value */
proto.AIConfigData.prototype.setValueheuristicparametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.ValueHeuristicParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ValueHeuristicParameter}
 */
proto.AIConfigData.prototype.addValueheuristicparameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.ValueHeuristicParameter, opt_index);
};


proto.AIConfigData.prototype.clearValueheuristicparametersList = function() {
  this.setValueheuristicparametersList([]);
};


/**
 * repeated OrderingHeuristicParameter orderingHeuristicParameters = 17;
 * @return {!Array.<!proto.OrderingHeuristicParameter>}
 */
proto.AIConfigData.prototype.getOrderingheuristicparametersList = function() {
  return /** @type{!Array.<!proto.OrderingHeuristicParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderingHeuristicParameter, 17));
};


/** @param {!Array.<!proto.OrderingHeuristicParameter>} value */
proto.AIConfigData.prototype.setOrderingheuristicparametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.OrderingHeuristicParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderingHeuristicParameter}
 */
proto.AIConfigData.prototype.addOrderingheuristicparameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.OrderingHeuristicParameter, opt_index);
};


proto.AIConfigData.prototype.clearOrderingheuristicparametersList = function() {
  this.setOrderingheuristicparametersList([]);
};


/**
 * optional AIMode mode = 1;
 * @return {!proto.AIMode}
 */
proto.AIConfigData.prototype.getMode = function() {
  return /** @type {!proto.AIMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.AIMode} value */
proto.AIConfigData.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional AIConfigOption tracingEnabled = 2;
 * @return {!proto.AIConfigOption}
 */
proto.AIConfigData.prototype.getTracingenabled = function() {
  return /** @type {!proto.AIConfigOption} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.AIConfigOption} value */
proto.AIConfigData.prototype.setTracingenabled = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional AIConfigOption viewOpponentHand = 3;
 * @return {!proto.AIConfigOption}
 */
proto.AIConfigData.prototype.getViewopponenthand = function() {
  return /** @type {!proto.AIConfigOption} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.AIConfigOption} value */
proto.AIConfigData.prototype.setViewopponenthand = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 viewOpponentLibrary = 4;
 * @return {number}
 */
proto.AIConfigData.prototype.getViewopponentlibrary = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setViewopponentlibrary = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 maximumDepth = 5;
 * @return {number}
 */
proto.AIConfigData.prototype.getMaximumdepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setMaximumdepth = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 maximumBreadth = 6;
 * @return {number}
 */
proto.AIConfigData.prototype.getMaximumbreadth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setMaximumbreadth = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 maximumNodeExpansion = 7;
 * @return {number}
 */
proto.AIConfigData.prototype.getMaximumnodeexpansion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setMaximumnodeexpansion = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 timeoutInMilliseconds = 8;
 * @return {number}
 */
proto.AIConfigData.prototype.getTimeoutinmilliseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setTimeoutinmilliseconds = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 transpositionTableSizeInKB = 9;
 * @return {number}
 */
proto.AIConfigData.prototype.getTranspositiontablesizeinkb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setTranspositiontablesizeinkb = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 randomSeed = 10;
 * @return {number}
 */
proto.AIConfigData.prototype.getRandomseed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setRandomseed = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional AIConfigOption configureHistoryOn = 13;
 * @return {!proto.AIConfigOption}
 */
proto.AIConfigData.prototype.getConfigurehistoryon = function() {
  return /** @type {!proto.AIConfigOption} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.AIConfigOption} value */
proto.AIConfigData.prototype.setConfigurehistoryon = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional AIConfigYesNo allowOpponentUndo = 14;
 * @return {!proto.AIConfigYesNo}
 */
proto.AIConfigData.prototype.getAllowopponentundo = function() {
  return /** @type {!proto.AIConfigYesNo} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.AIConfigYesNo} value */
proto.AIConfigData.prototype.setAllowopponentundo = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional AIConfigYesNo allowOpponentControl = 15;
 * @return {!proto.AIConfigYesNo}
 */
proto.AIConfigData.prototype.getAllowopponentcontrol = function() {
  return /** @type {!proto.AIConfigYesNo} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.AIConfigYesNo} value */
proto.AIConfigData.prototype.setAllowopponentcontrol = function(value) {
  jspb.Message.setProto3EnumField(this, 15, value);
};


/**
 * optional uint32 diagnosticMode = 18;
 * @return {number}
 */
proto.AIConfigData.prototype.getDiagnosticmode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setDiagnosticmode = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint32 randomOrderingRange = 19;
 * @return {number}
 */
proto.AIConfigData.prototype.getRandomorderingrange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.AIConfigData.prototype.setRandomorderingrange = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional bool transEnable = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AIConfigData.prototype.getTransenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.AIConfigData.prototype.setTransenable = function(value) {
  jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional bool concedeOnException = 21;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AIConfigData.prototype.getConcedeonexception = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.AIConfigData.prototype.setConcedeonexception = function(value) {
  jspb.Message.setProto3BooleanField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AIConfigureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AIConfigureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AIConfigureRequest.displayName = 'proto.AIConfigureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AIConfigureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AIConfigureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AIConfigureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIConfigureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aiid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    aiconfigdata: (f = msg.getAiconfigdata()) && proto.AIConfigData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AIConfigureRequest}
 */
proto.AIConfigureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AIConfigureRequest;
  return proto.AIConfigureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AIConfigureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AIConfigureRequest}
 */
proto.AIConfigureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAiid(value);
      break;
    case 2:
      var value = new proto.AIConfigData;
      reader.readMessage(value,proto.AIConfigData.deserializeBinaryFromReader);
      msg.setAiconfigdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AIConfigureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AIConfigureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AIConfigureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIConfigureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAiid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAiconfigdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AIConfigData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 aiID = 1;
 * @return {number}
 */
proto.AIConfigureRequest.prototype.getAiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AIConfigureRequest.prototype.setAiid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional AIConfigData aiConfigData = 2;
 * @return {?proto.AIConfigData}
 */
proto.AIConfigureRequest.prototype.getAiconfigdata = function() {
  return /** @type{?proto.AIConfigData} */ (
    jspb.Message.getWrapperField(this, proto.AIConfigData, 2));
};


/** @param {?proto.AIConfigData|undefined} value */
proto.AIConfigureRequest.prototype.setAiconfigdata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.AIConfigureRequest.prototype.clearAiconfigdata = function() {
  this.setAiconfigdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AIConfigureRequest.prototype.hasAiconfigdata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AIConfigureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AIConfigureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AIConfigureResponse.displayName = 'proto.AIConfigureResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AIConfigureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AIConfigureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AIConfigureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIConfigureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aiid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AIConfigureResponse}
 */
proto.AIConfigureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AIConfigureResponse;
  return proto.AIConfigureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AIConfigureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AIConfigureResponse}
 */
proto.AIConfigureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAiid(value);
      break;
    case 2:
      var value = /** @type {!proto.GRETHHostErrorCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AIConfigureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AIConfigureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AIConfigureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIConfigureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAiid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 aiID = 1;
 * @return {number}
 */
proto.AIConfigureResponse.prototype.getAiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AIConfigureResponse.prototype.setAiid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GRETHHostErrorCode result = 2;
 * @return {!proto.GRETHHostErrorCode}
 */
proto.AIConfigureResponse.prototype.getResult = function() {
  return /** @type {!proto.GRETHHostErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GRETHHostErrorCode} value */
proto.AIConfigureResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AICreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AICreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AICreateRequest.displayName = 'proto.AICreateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AICreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AICreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AICreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AICreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    aiid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    majorver: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minorver: jspb.Message.getFieldWithDefault(msg, 6, 0),
    revisionver: jspb.Message.getFieldWithDefault(msg, 7, 0),
    buildver: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AICreateRequest}
 */
proto.AICreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AICreateRequest;
  return proto.AICreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AICreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AICreateRequest}
 */
proto.AICreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAiid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajorver(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinorver(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRevisionver(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuildver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AICreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AICreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AICreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AICreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAiid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMajorver();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMinorver();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRevisionver();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getBuildver();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string matchID = 3;
 * @return {string}
 */
proto.AICreateRequest.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.AICreateRequest.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 aiID = 1;
 * @return {number}
 */
proto.AICreateRequest.prototype.getAiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AICreateRequest.prototype.setAiid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 systemSeatId = 2;
 * @return {number}
 */
proto.AICreateRequest.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AICreateRequest.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 gameID = 4;
 * @return {number}
 */
proto.AICreateRequest.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.AICreateRequest.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 majorVer = 5;
 * @return {number}
 */
proto.AICreateRequest.prototype.getMajorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.AICreateRequest.prototype.setMajorver = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 minorVer = 6;
 * @return {number}
 */
proto.AICreateRequest.prototype.getMinorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.AICreateRequest.prototype.setMinorver = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 revisionVer = 7;
 * @return {number}
 */
proto.AICreateRequest.prototype.getRevisionver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.AICreateRequest.prototype.setRevisionver = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 buildVer = 8;
 * @return {number}
 */
proto.AICreateRequest.prototype.getBuildver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.AICreateRequest.prototype.setBuildver = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AICreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AICreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AICreateResponse.displayName = 'proto.AICreateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AICreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AICreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AICreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AICreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aiid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AICreateResponse}
 */
proto.AICreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AICreateResponse;
  return proto.AICreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AICreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AICreateResponse}
 */
proto.AICreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAiid(value);
      break;
    case 2:
      var value = /** @type {!proto.GRETHHostErrorCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AICreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AICreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AICreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AICreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAiid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 aiID = 1;
 * @return {number}
 */
proto.AICreateResponse.prototype.getAiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AICreateResponse.prototype.setAiid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GRETHHostErrorCode result = 2;
 * @return {!proto.GRETHHostErrorCode}
 */
proto.AICreateResponse.prototype.getResult = function() {
  return /** @type {!proto.GRETHHostErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GRETHHostErrorCode} value */
proto.AICreateResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AIDestroyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AIDestroyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AIDestroyRequest.displayName = 'proto.AIDestroyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AIDestroyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AIDestroyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AIDestroyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIDestroyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aiid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AIDestroyRequest}
 */
proto.AIDestroyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AIDestroyRequest;
  return proto.AIDestroyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AIDestroyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AIDestroyRequest}
 */
proto.AIDestroyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAiid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AIDestroyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AIDestroyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AIDestroyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIDestroyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAiid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 aiID = 1;
 * @return {number}
 */
proto.AIDestroyRequest.prototype.getAiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AIDestroyRequest.prototype.setAiid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AIDestroyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AIDestroyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AIDestroyResponse.displayName = 'proto.AIDestroyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AIDestroyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AIDestroyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AIDestroyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIDestroyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aiid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AIDestroyResponse}
 */
proto.AIDestroyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AIDestroyResponse;
  return proto.AIDestroyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AIDestroyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AIDestroyResponse}
 */
proto.AIDestroyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAiid(value);
      break;
    case 2:
      var value = /** @type {!proto.GRETHHostErrorCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AIDestroyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AIDestroyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AIDestroyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIDestroyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAiid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 aiID = 1;
 * @return {number}
 */
proto.AIDestroyResponse.prototype.getAiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AIDestroyResponse.prototype.setAiid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GRETHHostErrorCode result = 2;
 * @return {!proto.GRETHHostErrorCode}
 */
proto.AIDestroyResponse.prototype.getResult = function() {
  return /** @type {!proto.GRETHHostErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GRETHHostErrorCode} value */
proto.AIDestroyResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AIFatalError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AIFatalError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AIFatalError.displayName = 'proto.AIFatalError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AIFatalError.prototype.toObject = function(opt_includeInstance) {
  return proto.AIFatalError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AIFatalError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIFatalError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errormessage: msg.getErrormessage_asB64(),
    aiid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AIFatalError}
 */
proto.AIFatalError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AIFatalError;
  return proto.AIFatalError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AIFatalError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AIFatalError}
 */
proto.AIFatalError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrormessage(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAiid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AIFatalError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AIFatalError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AIFatalError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIFatalError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrormessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAiid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional bytes errorMessage = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AIFatalError.prototype.getErrormessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes errorMessage = 2;
 * This is a type-conversion wrapper around `getErrormessage()`
 * @return {string}
 */
proto.AIFatalError.prototype.getErrormessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrormessage()));
};


/**
 * optional bytes errorMessage = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrormessage()`
 * @return {!Uint8Array}
 */
proto.AIFatalError.prototype.getErrormessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrormessage()));
};


/** @param {!(string|Uint8Array)} value */
proto.AIFatalError.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 aiID = 1;
 * @return {number}
 */
proto.AIFatalError.prototype.getAiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AIFatalError.prototype.setAiid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AIReconfigureData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AIReconfigureData.repeatedFields_, null);
};
goog.inherits(proto.AIReconfigureData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AIReconfigureData.displayName = 'proto.AIReconfigureData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AIReconfigureData.repeatedFields_ = [7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AIReconfigureData.prototype.toObject = function(opt_includeInstance) {
  return proto.AIReconfigureData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AIReconfigureData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIReconfigureData.toObject = function(includeInstance, msg) {
  var f, obj = {
    configurevalueheuristicsList: jspb.Message.toObjectList(msg.getConfigurevalueheuristicsList(),
    proto.ValueHeuristicDefinition.toObject, includeInstance),
    configureorderingheuristicsList: jspb.Message.toObjectList(msg.getConfigureorderingheuristicsList(),
    proto.OrderingHeuristicDefinition.toObject, includeInstance),
    valueheuristicparametersList: jspb.Message.toObjectList(msg.getValueheuristicparametersList(),
    proto.ValueHeuristicParameter.toObject, includeInstance),
    orderingheuristicparametersList: jspb.Message.toObjectList(msg.getOrderingheuristicparametersList(),
    proto.OrderingHeuristicParameter.toObject, includeInstance),
    tracingenabled: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maximumdepth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maximumbreadth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maximumnodeexpansion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    transpositiontablesizeinkb: jspb.Message.getFieldWithDefault(msg, 5, 0),
    randomseed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    transenable: jspb.Message.getFieldWithDefault(msg, 11, false),
    concedeonexception: jspb.Message.getFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AIReconfigureData}
 */
proto.AIReconfigureData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AIReconfigureData;
  return proto.AIReconfigureData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AIReconfigureData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AIReconfigureData}
 */
proto.AIReconfigureData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new proto.ValueHeuristicDefinition;
      reader.readMessage(value,proto.ValueHeuristicDefinition.deserializeBinaryFromReader);
      msg.addConfigurevalueheuristics(value);
      break;
    case 8:
      var value = new proto.OrderingHeuristicDefinition;
      reader.readMessage(value,proto.OrderingHeuristicDefinition.deserializeBinaryFromReader);
      msg.addConfigureorderingheuristics(value);
      break;
    case 9:
      var value = new proto.ValueHeuristicParameter;
      reader.readMessage(value,proto.ValueHeuristicParameter.deserializeBinaryFromReader);
      msg.addValueheuristicparameters(value);
      break;
    case 10:
      var value = new proto.OrderingHeuristicParameter;
      reader.readMessage(value,proto.OrderingHeuristicParameter.deserializeBinaryFromReader);
      msg.addOrderingheuristicparameters(value);
      break;
    case 1:
      var value = /** @type {!proto.AIConfigOption} */ (reader.readEnum());
      msg.setTracingenabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumdepth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumbreadth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumnodeexpansion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTranspositiontablesizeinkb(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandomseed(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransenable(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConcedeonexception(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AIReconfigureData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AIReconfigureData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AIReconfigureData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AIReconfigureData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurevalueheuristicsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ValueHeuristicDefinition.serializeBinaryToWriter
    );
  }
  f = message.getConfigureorderingheuristicsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.OrderingHeuristicDefinition.serializeBinaryToWriter
    );
  }
  f = message.getValueheuristicparametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ValueHeuristicParameter.serializeBinaryToWriter
    );
  }
  f = message.getOrderingheuristicparametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.OrderingHeuristicParameter.serializeBinaryToWriter
    );
  }
  f = message.getTracingenabled();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMaximumdepth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaximumbreadth();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaximumnodeexpansion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTranspositiontablesizeinkb();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getRandomseed();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTransenable();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getConcedeonexception();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * repeated ValueHeuristicDefinition configureValueHeuristics = 7;
 * @return {!Array.<!proto.ValueHeuristicDefinition>}
 */
proto.AIReconfigureData.prototype.getConfigurevalueheuristicsList = function() {
  return /** @type{!Array.<!proto.ValueHeuristicDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ValueHeuristicDefinition, 7));
};


/** @param {!Array.<!proto.ValueHeuristicDefinition>} value */
proto.AIReconfigureData.prototype.setConfigurevalueheuristicsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ValueHeuristicDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ValueHeuristicDefinition}
 */
proto.AIReconfigureData.prototype.addConfigurevalueheuristics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ValueHeuristicDefinition, opt_index);
};


proto.AIReconfigureData.prototype.clearConfigurevalueheuristicsList = function() {
  this.setConfigurevalueheuristicsList([]);
};


/**
 * repeated OrderingHeuristicDefinition configureOrderingHeuristics = 8;
 * @return {!Array.<!proto.OrderingHeuristicDefinition>}
 */
proto.AIReconfigureData.prototype.getConfigureorderingheuristicsList = function() {
  return /** @type{!Array.<!proto.OrderingHeuristicDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderingHeuristicDefinition, 8));
};


/** @param {!Array.<!proto.OrderingHeuristicDefinition>} value */
proto.AIReconfigureData.prototype.setConfigureorderingheuristicsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.OrderingHeuristicDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderingHeuristicDefinition}
 */
proto.AIReconfigureData.prototype.addConfigureorderingheuristics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.OrderingHeuristicDefinition, opt_index);
};


proto.AIReconfigureData.prototype.clearConfigureorderingheuristicsList = function() {
  this.setConfigureorderingheuristicsList([]);
};


/**
 * repeated ValueHeuristicParameter valueHeuristicParameters = 9;
 * @return {!Array.<!proto.ValueHeuristicParameter>}
 */
proto.AIReconfigureData.prototype.getValueheuristicparametersList = function() {
  return /** @type{!Array.<!proto.ValueHeuristicParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ValueHeuristicParameter, 9));
};


/** @param {!Array.<!proto.ValueHeuristicParameter>} value */
proto.AIReconfigureData.prototype.setValueheuristicparametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ValueHeuristicParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ValueHeuristicParameter}
 */
proto.AIReconfigureData.prototype.addValueheuristicparameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ValueHeuristicParameter, opt_index);
};


proto.AIReconfigureData.prototype.clearValueheuristicparametersList = function() {
  this.setValueheuristicparametersList([]);
};


/**
 * repeated OrderingHeuristicParameter orderingHeuristicParameters = 10;
 * @return {!Array.<!proto.OrderingHeuristicParameter>}
 */
proto.AIReconfigureData.prototype.getOrderingheuristicparametersList = function() {
  return /** @type{!Array.<!proto.OrderingHeuristicParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderingHeuristicParameter, 10));
};


/** @param {!Array.<!proto.OrderingHeuristicParameter>} value */
proto.AIReconfigureData.prototype.setOrderingheuristicparametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.OrderingHeuristicParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderingHeuristicParameter}
 */
proto.AIReconfigureData.prototype.addOrderingheuristicparameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.OrderingHeuristicParameter, opt_index);
};


proto.AIReconfigureData.prototype.clearOrderingheuristicparametersList = function() {
  this.setOrderingheuristicparametersList([]);
};


/**
 * optional AIConfigOption tracingEnabled = 1;
 * @return {!proto.AIConfigOption}
 */
proto.AIReconfigureData.prototype.getTracingenabled = function() {
  return /** @type {!proto.AIConfigOption} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.AIConfigOption} value */
proto.AIReconfigureData.prototype.setTracingenabled = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 maximumDepth = 2;
 * @return {number}
 */
proto.AIReconfigureData.prototype.getMaximumdepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AIReconfigureData.prototype.setMaximumdepth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maximumBreadth = 3;
 * @return {number}
 */
proto.AIReconfigureData.prototype.getMaximumbreadth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AIReconfigureData.prototype.setMaximumbreadth = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 maximumNodeExpansion = 4;
 * @return {number}
 */
proto.AIReconfigureData.prototype.getMaximumnodeexpansion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.AIReconfigureData.prototype.setMaximumnodeexpansion = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 transpositionTableSizeInKB = 5;
 * @return {number}
 */
proto.AIReconfigureData.prototype.getTranspositiontablesizeinkb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.AIReconfigureData.prototype.setTranspositiontablesizeinkb = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 randomSeed = 6;
 * @return {number}
 */
proto.AIReconfigureData.prototype.getRandomseed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.AIReconfigureData.prototype.setRandomseed = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool transEnable = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AIReconfigureData.prototype.getTransenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.AIReconfigureData.prototype.setTransenable = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool concedeOnException = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AIReconfigureData.prototype.getConcedeonexception = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.AIReconfigureData.prototype.setConcedeonexception = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Action.repeatedFields_, null);
};
goog.inherits(proto.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Action.displayName = 'proto.Action';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Action.repeatedFields_ = [7,10,11,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    autotapactionsList: jspb.Message.toObjectList(msg.getAutotapactionsList(),
    proto.AutoTapAction.toObject, includeInstance),
    manapaymentoptionsList: jspb.Message.toObjectList(msg.getManapaymentoptionsList(),
    proto.ManaPaymentOption.toObject, includeInstance),
    manacostList: jspb.Message.toObjectList(msg.getManacostList(),
    proto.ManaRequirement.toObject, includeInstance),
    holdsourcesList: jspb.Message.getRepeatedField(msg, 16),
    actiontype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    grpid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    instanceid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    grouping: jspb.Message.getFieldWithDefault(msg, 4, 0),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sourceid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    alternativegrpid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    shouldstop: jspb.Message.getFieldWithDefault(msg, 12, false),
    disqualifyingsourceid: jspb.Message.getFieldWithDefault(msg, 13, 0),
    selectiontype: jspb.Message.getFieldWithDefault(msg, 14, 0),
    selection: jspb.Message.getFieldWithDefault(msg, 15, 0),
    alternativesourcezcid: jspb.Message.getFieldWithDefault(msg, 17, 0),
    ishidden: jspb.Message.getFieldWithDefault(msg, 18, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Action}
 */
proto.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Action;
  return proto.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Action}
 */
proto.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new proto.AutoTapAction;
      reader.readMessage(value,proto.AutoTapAction.deserializeBinaryFromReader);
      msg.addAutotapactions(value);
      break;
    case 10:
      var value = new proto.ManaPaymentOption;
      reader.readMessage(value,proto.ManaPaymentOption.deserializeBinaryFromReader);
      msg.addManapaymentoptions(value);
      break;
    case 11:
      var value = new proto.ManaRequirement;
      reader.readMessage(value,proto.ManaRequirement.deserializeBinaryFromReader);
      msg.addManacost(value);
      break;
    case 16:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setHoldsourcesList(value);
      break;
    case 1:
      var value = /** @type {!proto.ActionType} */ (reader.readEnum());
      msg.setActiontype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrpid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 4:
      var value = /** @type {!proto.Grouping} */ (reader.readEnum());
      msg.setGrouping(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourceid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAlternativegrpid(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldstop(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDisqualifyingsourceid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSelectiontype(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSelection(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAlternativesourcezcid(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIshidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutotapactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.AutoTapAction.serializeBinaryToWriter
    );
  }
  f = message.getManapaymentoptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ManaPaymentOption.serializeBinaryToWriter
    );
  }
  f = message.getManacostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.ManaRequirement.serializeBinaryToWriter
    );
  }
  f = message.getHoldsourcesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      16,
      f
    );
  }
  f = message.getActiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGrpid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGrouping();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSourceid();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getAlternativegrpid();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getShouldstop();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getDisqualifyingsourceid();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getSelectiontype();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getSelection();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getAlternativesourcezcid();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getIshidden();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
};


/**
 * repeated AutoTapAction autoTapActions = 7;
 * @return {!Array.<!proto.AutoTapAction>}
 */
proto.Action.prototype.getAutotapactionsList = function() {
  return /** @type{!Array.<!proto.AutoTapAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AutoTapAction, 7));
};


/** @param {!Array.<!proto.AutoTapAction>} value */
proto.Action.prototype.setAutotapactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.AutoTapAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AutoTapAction}
 */
proto.Action.prototype.addAutotapactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.AutoTapAction, opt_index);
};


proto.Action.prototype.clearAutotapactionsList = function() {
  this.setAutotapactionsList([]);
};


/**
 * repeated ManaPaymentOption manaPaymentOptions = 10;
 * @return {!Array.<!proto.ManaPaymentOption>}
 */
proto.Action.prototype.getManapaymentoptionsList = function() {
  return /** @type{!Array.<!proto.ManaPaymentOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaPaymentOption, 10));
};


/** @param {!Array.<!proto.ManaPaymentOption>} value */
proto.Action.prototype.setManapaymentoptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ManaPaymentOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaPaymentOption}
 */
proto.Action.prototype.addManapaymentoptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ManaPaymentOption, opt_index);
};


proto.Action.prototype.clearManapaymentoptionsList = function() {
  this.setManapaymentoptionsList([]);
};


/**
 * repeated ManaRequirement manaCost = 11;
 * @return {!Array.<!proto.ManaRequirement>}
 */
proto.Action.prototype.getManacostList = function() {
  return /** @type{!Array.<!proto.ManaRequirement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaRequirement, 11));
};


/** @param {!Array.<!proto.ManaRequirement>} value */
proto.Action.prototype.setManacostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ManaRequirement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaRequirement}
 */
proto.Action.prototype.addManacost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ManaRequirement, opt_index);
};


proto.Action.prototype.clearManacostList = function() {
  this.setManacostList([]);
};


/**
 * repeated uint32 holdSources = 16;
 * @return {!Array.<number>}
 */
proto.Action.prototype.getHoldsourcesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 16));
};


/** @param {!Array.<number>} value */
proto.Action.prototype.setHoldsourcesList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Action.prototype.addHoldsources = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


proto.Action.prototype.clearHoldsourcesList = function() {
  this.setHoldsourcesList([]);
};


/**
 * optional ActionType actionType = 1;
 * @return {!proto.ActionType}
 */
proto.Action.prototype.getActiontype = function() {
  return /** @type {!proto.ActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ActionType} value */
proto.Action.prototype.setActiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 grpId = 2;
 * @return {number}
 */
proto.Action.prototype.getGrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Action.prototype.setGrpid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 instanceId = 3;
 * @return {number}
 */
proto.Action.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Action.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Grouping grouping = 4;
 * @return {!proto.Grouping}
 */
proto.Action.prototype.getGrouping = function() {
  return /** @type {!proto.Grouping} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.Grouping} value */
proto.Action.prototype.setGrouping = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 abilityGrpId = 6;
 * @return {number}
 */
proto.Action.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Action.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 sourceId = 8;
 * @return {number}
 */
proto.Action.prototype.getSourceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Action.prototype.setSourceid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 alternativeGrpId = 9;
 * @return {number}
 */
proto.Action.prototype.getAlternativegrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Action.prototype.setAlternativegrpid = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool shouldStop = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Action.prototype.getShouldstop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.Action.prototype.setShouldstop = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint32 disqualifyingSourceId = 13;
 * @return {number}
 */
proto.Action.prototype.getDisqualifyingsourceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Action.prototype.setDisqualifyingsourceid = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 selectionType = 14;
 * @return {number}
 */
proto.Action.prototype.getSelectiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.Action.prototype.setSelectiontype = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 selection = 15;
 * @return {number}
 */
proto.Action.prototype.getSelection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.Action.prototype.setSelection = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint32 alternativeSourceZcid = 17;
 * @return {number}
 */
proto.Action.prototype.getAlternativesourcezcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.Action.prototype.setAlternativesourcezcid = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool isHidden = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Action.prototype.getIshidden = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.Action.prototype.setIshidden = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionCostReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActionCostReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ActionCostReq.displayName = 'proto.ActionCostReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionCostReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionCostReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionCostReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionCostReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actioncosttype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    costselection: (f = msg.getCostselection()) && proto.SelectNReq.toObject(includeInstance, f),
    counterselection: (f = msg.getCounterselection()) && proto.SelectCountersReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionCostReq}
 */
proto.ActionCostReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionCostReq;
  return proto.ActionCostReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionCostReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionCostReq}
 */
proto.ActionCostReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!proto.ActionCostType} */ (reader.readEnum());
      msg.setActioncosttype(value);
      break;
    case 4:
      var value = new proto.SelectNReq;
      reader.readMessage(value,proto.SelectNReq.deserializeBinaryFromReader);
      msg.setCostselection(value);
      break;
    case 5:
      var value = new proto.SelectCountersReq;
      reader.readMessage(value,proto.SelectCountersReq.deserializeBinaryFromReader);
      msg.setCounterselection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionCostReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActionCostReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActionCostReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionCostReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getActioncosttype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCostselection();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SelectNReq.serializeBinaryToWriter
    );
  }
  f = message.getCounterselection();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SelectCountersReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.ActionCostReq.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ActionCostReq.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ActionCostType actionCostType = 3;
 * @return {!proto.ActionCostType}
 */
proto.ActionCostReq.prototype.getActioncosttype = function() {
  return /** @type {!proto.ActionCostType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ActionCostType} value */
proto.ActionCostReq.prototype.setActioncosttype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SelectNReq costSelection = 4;
 * @return {?proto.SelectNReq}
 */
proto.ActionCostReq.prototype.getCostselection = function() {
  return /** @type{?proto.SelectNReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectNReq, 4));
};


/** @param {?proto.SelectNReq|undefined} value */
proto.ActionCostReq.prototype.setCostselection = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ActionCostReq.prototype.clearCostselection = function() {
  this.setCostselection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ActionCostReq.prototype.hasCostselection = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SelectCountersReq counterSelection = 5;
 * @return {?proto.SelectCountersReq}
 */
proto.ActionCostReq.prototype.getCounterselection = function() {
  return /** @type{?proto.SelectCountersReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectCountersReq, 5));
};


/** @param {?proto.SelectCountersReq|undefined} value */
proto.ActionCostReq.prototype.setCounterselection = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ActionCostReq.prototype.clearCounterselection = function() {
  this.setCounterselection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ActionCostReq.prototype.hasCounterselection = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionCostResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActionCostResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ActionCostResp.displayName = 'proto.ActionCostResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionCostResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionCostResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionCostResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionCostResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actioncosttype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    costselection: (f = msg.getCostselection()) && proto.SelectNResp.toObject(includeInstance, f),
    counterselection: (f = msg.getCounterselection()) && proto.SelectCountersResp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionCostResp}
 */
proto.ActionCostResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionCostResp;
  return proto.ActionCostResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionCostResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionCostResp}
 */
proto.ActionCostResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!proto.ActionCostType} */ (reader.readEnum());
      msg.setActioncosttype(value);
      break;
    case 3:
      var value = new proto.SelectNResp;
      reader.readMessage(value,proto.SelectNResp.deserializeBinaryFromReader);
      msg.setCostselection(value);
      break;
    case 4:
      var value = new proto.SelectCountersResp;
      reader.readMessage(value,proto.SelectCountersResp.deserializeBinaryFromReader);
      msg.setCounterselection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionCostResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActionCostResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActionCostResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionCostResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getActioncosttype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCostselection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SelectNResp.serializeBinaryToWriter
    );
  }
  f = message.getCounterselection();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SelectCountersResp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.ActionCostResp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ActionCostResp.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ActionCostType actionCostType = 2;
 * @return {!proto.ActionCostType}
 */
proto.ActionCostResp.prototype.getActioncosttype = function() {
  return /** @type {!proto.ActionCostType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ActionCostType} value */
proto.ActionCostResp.prototype.setActioncosttype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SelectNResp costSelection = 3;
 * @return {?proto.SelectNResp}
 */
proto.ActionCostResp.prototype.getCostselection = function() {
  return /** @type{?proto.SelectNResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectNResp, 3));
};


/** @param {?proto.SelectNResp|undefined} value */
proto.ActionCostResp.prototype.setCostselection = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ActionCostResp.prototype.clearCostselection = function() {
  this.setCostselection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ActionCostResp.prototype.hasCostselection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SelectCountersResp counterSelection = 4;
 * @return {?proto.SelectCountersResp}
 */
proto.ActionCostResp.prototype.getCounterselection = function() {
  return /** @type{?proto.SelectCountersResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectCountersResp, 4));
};


/** @param {?proto.SelectCountersResp|undefined} value */
proto.ActionCostResp.prototype.setCounterselection = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ActionCostResp.prototype.clearCounterselection = function() {
  this.setCounterselection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ActionCostResp.prototype.hasCounterselection = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ActionInfo.displayName = 'proto.ActionInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    action: (f = msg.getAction()) && proto.Action.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionInfo}
 */
proto.ActionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionInfo;
  return proto.ActionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionInfo}
 */
proto.ActionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeatid(value);
      break;
    case 3:
      var value = new proto.Action;
      reader.readMessage(value,proto.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 actionId = 1;
 * @return {number}
 */
proto.ActionInfo.prototype.getActionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ActionInfo.prototype.setActionid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 seatId = 2;
 * @return {number}
 */
proto.ActionInfo.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ActionInfo.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Action action = 3;
 * @return {?proto.Action}
 */
proto.ActionInfo.prototype.getAction = function() {
  return /** @type{?proto.Action} */ (
    jspb.Message.getWrapperField(this, proto.Action, 3));
};


/** @param {?proto.Action|undefined} value */
proto.ActionInfo.prototype.setAction = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ActionInfo.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ActionInfo.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionsAvailableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ActionsAvailableReq.repeatedFields_, null);
};
goog.inherits(proto.ActionsAvailableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ActionsAvailableReq.displayName = 'proto.ActionsAvailableReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ActionsAvailableReq.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionsAvailableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionsAvailableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionsAvailableReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionsAvailableReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.Action.toObject, includeInstance),
    inactiveactionsList: jspb.Message.toObjectList(msg.getInactiveactionsList(),
    proto.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionsAvailableReq}
 */
proto.ActionsAvailableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionsAvailableReq;
  return proto.ActionsAvailableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionsAvailableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionsAvailableReq}
 */
proto.ActionsAvailableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Action;
      reader.readMessage(value,proto.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 2:
      var value = new proto.Action;
      reader.readMessage(value,proto.Action.deserializeBinaryFromReader);
      msg.addInactiveactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionsAvailableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActionsAvailableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActionsAvailableReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionsAvailableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Action.serializeBinaryToWriter
    );
  }
  f = message.getInactiveactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array.<!proto.Action>}
 */
proto.ActionsAvailableReq.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Action, 1));
};


/** @param {!Array.<!proto.Action>} value */
proto.ActionsAvailableReq.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Action}
 */
proto.ActionsAvailableReq.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Action, opt_index);
};


proto.ActionsAvailableReq.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * repeated Action inactiveActions = 2;
 * @return {!Array.<!proto.Action>}
 */
proto.ActionsAvailableReq.prototype.getInactiveactionsList = function() {
  return /** @type{!Array.<!proto.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Action, 2));
};


/** @param {!Array.<!proto.Action>} value */
proto.ActionsAvailableReq.prototype.setInactiveactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Action}
 */
proto.ActionsAvailableReq.prototype.addInactiveactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Action, opt_index);
};


proto.ActionsAvailableReq.prototype.clearInactiveactionsList = function() {
  this.setInactiveactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AlternativeCost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AlternativeCost.repeatedFields_, null);
};
goog.inherits(proto.AlternativeCost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AlternativeCost.displayName = 'proto.AlternativeCost';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AlternativeCost.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AlternativeCost.prototype.toObject = function(opt_includeInstance) {
  return proto.AlternativeCost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AlternativeCost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AlternativeCost.toObject = function(includeInstance, msg) {
  var f, obj = {
    manacostList: jspb.Message.toObjectList(msg.getManacostList(),
    proto.ManaRequirement.toObject, includeInstance),
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    grpid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    localizationid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AlternativeCost}
 */
proto.AlternativeCost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AlternativeCost;
  return proto.AlternativeCost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AlternativeCost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AlternativeCost}
 */
proto.AlternativeCost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.ManaRequirement;
      reader.readMessage(value,proto.ManaRequirement.deserializeBinaryFromReader);
      msg.addManacost(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrpid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocalizationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AlternativeCost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AlternativeCost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AlternativeCost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AlternativeCost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getManacostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ManaRequirement.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGrpid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocalizationid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated ManaRequirement manaCost = 4;
 * @return {!Array.<!proto.ManaRequirement>}
 */
proto.AlternativeCost.prototype.getManacostList = function() {
  return /** @type{!Array.<!proto.ManaRequirement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaRequirement, 4));
};


/** @param {!Array.<!proto.ManaRequirement>} value */
proto.AlternativeCost.prototype.setManacostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ManaRequirement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaRequirement}
 */
proto.AlternativeCost.prototype.addManacost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ManaRequirement, opt_index);
};


proto.AlternativeCost.prototype.clearManacostList = function() {
  this.setManacostList([]);
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.AlternativeCost.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AlternativeCost.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 grpId = 2;
 * @return {number}
 */
proto.AlternativeCost.prototype.getGrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AlternativeCost.prototype.setGrpid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 localizationId = 3;
 * @return {number}
 */
proto.AlternativeCost.prototype.getLocalizationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AlternativeCost.prototype.setLocalizationid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AlternativeCostReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AlternativeCostReq.repeatedFields_, null);
};
goog.inherits(proto.AlternativeCostReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AlternativeCostReq.displayName = 'proto.AlternativeCostReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AlternativeCostReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AlternativeCostReq.prototype.toObject = function(opt_includeInstance) {
  return proto.AlternativeCostReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AlternativeCostReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AlternativeCostReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    costsList: jspb.Message.toObjectList(msg.getCostsList(),
    proto.AlternativeCost.toObject, includeInstance),
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AlternativeCostReq}
 */
proto.AlternativeCostReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AlternativeCostReq;
  return proto.AlternativeCostReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AlternativeCostReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AlternativeCostReq}
 */
proto.AlternativeCostReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.AlternativeCost;
      reader.readMessage(value,proto.AlternativeCost.deserializeBinaryFromReader);
      msg.addCosts(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AlternativeCostReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AlternativeCostReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AlternativeCostReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AlternativeCostReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.AlternativeCost.serializeBinaryToWriter
    );
  }
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated AlternativeCost costs = 2;
 * @return {!Array.<!proto.AlternativeCost>}
 */
proto.AlternativeCostReq.prototype.getCostsList = function() {
  return /** @type{!Array.<!proto.AlternativeCost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AlternativeCost, 2));
};


/** @param {!Array.<!proto.AlternativeCost>} value */
proto.AlternativeCostReq.prototype.setCostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AlternativeCost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AlternativeCost}
 */
proto.AlternativeCostReq.prototype.addCosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AlternativeCost, opt_index);
};


proto.AlternativeCostReq.prototype.clearCostsList = function() {
  this.setCostsList([]);
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.AlternativeCostReq.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AlternativeCostReq.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AlternativeCostResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AlternativeCostResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AlternativeCostResp.displayName = 'proto.AlternativeCostResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AlternativeCostResp.prototype.toObject = function(opt_includeInstance) {
  return proto.AlternativeCostResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AlternativeCostResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AlternativeCostResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AlternativeCostResp}
 */
proto.AlternativeCostResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AlternativeCostResp;
  return proto.AlternativeCostResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AlternativeCostResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AlternativeCostResp}
 */
proto.AlternativeCostResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AlternativeCostResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AlternativeCostResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AlternativeCostResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AlternativeCostResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.AlternativeCostResp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AlternativeCostResp.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnnotationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AnnotationInfo.repeatedFields_, null);
};
goog.inherits(proto.AnnotationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnnotationInfo.displayName = 'proto.AnnotationInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AnnotationInfo.repeatedFields_ = [3,4,6,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnnotationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AnnotationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnnotationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnnotationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    affectedidsList: jspb.Message.getRepeatedField(msg, 3),
    typeList: jspb.Message.getRepeatedField(msg, 4),
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    proto.KeyValuePairInfo.toObject, includeInstance),
    ignoreforseatidsList: jspb.Message.getRepeatedField(msg, 8),
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    affectorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    allowredaction: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnnotationInfo}
 */
proto.AnnotationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnnotationInfo;
  return proto.AnnotationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnnotationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnnotationInfo}
 */
proto.AnnotationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAffectedidsList(value);
      break;
    case 4:
      var value = /** @type {!Array.<!proto.AnnotationType>} */ (reader.readPackedEnum());
      msg.setTypeList(value);
      break;
    case 6:
      var value = new proto.KeyValuePairInfo;
      reader.readMessage(value,proto.KeyValuePairInfo.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    case 8:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIgnoreforseatidsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAffectorid(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowredaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnnotationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnnotationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnnotationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnnotationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAffectedidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getTypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.KeyValuePairInfo.serializeBinaryToWriter
    );
  }
  f = message.getIgnoreforseatidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      8,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAffectorid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAllowredaction();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * repeated uint32 affectedIds = 3;
 * @return {!Array.<number>}
 */
proto.AnnotationInfo.prototype.getAffectedidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.AnnotationInfo.prototype.setAffectedidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.AnnotationInfo.prototype.addAffectedids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.AnnotationInfo.prototype.clearAffectedidsList = function() {
  this.setAffectedidsList([]);
};


/**
 * repeated AnnotationType type = 4;
 * @return {!Array.<!proto.AnnotationType>}
 */
proto.AnnotationInfo.prototype.getTypeList = function() {
  return /** @type {!Array.<!proto.AnnotationType>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.AnnotationType>} value */
proto.AnnotationInfo.prototype.setTypeList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.AnnotationType} value
 * @param {number=} opt_index
 */
proto.AnnotationInfo.prototype.addType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.AnnotationInfo.prototype.clearTypeList = function() {
  this.setTypeList([]);
};


/**
 * repeated KeyValuePairInfo details = 6;
 * @return {!Array.<!proto.KeyValuePairInfo>}
 */
proto.AnnotationInfo.prototype.getDetailsList = function() {
  return /** @type{!Array.<!proto.KeyValuePairInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.KeyValuePairInfo, 6));
};


/** @param {!Array.<!proto.KeyValuePairInfo>} value */
proto.AnnotationInfo.prototype.setDetailsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.KeyValuePairInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyValuePairInfo}
 */
proto.AnnotationInfo.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.KeyValuePairInfo, opt_index);
};


proto.AnnotationInfo.prototype.clearDetailsList = function() {
  this.setDetailsList([]);
};


/**
 * repeated uint32 ignoreForSeatIds = 8;
 * @return {!Array.<number>}
 */
proto.AnnotationInfo.prototype.getIgnoreforseatidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.AnnotationInfo.prototype.setIgnoreforseatidsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.AnnotationInfo.prototype.addIgnoreforseatids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.AnnotationInfo.prototype.clearIgnoreforseatidsList = function() {
  this.setIgnoreforseatidsList([]);
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.AnnotationInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AnnotationInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 affectorId = 2;
 * @return {number}
 */
proto.AnnotationInfo.prototype.getAffectorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AnnotationInfo.prototype.setAffectorid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool allowRedaction = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AnnotationInfo.prototype.getAllowredaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.AnnotationInfo.prototype.setAllowredaction = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnyLobbyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AnyLobbyMessage.oneofGroups_);
};
goog.inherits(proto.AnyLobbyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnyLobbyMessage.displayName = 'proto.AnyLobbyMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AnyLobbyMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.AnyLobbyMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CLIENTTOLOBBYMESSAGE: 2,
  LOBBYTOCLIENTMESSAGE: 3
};

/**
 * @return {proto.AnyLobbyMessage.MessageCase}
 */
proto.AnyLobbyMessage.prototype.getMessageCase = function() {
  return /** @type {proto.AnyLobbyMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.AnyLobbyMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnyLobbyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.AnyLobbyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnyLobbyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyLobbyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    clienttolobbymessage: (f = msg.getClienttolobbymessage()) && proto.ClientToLobbyMessage.toObject(includeInstance, f),
    lobbytoclientmessage: (f = msg.getLobbytoclientmessage()) && proto.LobbyToClientMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnyLobbyMessage}
 */
proto.AnyLobbyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnyLobbyMessage;
  return proto.AnyLobbyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnyLobbyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnyLobbyMessage}
 */
proto.AnyLobbyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.ClientToLobbyMessage;
      reader.readMessage(value,proto.ClientToLobbyMessage.deserializeBinaryFromReader);
      msg.setClienttolobbymessage(value);
      break;
    case 3:
      var value = new proto.LobbyToClientMessage;
      reader.readMessage(value,proto.LobbyToClientMessage.deserializeBinaryFromReader);
      msg.setLobbytoclientmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnyLobbyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnyLobbyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnyLobbyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyLobbyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClienttolobbymessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ClientToLobbyMessage.serializeBinaryToWriter
    );
  }
  f = message.getLobbytoclientmessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LobbyToClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientToLobbyMessage clientToLobbyMessage = 2;
 * @return {?proto.ClientToLobbyMessage}
 */
proto.AnyLobbyMessage.prototype.getClienttolobbymessage = function() {
  return /** @type{?proto.ClientToLobbyMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToLobbyMessage, 2));
};


/** @param {?proto.ClientToLobbyMessage|undefined} value */
proto.AnyLobbyMessage.prototype.setClienttolobbymessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.AnyLobbyMessage.oneofGroups_[0], value);
};


proto.AnyLobbyMessage.prototype.clearClienttolobbymessage = function() {
  this.setClienttolobbymessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyLobbyMessage.prototype.hasClienttolobbymessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LobbyToClientMessage lobbyToClientMessage = 3;
 * @return {?proto.LobbyToClientMessage}
 */
proto.AnyLobbyMessage.prototype.getLobbytoclientmessage = function() {
  return /** @type{?proto.LobbyToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.LobbyToClientMessage, 3));
};


/** @param {?proto.LobbyToClientMessage|undefined} value */
proto.AnyLobbyMessage.prototype.setLobbytoclientmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.AnyLobbyMessage.oneofGroups_[0], value);
};


proto.AnyLobbyMessage.prototype.clearLobbytoclientmessage = function() {
  this.setLobbytoclientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyLobbyMessage.prototype.hasLobbytoclientmessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AnyMessage.oneofGroups_);
};
goog.inherits(proto.AnyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnyMessage.displayName = 'proto.AnyMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AnyMessage.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.AnyMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  SERVERTOGREMESSAGE: 2,
  GRETOSERVERMESSAGE: 3,
  CLIENTTOGREMESSAGE: 4,
  GRETOCLIENTMESSAGE: 5
};

/**
 * @return {proto.AnyMessage.MessageCase}
 */
proto.AnyMessage.prototype.getMessageCase = function() {
  return /** @type {proto.AnyMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.AnyMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.AnyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    servertogremessage: (f = msg.getServertogremessage()) && proto.ServerToGREMessage.toObject(includeInstance, f),
    gretoservermessage: (f = msg.getGretoservermessage()) && proto.GREToServerMessage.toObject(includeInstance, f),
    clienttogremessage: (f = msg.getClienttogremessage()) && proto.ClientToGREMessage.toObject(includeInstance, f),
    gretoclientmessage: (f = msg.getGretoclientmessage()) && proto.GREToClientMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnyMessage}
 */
proto.AnyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnyMessage;
  return proto.AnyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnyMessage}
 */
proto.AnyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.ServerToGREMessage;
      reader.readMessage(value,proto.ServerToGREMessage.deserializeBinaryFromReader);
      msg.setServertogremessage(value);
      break;
    case 3:
      var value = new proto.GREToServerMessage;
      reader.readMessage(value,proto.GREToServerMessage.deserializeBinaryFromReader);
      msg.setGretoservermessage(value);
      break;
    case 4:
      var value = new proto.ClientToGREMessage;
      reader.readMessage(value,proto.ClientToGREMessage.deserializeBinaryFromReader);
      msg.setClienttogremessage(value);
      break;
    case 5:
      var value = new proto.GREToClientMessage;
      reader.readMessage(value,proto.GREToClientMessage.deserializeBinaryFromReader);
      msg.setGretoclientmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getServertogremessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ServerToGREMessage.serializeBinaryToWriter
    );
  }
  f = message.getGretoservermessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GREToServerMessage.serializeBinaryToWriter
    );
  }
  f = message.getClienttogremessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ClientToGREMessage.serializeBinaryToWriter
    );
  }
  f = message.getGretoclientmessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.GREToClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.AnyMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AnyMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ServerToGREMessage serverToGREMessage = 2;
 * @return {?proto.ServerToGREMessage}
 */
proto.AnyMessage.prototype.getServertogremessage = function() {
  return /** @type{?proto.ServerToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ServerToGREMessage, 2));
};


/** @param {?proto.ServerToGREMessage|undefined} value */
proto.AnyMessage.prototype.setServertogremessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.AnyMessage.oneofGroups_[0], value);
};


proto.AnyMessage.prototype.clearServertogremessage = function() {
  this.setServertogremessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyMessage.prototype.hasServertogremessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GREToServerMessage gREToServerMessage = 3;
 * @return {?proto.GREToServerMessage}
 */
proto.AnyMessage.prototype.getGretoservermessage = function() {
  return /** @type{?proto.GREToServerMessage} */ (
    jspb.Message.getWrapperField(this, proto.GREToServerMessage, 3));
};


/** @param {?proto.GREToServerMessage|undefined} value */
proto.AnyMessage.prototype.setGretoservermessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.AnyMessage.oneofGroups_[0], value);
};


proto.AnyMessage.prototype.clearGretoservermessage = function() {
  this.setGretoservermessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyMessage.prototype.hasGretoservermessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ClientToGREMessage clientToGREMessage = 4;
 * @return {?proto.ClientToGREMessage}
 */
proto.AnyMessage.prototype.getClienttogremessage = function() {
  return /** @type{?proto.ClientToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToGREMessage, 4));
};


/** @param {?proto.ClientToGREMessage|undefined} value */
proto.AnyMessage.prototype.setClienttogremessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.AnyMessage.oneofGroups_[0], value);
};


proto.AnyMessage.prototype.clearClienttogremessage = function() {
  this.setClienttogremessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyMessage.prototype.hasClienttogremessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GREToClientMessage gREToClientMessage = 5;
 * @return {?proto.GREToClientMessage}
 */
proto.AnyMessage.prototype.getGretoclientmessage = function() {
  return /** @type{?proto.GREToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.GREToClientMessage, 5));
};


/** @param {?proto.GREToClientMessage|undefined} value */
proto.AnyMessage.prototype.setGretoclientmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.AnyMessage.oneofGroups_[0], value);
};


proto.AnyMessage.prototype.clearGretoclientmessage = function() {
  this.setGretoclientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyMessage.prototype.hasGretoclientmessage = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnyServiceMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AnyServiceMessage.oneofGroups_);
};
goog.inherits(proto.AnyServiceMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnyServiceMessage.displayName = 'proto.AnyServiceMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AnyServiceMessage.oneofGroups_ = [[10,11,12,13]];

/**
 * @enum {number}
 */
proto.AnyServiceMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CLIENTTOMATCHSERVICEMESSAGE: 10,
  MATCHSERVICETOCLIENTMESSAGE: 11,
  CLIENTTOLOBBYMESSAGE: 12,
  LOBBYTOCLIENTMESSAGE: 13
};

/**
 * @return {proto.AnyServiceMessage.MessageCase}
 */
proto.AnyServiceMessage.prototype.getMessageCase = function() {
  return /** @type {proto.AnyServiceMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.AnyServiceMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnyServiceMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.AnyServiceMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnyServiceMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyServiceMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercontext: (f = msg.getUsercontext()) && proto.AnyServiceMessageTypesUserContext.toObject(includeInstance, f),
    clienttomatchservicemessage: (f = msg.getClienttomatchservicemessage()) && proto.ClientToMatchServiceMessage.toObject(includeInstance, f),
    matchservicetoclientmessage: (f = msg.getMatchservicetoclientmessage()) && proto.MatchServiceToClientMessage.toObject(includeInstance, f),
    clienttolobbymessage: (f = msg.getClienttolobbymessage()) && proto.ClientToLobbyMessage.toObject(includeInstance, f),
    lobbytoclientmessage: (f = msg.getLobbytoclientmessage()) && proto.LobbyToClientMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnyServiceMessage}
 */
proto.AnyServiceMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnyServiceMessage;
  return proto.AnyServiceMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnyServiceMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnyServiceMessage}
 */
proto.AnyServiceMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.AnyServiceMessageTypesUserContext;
      reader.readMessage(value,proto.AnyServiceMessageTypesUserContext.deserializeBinaryFromReader);
      msg.setUsercontext(value);
      break;
    case 10:
      var value = new proto.ClientToMatchServiceMessage;
      reader.readMessage(value,proto.ClientToMatchServiceMessage.deserializeBinaryFromReader);
      msg.setClienttomatchservicemessage(value);
      break;
    case 11:
      var value = new proto.MatchServiceToClientMessage;
      reader.readMessage(value,proto.MatchServiceToClientMessage.deserializeBinaryFromReader);
      msg.setMatchservicetoclientmessage(value);
      break;
    case 12:
      var value = new proto.ClientToLobbyMessage;
      reader.readMessage(value,proto.ClientToLobbyMessage.deserializeBinaryFromReader);
      msg.setClienttolobbymessage(value);
      break;
    case 13:
      var value = new proto.LobbyToClientMessage;
      reader.readMessage(value,proto.LobbyToClientMessage.deserializeBinaryFromReader);
      msg.setLobbytoclientmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnyServiceMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnyServiceMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnyServiceMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyServiceMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsercontext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AnyServiceMessageTypesUserContext.serializeBinaryToWriter
    );
  }
  f = message.getClienttomatchservicemessage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ClientToMatchServiceMessage.serializeBinaryToWriter
    );
  }
  f = message.getMatchservicetoclientmessage();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.MatchServiceToClientMessage.serializeBinaryToWriter
    );
  }
  f = message.getClienttolobbymessage();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ClientToLobbyMessage.serializeBinaryToWriter
    );
  }
  f = message.getLobbytoclientmessage();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.LobbyToClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional AnyServiceMessageTypesUserContext userContext = 2;
 * @return {?proto.AnyServiceMessageTypesUserContext}
 */
proto.AnyServiceMessage.prototype.getUsercontext = function() {
  return /** @type{?proto.AnyServiceMessageTypesUserContext} */ (
    jspb.Message.getWrapperField(this, proto.AnyServiceMessageTypesUserContext, 2));
};


/** @param {?proto.AnyServiceMessageTypesUserContext|undefined} value */
proto.AnyServiceMessage.prototype.setUsercontext = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.AnyServiceMessage.prototype.clearUsercontext = function() {
  this.setUsercontext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyServiceMessage.prototype.hasUsercontext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClientToMatchServiceMessage clientToMatchServiceMessage = 10;
 * @return {?proto.ClientToMatchServiceMessage}
 */
proto.AnyServiceMessage.prototype.getClienttomatchservicemessage = function() {
  return /** @type{?proto.ClientToMatchServiceMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToMatchServiceMessage, 10));
};


/** @param {?proto.ClientToMatchServiceMessage|undefined} value */
proto.AnyServiceMessage.prototype.setClienttomatchservicemessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.AnyServiceMessage.oneofGroups_[0], value);
};


proto.AnyServiceMessage.prototype.clearClienttomatchservicemessage = function() {
  this.setClienttomatchservicemessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyServiceMessage.prototype.hasClienttomatchservicemessage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MatchServiceToClientMessage matchServiceToClientMessage = 11;
 * @return {?proto.MatchServiceToClientMessage}
 */
proto.AnyServiceMessage.prototype.getMatchservicetoclientmessage = function() {
  return /** @type{?proto.MatchServiceToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.MatchServiceToClientMessage, 11));
};


/** @param {?proto.MatchServiceToClientMessage|undefined} value */
proto.AnyServiceMessage.prototype.setMatchservicetoclientmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.AnyServiceMessage.oneofGroups_[0], value);
};


proto.AnyServiceMessage.prototype.clearMatchservicetoclientmessage = function() {
  this.setMatchservicetoclientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyServiceMessage.prototype.hasMatchservicetoclientmessage = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ClientToLobbyMessage clientToLobbyMessage = 12;
 * @return {?proto.ClientToLobbyMessage}
 */
proto.AnyServiceMessage.prototype.getClienttolobbymessage = function() {
  return /** @type{?proto.ClientToLobbyMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToLobbyMessage, 12));
};


/** @param {?proto.ClientToLobbyMessage|undefined} value */
proto.AnyServiceMessage.prototype.setClienttolobbymessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.AnyServiceMessage.oneofGroups_[0], value);
};


proto.AnyServiceMessage.prototype.clearClienttolobbymessage = function() {
  this.setClienttolobbymessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyServiceMessage.prototype.hasClienttolobbymessage = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional LobbyToClientMessage lobbyToClientMessage = 13;
 * @return {?proto.LobbyToClientMessage}
 */
proto.AnyServiceMessage.prototype.getLobbytoclientmessage = function() {
  return /** @type{?proto.LobbyToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.LobbyToClientMessage, 13));
};


/** @param {?proto.LobbyToClientMessage|undefined} value */
proto.AnyServiceMessage.prototype.setLobbytoclientmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.AnyServiceMessage.oneofGroups_[0], value);
};


proto.AnyServiceMessage.prototype.clearLobbytoclientmessage = function() {
  this.setLobbytoclientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyServiceMessage.prototype.hasLobbytoclientmessage = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnyServiceMessageTypesRequestContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AnyServiceMessageTypesRequestContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnyServiceMessageTypesRequestContext.displayName = 'proto.AnyServiceMessageTypesRequestContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnyServiceMessageTypesRequestContext.prototype.toObject = function(opt_includeInstance) {
  return proto.AnyServiceMessageTypesRequestContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnyServiceMessageTypesRequestContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyServiceMessageTypesRequestContext.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnyServiceMessageTypesRequestContext}
 */
proto.AnyServiceMessageTypesRequestContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnyServiceMessageTypesRequestContext;
  return proto.AnyServiceMessageTypesRequestContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnyServiceMessageTypesRequestContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnyServiceMessageTypesRequestContext}
 */
proto.AnyServiceMessageTypesRequestContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnyServiceMessageTypesRequestContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnyServiceMessageTypesRequestContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnyServiceMessageTypesRequestContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyServiceMessageTypesRequestContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnyServiceMessageTypesUserContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AnyServiceMessageTypesUserContext.repeatedFields_, null);
};
goog.inherits(proto.AnyServiceMessageTypesUserContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnyServiceMessageTypesUserContext.displayName = 'proto.AnyServiceMessageTypesUserContext';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AnyServiceMessageTypesUserContext.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnyServiceMessageTypesUserContext.prototype.toObject = function(opt_includeInstance) {
  return proto.AnyServiceMessageTypesUserContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnyServiceMessageTypesUserContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyServiceMessageTypesUserContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userrolesList: jspb.Message.getRepeatedField(msg, 2),
    authenticationtype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnyServiceMessageTypesUserContext}
 */
proto.AnyServiceMessageTypesUserContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnyServiceMessageTypesUserContext;
  return proto.AnyServiceMessageTypesUserContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnyServiceMessageTypesUserContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnyServiceMessageTypesUserContext}
 */
proto.AnyServiceMessageTypesUserContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserroles(value);
      break;
    case 3:
      var value = /** @type {!proto.AuthenticationType} */ (reader.readEnum());
      msg.setAuthenticationtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnyServiceMessageTypesUserContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnyServiceMessageTypesUserContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnyServiceMessageTypesUserContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyServiceMessageTypesUserContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserrolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAuthenticationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.AnyServiceMessageTypesUserContext.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AnyServiceMessageTypesUserContext.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string userRoles = 2;
 * @return {!Array.<string>}
 */
proto.AnyServiceMessageTypesUserContext.prototype.getUserrolesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.AnyServiceMessageTypesUserContext.prototype.setUserrolesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.AnyServiceMessageTypesUserContext.prototype.addUserroles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.AnyServiceMessageTypesUserContext.prototype.clearUserrolesList = function() {
  this.setUserrolesList([]);
};


/**
 * optional AuthenticationType authenticationType = 3;
 * @return {!proto.AuthenticationType}
 */
proto.AnyServiceMessageTypesUserContext.prototype.getAuthenticationtype = function() {
  return /** @type {!proto.AuthenticationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.AuthenticationType} value */
proto.AnyServiceMessageTypesUserContext.prototype.setAuthenticationtype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnyToGREMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AnyToGREMessage.oneofGroups_);
};
goog.inherits(proto.AnyToGREMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnyToGREMessage.displayName = 'proto.AnyToGREMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AnyToGREMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.AnyToGREMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  SERVERTOGREMESSAGE: 2,
  CLIENTTOGREMESSAGE: 3
};

/**
 * @return {proto.AnyToGREMessage.MessageCase}
 */
proto.AnyToGREMessage.prototype.getMessageCase = function() {
  return /** @type {proto.AnyToGREMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.AnyToGREMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnyToGREMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.AnyToGREMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnyToGREMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyToGREMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    servertogremessage: (f = msg.getServertogremessage()) && proto.ServerToGREMessage.toObject(includeInstance, f),
    clienttogremessage: (f = msg.getClienttogremessage()) && proto.ClientToGREMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnyToGREMessage}
 */
proto.AnyToGREMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnyToGREMessage;
  return proto.AnyToGREMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnyToGREMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnyToGREMessage}
 */
proto.AnyToGREMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.ServerToGREMessage;
      reader.readMessage(value,proto.ServerToGREMessage.deserializeBinaryFromReader);
      msg.setServertogremessage(value);
      break;
    case 3:
      var value = new proto.ClientToGREMessage;
      reader.readMessage(value,proto.ClientToGREMessage.deserializeBinaryFromReader);
      msg.setClienttogremessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnyToGREMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnyToGREMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnyToGREMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyToGREMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getServertogremessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ServerToGREMessage.serializeBinaryToWriter
    );
  }
  f = message.getClienttogremessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ClientToGREMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.AnyToGREMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AnyToGREMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ServerToGREMessage serverToGREMessage = 2;
 * @return {?proto.ServerToGREMessage}
 */
proto.AnyToGREMessage.prototype.getServertogremessage = function() {
  return /** @type{?proto.ServerToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ServerToGREMessage, 2));
};


/** @param {?proto.ServerToGREMessage|undefined} value */
proto.AnyToGREMessage.prototype.setServertogremessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.AnyToGREMessage.oneofGroups_[0], value);
};


proto.AnyToGREMessage.prototype.clearServertogremessage = function() {
  this.setServertogremessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyToGREMessage.prototype.hasServertogremessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClientToGREMessage clientToGREMessage = 3;
 * @return {?proto.ClientToGREMessage}
 */
proto.AnyToGREMessage.prototype.getClienttogremessage = function() {
  return /** @type{?proto.ClientToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToGREMessage, 3));
};


/** @param {?proto.ClientToGREMessage|undefined} value */
proto.AnyToGREMessage.prototype.setClienttogremessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.AnyToGREMessage.oneofGroups_[0], value);
};


proto.AnyToGREMessage.prototype.clearClienttogremessage = function() {
  this.setClienttogremessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnyToGREMessage.prototype.hasClienttogremessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AssignDamageConfirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AssignDamageConfirmation.repeatedFields_, null);
};
goog.inherits(proto.AssignDamageConfirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AssignDamageConfirmation.displayName = 'proto.AssignDamageConfirmation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AssignDamageConfirmation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AssignDamageConfirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.AssignDamageConfirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AssignDamageConfirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssignDamageConfirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidassignmentsList: jspb.Message.toObjectList(msg.getInvalidassignmentsList(),
    proto.InvalidDamageAssignment.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AssignDamageConfirmation}
 */
proto.AssignDamageConfirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AssignDamageConfirmation;
  return proto.AssignDamageConfirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AssignDamageConfirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AssignDamageConfirmation}
 */
proto.AssignDamageConfirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.InvalidDamageAssignment;
      reader.readMessage(value,proto.InvalidDamageAssignment.deserializeBinaryFromReader);
      msg.addInvalidassignments(value);
      break;
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AssignDamageConfirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AssignDamageConfirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AssignDamageConfirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssignDamageConfirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvalidassignmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.InvalidDamageAssignment.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * repeated InvalidDamageAssignment invalidAssignments = 2;
 * @return {!Array.<!proto.InvalidDamageAssignment>}
 */
proto.AssignDamageConfirmation.prototype.getInvalidassignmentsList = function() {
  return /** @type{!Array.<!proto.InvalidDamageAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InvalidDamageAssignment, 2));
};


/** @param {!Array.<!proto.InvalidDamageAssignment>} value */
proto.AssignDamageConfirmation.prototype.setInvalidassignmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.InvalidDamageAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InvalidDamageAssignment}
 */
proto.AssignDamageConfirmation.prototype.addInvalidassignments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.InvalidDamageAssignment, opt_index);
};


proto.AssignDamageConfirmation.prototype.clearInvalidassignmentsList = function() {
  this.setInvalidassignmentsList([]);
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.AssignDamageConfirmation.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.AssignDamageConfirmation.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AssignDamageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AssignDamageReq.repeatedFields_, null);
};
goog.inherits(proto.AssignDamageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AssignDamageReq.displayName = 'proto.AssignDamageReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AssignDamageReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AssignDamageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.AssignDamageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AssignDamageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssignDamageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    damageassignersList: jspb.Message.toObjectList(msg.getDamageassignersList(),
    proto.DamageAssigner.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AssignDamageReq}
 */
proto.AssignDamageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AssignDamageReq;
  return proto.AssignDamageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AssignDamageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AssignDamageReq}
 */
proto.AssignDamageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DamageAssigner;
      reader.readMessage(value,proto.DamageAssigner.deserializeBinaryFromReader);
      msg.addDamageassigners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AssignDamageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AssignDamageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AssignDamageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssignDamageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDamageassignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DamageAssigner.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DamageAssigner damageAssigners = 1;
 * @return {!Array.<!proto.DamageAssigner>}
 */
proto.AssignDamageReq.prototype.getDamageassignersList = function() {
  return /** @type{!Array.<!proto.DamageAssigner>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DamageAssigner, 1));
};


/** @param {!Array.<!proto.DamageAssigner>} value */
proto.AssignDamageReq.prototype.setDamageassignersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DamageAssigner=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DamageAssigner}
 */
proto.AssignDamageReq.prototype.addDamageassigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DamageAssigner, opt_index);
};


proto.AssignDamageReq.prototype.clearDamageassignersList = function() {
  this.setDamageassignersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AssignDamageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AssignDamageResp.repeatedFields_, null);
};
goog.inherits(proto.AssignDamageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AssignDamageResp.displayName = 'proto.AssignDamageResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AssignDamageResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AssignDamageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.AssignDamageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AssignDamageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssignDamageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignersList: jspb.Message.toObjectList(msg.getAssignersList(),
    proto.DamageAssigner.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AssignDamageResp}
 */
proto.AssignDamageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AssignDamageResp;
  return proto.AssignDamageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AssignDamageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AssignDamageResp}
 */
proto.AssignDamageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DamageAssigner;
      reader.readMessage(value,proto.DamageAssigner.deserializeBinaryFromReader);
      msg.addAssigners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AssignDamageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AssignDamageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AssignDamageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssignDamageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DamageAssigner.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DamageAssigner assigners = 1;
 * @return {!Array.<!proto.DamageAssigner>}
 */
proto.AssignDamageResp.prototype.getAssignersList = function() {
  return /** @type{!Array.<!proto.DamageAssigner>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DamageAssigner, 1));
};


/** @param {!Array.<!proto.DamageAssigner>} value */
proto.AssignDamageResp.prototype.setAssignersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DamageAssigner=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DamageAssigner}
 */
proto.AssignDamageResp.prototype.addAssigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DamageAssigner, opt_index);
};


proto.AssignDamageResp.prototype.clearAssignersList = function() {
  this.setAssignersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AttackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AttackInfo.repeatedFields_, null);
};
goog.inherits(proto.AttackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AttackInfo.displayName = 'proto.AttackInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AttackInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AttackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AttackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AttackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderedblockersList: jspb.Message.toObjectList(msg.getOrderedblockersList(),
    proto.OrderedDamageAssignment.toObject, includeInstance),
    targetid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    damageordered: jspb.Message.getFieldWithDefault(msg, 2, false),
    damageassigned: jspb.Message.getFieldWithDefault(msg, 3, false),
    alternativegrpid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AttackInfo}
 */
proto.AttackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AttackInfo;
  return proto.AttackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AttackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AttackInfo}
 */
proto.AttackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.OrderedDamageAssignment;
      reader.readMessage(value,proto.OrderedDamageAssignment.deserializeBinaryFromReader);
      msg.addOrderedblockers(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDamageordered(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDamageassigned(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAlternativegrpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AttackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AttackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AttackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderedblockersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.OrderedDamageAssignment.serializeBinaryToWriter
    );
  }
  f = message.getTargetid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDamageordered();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDamageassigned();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAlternativegrpid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated OrderedDamageAssignment orderedBlockers = 4;
 * @return {!Array.<!proto.OrderedDamageAssignment>}
 */
proto.AttackInfo.prototype.getOrderedblockersList = function() {
  return /** @type{!Array.<!proto.OrderedDamageAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderedDamageAssignment, 4));
};


/** @param {!Array.<!proto.OrderedDamageAssignment>} value */
proto.AttackInfo.prototype.setOrderedblockersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.OrderedDamageAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderedDamageAssignment}
 */
proto.AttackInfo.prototype.addOrderedblockers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.OrderedDamageAssignment, opt_index);
};


proto.AttackInfo.prototype.clearOrderedblockersList = function() {
  this.setOrderedblockersList([]);
};


/**
 * optional uint32 targetId = 1;
 * @return {number}
 */
proto.AttackInfo.prototype.getTargetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AttackInfo.prototype.setTargetid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool damageOrdered = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AttackInfo.prototype.getDamageordered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.AttackInfo.prototype.setDamageordered = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool damageAssigned = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AttackInfo.prototype.getDamageassigned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.AttackInfo.prototype.setDamageassigned = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 alternativeGrpId = 5;
 * @return {number}
 */
proto.AttackInfo.prototype.getAlternativegrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.AttackInfo.prototype.setAlternativegrpid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AttackWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AttackWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AttackWarning.displayName = 'proto.AttackWarning';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AttackWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.AttackWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AttackWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttackWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    warningpromptid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AttackWarning}
 */
proto.AttackWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AttackWarning;
  return proto.AttackWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AttackWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AttackWarning}
 */
proto.AttackWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {!proto.AttackWarningType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWarningpromptid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AttackWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AttackWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AttackWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttackWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWarningpromptid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.AttackWarning.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AttackWarning.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional AttackWarningType type = 2;
 * @return {!proto.AttackWarningType}
 */
proto.AttackWarning.prototype.getType = function() {
  return /** @type {!proto.AttackWarningType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.AttackWarningType} value */
proto.AttackWarning.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 warningPromptId = 3;
 * @return {number}
 */
proto.AttackWarning.prototype.getWarningpromptid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AttackWarning.prototype.setWarningpromptid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Attacker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Attacker.repeatedFields_, null);
};
goog.inherits(proto.Attacker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Attacker.displayName = 'proto.Attacker';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Attacker.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Attacker.prototype.toObject = function(opt_includeInstance) {
  return proto.Attacker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Attacker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attacker.toObject = function(includeInstance, msg) {
  var f, obj = {
    legaldamagerecipientsList: jspb.Message.toObjectList(msg.getLegaldamagerecipientsList(),
    proto.DamageRecipient.toObject, includeInstance),
    attackerinstanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    selecteddamagerecipient: (f = msg.getSelecteddamagerecipient()) && proto.DamageRecipient.toObject(includeInstance, f),
    alternativegrpid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    autoattacked: jspb.Message.getFieldWithDefault(msg, 5, false),
    mustattack: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Attacker}
 */
proto.Attacker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Attacker;
  return proto.Attacker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Attacker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Attacker}
 */
proto.Attacker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.DamageRecipient;
      reader.readMessage(value,proto.DamageRecipient.deserializeBinaryFromReader);
      msg.addLegaldamagerecipients(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackerinstanceid(value);
      break;
    case 3:
      var value = new proto.DamageRecipient;
      reader.readMessage(value,proto.DamageRecipient.deserializeBinaryFromReader);
      msg.setSelecteddamagerecipient(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAlternativegrpid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoattacked(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMustattack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Attacker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Attacker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Attacker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attacker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLegaldamagerecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.DamageRecipient.serializeBinaryToWriter
    );
  }
  f = message.getAttackerinstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSelecteddamagerecipient();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DamageRecipient.serializeBinaryToWriter
    );
  }
  f = message.getAlternativegrpid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAutoattacked();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMustattack();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * repeated DamageRecipient legalDamageRecipients = 2;
 * @return {!Array.<!proto.DamageRecipient>}
 */
proto.Attacker.prototype.getLegaldamagerecipientsList = function() {
  return /** @type{!Array.<!proto.DamageRecipient>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DamageRecipient, 2));
};


/** @param {!Array.<!proto.DamageRecipient>} value */
proto.Attacker.prototype.setLegaldamagerecipientsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.DamageRecipient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DamageRecipient}
 */
proto.Attacker.prototype.addLegaldamagerecipients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.DamageRecipient, opt_index);
};


proto.Attacker.prototype.clearLegaldamagerecipientsList = function() {
  this.setLegaldamagerecipientsList([]);
};


/**
 * optional uint32 attackerInstanceId = 1;
 * @return {number}
 */
proto.Attacker.prototype.getAttackerinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Attacker.prototype.setAttackerinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional DamageRecipient selectedDamageRecipient = 3;
 * @return {?proto.DamageRecipient}
 */
proto.Attacker.prototype.getSelecteddamagerecipient = function() {
  return /** @type{?proto.DamageRecipient} */ (
    jspb.Message.getWrapperField(this, proto.DamageRecipient, 3));
};


/** @param {?proto.DamageRecipient|undefined} value */
proto.Attacker.prototype.setSelecteddamagerecipient = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Attacker.prototype.clearSelecteddamagerecipient = function() {
  this.setSelecteddamagerecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Attacker.prototype.hasSelecteddamagerecipient = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 alternativeGrpId = 4;
 * @return {number}
 */
proto.Attacker.prototype.getAlternativegrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Attacker.prototype.setAlternativegrpid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool autoAttacked = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Attacker.prototype.getAutoattacked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Attacker.prototype.setAutoattacked = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool mustAttack = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Attacker.prototype.getMustattack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Attacker.prototype.setMustattack = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthenticateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthenticateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AuthenticateRequest.displayName = 'proto.AuthenticateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthenticateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthenticateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthenticateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthenticateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientauthtoken: msg.getClientauthtoken_asB64(),
    playername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    playfabsessionticket: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clientinfo: (f = msg.getClientinfo()) && proto.ClientInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthenticateRequest}
 */
proto.AuthenticateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthenticateRequest;
  return proto.AuthenticateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthenticateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthenticateRequest}
 */
proto.AuthenticateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientauthtoken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayfabsessionticket(value);
      break;
    case 10:
      var value = new proto.ClientInfo;
      reader.readMessage(value,proto.ClientInfo.deserializeBinaryFromReader);
      msg.setClientinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthenticateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthenticateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthenticateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthenticateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientauthtoken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayfabsessionticket();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClientinfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ClientInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.AuthenticateRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AuthenticateRequest.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes clientAuthToken = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AuthenticateRequest.prototype.getClientauthtoken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes clientAuthToken = 2;
 * This is a type-conversion wrapper around `getClientauthtoken()`
 * @return {string}
 */
proto.AuthenticateRequest.prototype.getClientauthtoken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientauthtoken()));
};


/**
 * optional bytes clientAuthToken = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientauthtoken()`
 * @return {!Uint8Array}
 */
proto.AuthenticateRequest.prototype.getClientauthtoken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientauthtoken()));
};


/** @param {!(string|Uint8Array)} value */
proto.AuthenticateRequest.prototype.setClientauthtoken = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string playerName = 3;
 * @return {string}
 */
proto.AuthenticateRequest.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.AuthenticateRequest.prototype.setPlayername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string playFabSessionTicket = 4;
 * @return {string}
 */
proto.AuthenticateRequest.prototype.getPlayfabsessionticket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.AuthenticateRequest.prototype.setPlayfabsessionticket = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ClientInfo clientInfo = 10;
 * @return {?proto.ClientInfo}
 */
proto.AuthenticateRequest.prototype.getClientinfo = function() {
  return /** @type{?proto.ClientInfo} */ (
    jspb.Message.getWrapperField(this, proto.ClientInfo, 10));
};


/** @param {?proto.ClientInfo|undefined} value */
proto.AuthenticateRequest.prototype.setClientinfo = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.AuthenticateRequest.prototype.clearClientinfo = function() {
  this.setClientinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AuthenticateRequest.prototype.hasClientinfo = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthenticateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthenticateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AuthenticateResponse.displayName = 'proto.AuthenticateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthenticateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthenticateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthenticateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthenticateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    screenname: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthenticateResponse}
 */
proto.AuthenticateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthenticateResponse;
  return proto.AuthenticateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthenticateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthenticateResponse}
 */
proto.AuthenticateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setScreenname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthenticateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthenticateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthenticateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthenticateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScreenname();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.AuthenticateResponse.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AuthenticateResponse.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sessionId = 2;
 * @return {string}
 */
proto.AuthenticateResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AuthenticateResponse.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string screenName = 10;
 * @return {string}
 */
proto.AuthenticateResponse.prototype.getScreenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.AuthenticateResponse.prototype.setScreenname = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AutoAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AutoAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AutoAnswer.displayName = 'proto.AutoAnswer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AutoAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.AutoAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AutoAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    promptgrpid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cardtitleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appliesto: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AutoAnswer}
 */
proto.AutoAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AutoAnswer;
  return proto.AutoAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AutoAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AutoAnswer}
 */
proto.AutoAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPromptgrpid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCardtitleid(value);
      break;
    case 4:
      var value = /** @type {!proto.SettingScope} */ (reader.readEnum());
      msg.setAppliesto(value);
      break;
    case 5:
      var value = /** @type {!proto.SettingStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {!proto.Answer} */ (reader.readEnum());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AutoAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AutoAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AutoAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromptgrpid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCardtitleid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAppliesto();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAnswer();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional uint32 promptGrpId = 1;
 * @return {number}
 */
proto.AutoAnswer.prototype.getPromptgrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AutoAnswer.prototype.setPromptgrpid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 abilityGrpId = 2;
 * @return {number}
 */
proto.AutoAnswer.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AutoAnswer.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 cardTitleId = 3;
 * @return {number}
 */
proto.AutoAnswer.prototype.getCardtitleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AutoAnswer.prototype.setCardtitleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional SettingScope appliesTo = 4;
 * @return {!proto.SettingScope}
 */
proto.AutoAnswer.prototype.getAppliesto = function() {
  return /** @type {!proto.SettingScope} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SettingScope} value */
proto.AutoAnswer.prototype.setAppliesto = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional SettingStatus status = 5;
 * @return {!proto.SettingStatus}
 */
proto.AutoAnswer.prototype.getStatus = function() {
  return /** @type {!proto.SettingStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.SettingStatus} value */
proto.AutoAnswer.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Answer answer = 6;
 * @return {!proto.Answer}
 */
proto.AutoAnswer.prototype.getAnswer = function() {
  return /** @type {!proto.Answer} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.Answer} value */
proto.AutoAnswer.prototype.setAnswer = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AutoTapAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AutoTapAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AutoTapAction.displayName = 'proto.AutoTapAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AutoTapAction.prototype.toObject = function(opt_includeInstance) {
  return proto.AutoTapAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AutoTapAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoTapAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    manaid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    manapaymentoption: (f = msg.getManapaymentoption()) && proto.ManaPaymentOption.toObject(includeInstance, f),
    costcategory: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AutoTapAction}
 */
proto.AutoTapAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AutoTapAction;
  return proto.AutoTapAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AutoTapAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AutoTapAction}
 */
proto.AutoTapAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setManaid(value);
      break;
    case 4:
      var value = new proto.ManaPaymentOption;
      reader.readMessage(value,proto.ManaPaymentOption.deserializeBinaryFromReader);
      msg.setManapaymentoption(value);
      break;
    case 5:
      var value = /** @type {!proto.CostCategory} */ (reader.readEnum());
      msg.setCostcategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AutoTapAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AutoTapAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AutoTapAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoTapAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getManaid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getManapaymentoption();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ManaPaymentOption.serializeBinaryToWriter
    );
  }
  f = message.getCostcategory();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.AutoTapAction.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AutoTapAction.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 abilityGrpId = 2;
 * @return {number}
 */
proto.AutoTapAction.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AutoTapAction.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 manaId = 3;
 * @return {number}
 */
proto.AutoTapAction.prototype.getManaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AutoTapAction.prototype.setManaid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ManaPaymentOption manaPaymentOption = 4;
 * @return {?proto.ManaPaymentOption}
 */
proto.AutoTapAction.prototype.getManapaymentoption = function() {
  return /** @type{?proto.ManaPaymentOption} */ (
    jspb.Message.getWrapperField(this, proto.ManaPaymentOption, 4));
};


/** @param {?proto.ManaPaymentOption|undefined} value */
proto.AutoTapAction.prototype.setManapaymentoption = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.AutoTapAction.prototype.clearManapaymentoption = function() {
  this.setManapaymentoption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AutoTapAction.prototype.hasManapaymentoption = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CostCategory costCategory = 5;
 * @return {!proto.CostCategory}
 */
proto.AutoTapAction.prototype.getCostcategory = function() {
  return /** @type {!proto.CostCategory} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.CostCategory} value */
proto.AutoTapAction.prototype.setCostcategory = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AutoYield = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AutoYield, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AutoYield.displayName = 'proto.AutoYield';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AutoYield.prototype.toObject = function(opt_includeInstance) {
  return proto.AutoYield.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AutoYield} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoYield.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardtitleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    appliesto: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AutoYield}
 */
proto.AutoYield.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AutoYield;
  return proto.AutoYield.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AutoYield} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AutoYield}
 */
proto.AutoYield.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCardtitleid(value);
      break;
    case 3:
      var value = /** @type {!proto.SettingScope} */ (reader.readEnum());
      msg.setAppliesto(value);
      break;
    case 4:
      var value = /** @type {!proto.SettingStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AutoYield.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AutoYield.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AutoYield} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoYield.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCardtitleid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAppliesto();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint32 abilityGrpId = 1;
 * @return {number}
 */
proto.AutoYield.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AutoYield.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 cardTitleId = 2;
 * @return {number}
 */
proto.AutoYield.prototype.getCardtitleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AutoYield.prototype.setCardtitleid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SettingScope appliesTo = 3;
 * @return {!proto.SettingScope}
 */
proto.AutoYield.prototype.getAppliesto = function() {
  return /** @type {!proto.SettingScope} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SettingScope} value */
proto.AutoYield.prototype.setAppliesto = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SettingStatus status = 4;
 * @return {!proto.SettingStatus}
 */
proto.AutoYield.prototype.getStatus = function() {
  return /** @type {!proto.SettingStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SettingStatus} value */
proto.AutoYield.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BehaviorTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BehaviorTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BehaviorTree.displayName = 'proto.BehaviorTree';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BehaviorTree.prototype.toObject = function(opt_includeInstance) {
  return proto.BehaviorTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BehaviorTree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BehaviorTree.toObject = function(includeInstance, msg) {
  var f, obj = {
    root: (f = msg.getRoot()) && proto.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BehaviorTree}
 */
proto.BehaviorTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BehaviorTree;
  return proto.BehaviorTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BehaviorTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BehaviorTree}
 */
proto.BehaviorTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BehaviorTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BehaviorTree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BehaviorTree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BehaviorTree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node root = 1;
 * @return {?proto.Node}
 */
proto.BehaviorTree.prototype.getRoot = function() {
  return /** @type{?proto.Node} */ (
    jspb.Message.getWrapperField(this, proto.Node, 1));
};


/** @param {?proto.Node|undefined} value */
proto.BehaviorTree.prototype.setRoot = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.BehaviorTree.prototype.clearRoot = function() {
  this.setRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BehaviorTree.prototype.hasRoot = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BinaryGameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BinaryGameState.repeatedFields_, null);
};
goog.inherits(proto.BinaryGameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BinaryGameState.displayName = 'proto.BinaryGameState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BinaryGameState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BinaryGameState.prototype.toObject = function(opt_includeInstance) {
  return proto.BinaryGameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BinaryGameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BinaryGameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    instancedata: msg.getInstancedata_asB64(),
    clientactionsList: jspb.Message.toObjectList(msg.getClientactionsList(),
    proto.ClientToGREMessage.toObject, includeInstance),
    internalgredata: msg.getInternalgredata_asB64(),
    gamestatemsg: (f = msg.getGamestatemsg()) && proto.GameStateMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BinaryGameState}
 */
proto.BinaryGameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BinaryGameState;
  return proto.BinaryGameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BinaryGameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BinaryGameState}
 */
proto.BinaryGameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInstancedata(value);
      break;
    case 3:
      var value = new proto.ClientToGREMessage;
      reader.readMessage(value,proto.ClientToGREMessage.deserializeBinaryFromReader);
      msg.addClientactions(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInternalgredata(value);
      break;
    case 1:
      var value = new proto.GameStateMessage;
      reader.readMessage(value,proto.GameStateMessage.deserializeBinaryFromReader);
      msg.setGamestatemsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BinaryGameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BinaryGameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BinaryGameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BinaryGameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstancedata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getClientactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ClientToGREMessage.serializeBinaryToWriter
    );
  }
  f = message.getInternalgredata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGamestatemsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GameStateMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes instanceData = 2;
 * @return {!(string|Uint8Array)}
 */
proto.BinaryGameState.prototype.getInstancedata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes instanceData = 2;
 * This is a type-conversion wrapper around `getInstancedata()`
 * @return {string}
 */
proto.BinaryGameState.prototype.getInstancedata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInstancedata()));
};


/**
 * optional bytes instanceData = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstancedata()`
 * @return {!Uint8Array}
 */
proto.BinaryGameState.prototype.getInstancedata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInstancedata()));
};


/** @param {!(string|Uint8Array)} value */
proto.BinaryGameState.prototype.setInstancedata = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated ClientToGREMessage clientActions = 3;
 * @return {!Array.<!proto.ClientToGREMessage>}
 */
proto.BinaryGameState.prototype.getClientactionsList = function() {
  return /** @type{!Array.<!proto.ClientToGREMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ClientToGREMessage, 3));
};


/** @param {!Array.<!proto.ClientToGREMessage>} value */
proto.BinaryGameState.prototype.setClientactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ClientToGREMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientToGREMessage}
 */
proto.BinaryGameState.prototype.addClientactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ClientToGREMessage, opt_index);
};


proto.BinaryGameState.prototype.clearClientactionsList = function() {
  this.setClientactionsList([]);
};


/**
 * optional bytes internalGREData = 4;
 * @return {!(string|Uint8Array)}
 */
proto.BinaryGameState.prototype.getInternalgredata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes internalGREData = 4;
 * This is a type-conversion wrapper around `getInternalgredata()`
 * @return {string}
 */
proto.BinaryGameState.prototype.getInternalgredata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInternalgredata()));
};


/**
 * optional bytes internalGREData = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInternalgredata()`
 * @return {!Uint8Array}
 */
proto.BinaryGameState.prototype.getInternalgredata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInternalgredata()));
};


/** @param {!(string|Uint8Array)} value */
proto.BinaryGameState.prototype.setInternalgredata = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional GameStateMessage gameStateMsg = 1;
 * @return {?proto.GameStateMessage}
 */
proto.BinaryGameState.prototype.getGamestatemsg = function() {
  return /** @type{?proto.GameStateMessage} */ (
    jspb.Message.getWrapperField(this, proto.GameStateMessage, 1));
};


/** @param {?proto.GameStateMessage|undefined} value */
proto.BinaryGameState.prototype.setGamestatemsg = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.BinaryGameState.prototype.clearGamestatemsg = function() {
  this.setGamestatemsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BinaryGameState.prototype.hasGamestatemsg = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockInfo.displayName = 'proto.BlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlockInfo.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    attackeridsList: jspb.Message.getRepeatedField(msg, 1),
    orderedattackersList: jspb.Message.toObjectList(msg.getOrderedattackersList(),
    proto.OrderedDamageAssignment.toObject, includeInstance),
    damageordered: jspb.Message.getFieldWithDefault(msg, 2, false),
    damageassigned: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockInfo}
 */
proto.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockInfo;
  return proto.BlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockInfo}
 */
proto.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAttackeridsList(value);
      break;
    case 4:
      var value = new proto.OrderedDamageAssignment;
      reader.readMessage(value,proto.OrderedDamageAssignment.deserializeBinaryFromReader);
      msg.addOrderedattackers(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDamageordered(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDamageassigned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttackeridsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getOrderedattackersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.OrderedDamageAssignment.serializeBinaryToWriter
    );
  }
  f = message.getDamageordered();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDamageassigned();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated uint32 attackerIds = 1;
 * @return {!Array.<number>}
 */
proto.BlockInfo.prototype.getAttackeridsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.BlockInfo.prototype.setAttackeridsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BlockInfo.prototype.addAttackerids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BlockInfo.prototype.clearAttackeridsList = function() {
  this.setAttackeridsList([]);
};


/**
 * repeated OrderedDamageAssignment orderedAttackers = 4;
 * @return {!Array.<!proto.OrderedDamageAssignment>}
 */
proto.BlockInfo.prototype.getOrderedattackersList = function() {
  return /** @type{!Array.<!proto.OrderedDamageAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderedDamageAssignment, 4));
};


/** @param {!Array.<!proto.OrderedDamageAssignment>} value */
proto.BlockInfo.prototype.setOrderedattackersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.OrderedDamageAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderedDamageAssignment}
 */
proto.BlockInfo.prototype.addOrderedattackers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.OrderedDamageAssignment, opt_index);
};


proto.BlockInfo.prototype.clearOrderedattackersList = function() {
  this.setOrderedattackersList([]);
};


/**
 * optional bool damageOrdered = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BlockInfo.prototype.getDamageordered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.BlockInfo.prototype.setDamageordered = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool damageAssigned = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BlockInfo.prototype.getDamageassigned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.BlockInfo.prototype.setDamageassigned = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockWarning.displayName = 'proto.BlockWarning';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    warningpromptid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockWarning}
 */
proto.BlockWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockWarning;
  return proto.BlockWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockWarning}
 */
proto.BlockWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {!proto.BlockWarningType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWarningpromptid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWarningpromptid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.BlockWarning.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BlockWarning.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BlockWarningType type = 2;
 * @return {!proto.BlockWarningType}
 */
proto.BlockWarning.prototype.getType = function() {
  return /** @type {!proto.BlockWarningType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.BlockWarningType} value */
proto.BlockWarning.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 warningPromptId = 3;
 * @return {number}
 */
proto.BlockWarning.prototype.getWarningpromptid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BlockWarning.prototype.setWarningpromptid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Blocker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Blocker.repeatedFields_, null);
};
goog.inherits(proto.Blocker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Blocker.displayName = 'proto.Blocker';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Blocker.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Blocker.prototype.toObject = function(opt_includeInstance) {
  return proto.Blocker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Blocker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Blocker.toObject = function(includeInstance, msg) {
  var f, obj = {
    attackerinstanceidsList: jspb.Message.getRepeatedField(msg, 2),
    selectedattackerinstanceidsList: jspb.Message.getRepeatedField(msg, 3),
    blockerinstanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minattackers: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxattackers: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mustblock: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Blocker}
 */
proto.Blocker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Blocker;
  return proto.Blocker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Blocker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Blocker}
 */
proto.Blocker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAttackerinstanceidsList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSelectedattackerinstanceidsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockerinstanceid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinattackers(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxattackers(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMustblock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Blocker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Blocker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Blocker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Blocker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttackerinstanceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getSelectedattackerinstanceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getBlockerinstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinattackers();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxattackers();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMustblock();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * repeated uint32 attackerInstanceIds = 2;
 * @return {!Array.<number>}
 */
proto.Blocker.prototype.getAttackerinstanceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.Blocker.prototype.setAttackerinstanceidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Blocker.prototype.addAttackerinstanceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.Blocker.prototype.clearAttackerinstanceidsList = function() {
  this.setAttackerinstanceidsList([]);
};


/**
 * repeated uint32 selectedAttackerInstanceIds = 3;
 * @return {!Array.<number>}
 */
proto.Blocker.prototype.getSelectedattackerinstanceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.Blocker.prototype.setSelectedattackerinstanceidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Blocker.prototype.addSelectedattackerinstanceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Blocker.prototype.clearSelectedattackerinstanceidsList = function() {
  this.setSelectedattackerinstanceidsList([]);
};


/**
 * optional uint32 blockerInstanceId = 1;
 * @return {number}
 */
proto.Blocker.prototype.getBlockerinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Blocker.prototype.setBlockerinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minAttackers = 4;
 * @return {number}
 */
proto.Blocker.prototype.getMinattackers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Blocker.prototype.setMinattackers = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 maxAttackers = 5;
 * @return {number}
 */
proto.Blocker.prototype.getMaxattackers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Blocker.prototype.setMaxattackers = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool mustBlock = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Blocker.prototype.getMustblock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Blocker.prototype.setMustblock = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CLIPSConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CLIPSConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CLIPSConfiguration.displayName = 'proto.CLIPSConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CLIPSConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.CLIPSConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CLIPSConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPSConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    initfile: jspb.Message.getFieldWithDefault(msg, 4, ""),
    metricsfile: jspb.Message.getFieldWithDefault(msg, 7, ""),
    logfile: jspb.Message.getFieldWithDefault(msg, 8, ""),
    enablewatch: jspb.Message.getFieldWithDefault(msg, 1, false),
    enablemetrics: jspb.Message.getFieldWithDefault(msg, 2, false),
    enablelogging: jspb.Message.getFieldWithDefault(msg, 3, false),
    maxfiringlimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    warningfiringlimit: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CLIPSConfiguration}
 */
proto.CLIPSConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CLIPSConfiguration;
  return proto.CLIPSConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CLIPSConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CLIPSConfiguration}
 */
proto.CLIPSConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitfile(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetricsfile(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogfile(value);
      break;
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablewatch(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablemetrics(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablelogging(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxfiringlimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWarningfiringlimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CLIPSConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CLIPSConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CLIPSConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPSConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitfile();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMetricsfile();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLogfile();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEnablewatch();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEnablemetrics();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEnablelogging();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMaxfiringlimit();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWarningfiringlimit();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string initFile = 4;
 * @return {string}
 */
proto.CLIPSConfiguration.prototype.getInitfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CLIPSConfiguration.prototype.setInitfile = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string metricsFile = 7;
 * @return {string}
 */
proto.CLIPSConfiguration.prototype.getMetricsfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.CLIPSConfiguration.prototype.setMetricsfile = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string logFile = 8;
 * @return {string}
 */
proto.CLIPSConfiguration.prototype.getLogfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.CLIPSConfiguration.prototype.setLogfile = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool enableWatch = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CLIPSConfiguration.prototype.getEnablewatch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.CLIPSConfiguration.prototype.setEnablewatch = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool enableMetrics = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CLIPSConfiguration.prototype.getEnablemetrics = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.CLIPSConfiguration.prototype.setEnablemetrics = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool enableLogging = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CLIPSConfiguration.prototype.getEnablelogging = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.CLIPSConfiguration.prototype.setEnablelogging = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 maxFiringLimit = 5;
 * @return {number}
 */
proto.CLIPSConfiguration.prototype.getMaxfiringlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CLIPSConfiguration.prototype.setMaxfiringlimit = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 warningFiringLimit = 6;
 * @return {number}
 */
proto.CLIPSConfiguration.prototype.getWarningfiringlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.CLIPSConfiguration.prototype.setWarningfiringlimit = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CancelActionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CancelActionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CancelActionReq.displayName = 'proto.CancelActionReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CancelActionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CancelActionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CancelActionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CancelActionReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CancelActionReq}
 */
proto.CancelActionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CancelActionReq;
  return proto.CancelActionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CancelActionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CancelActionReq}
 */
proto.CancelActionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CancelActionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CancelActionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CancelActionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CancelActionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CastingTimeOptionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CastingTimeOptionReq.repeatedFields_, null);
};
goog.inherits(proto.CastingTimeOptionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CastingTimeOptionReq.displayName = 'proto.CastingTimeOptionReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CastingTimeOptionReq.repeatedFields_ = [13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CastingTimeOptionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CastingTimeOptionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CastingTimeOptionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    manacostList: jspb.Message.toObjectList(msg.getManacostList(),
    proto.ManaRequirement.toObject, includeInstance),
    autotapactionsList: jspb.Message.toObjectList(msg.getAutotapactionsList(),
    proto.AutoTapAction.toObject, includeInstance),
    ctoid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    castingtimeoptiontype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    affectedid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    affectorid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    grpid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    playeridtoprompt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isrequired: jspb.Message.getFieldWithDefault(msg, 7, false),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f),
    numericinputreq: (f = msg.getNumericinputreq()) && proto.NumericInputReq.toObject(includeInstance, f),
    selectmanatypereq: (f = msg.getSelectmanatypereq()) && proto.SelectManaTypeReq.toObject(includeInstance, f),
    modalreq: (f = msg.getModalreq()) && proto.ModalReq.toObject(includeInstance, f),
    selectnreq: (f = msg.getSelectnreq()) && proto.SelectNReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CastingTimeOptionReq}
 */
proto.CastingTimeOptionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CastingTimeOptionReq;
  return proto.CastingTimeOptionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CastingTimeOptionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CastingTimeOptionReq}
 */
proto.CastingTimeOptionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 13:
      var value = new proto.ManaRequirement;
      reader.readMessage(value,proto.ManaRequirement.deserializeBinaryFromReader);
      msg.addManacost(value);
      break;
    case 14:
      var value = new proto.AutoTapAction;
      reader.readMessage(value,proto.AutoTapAction.deserializeBinaryFromReader);
      msg.addAutotapactions(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCtoid(value);
      break;
    case 2:
      var value = /** @type {!proto.CastingTimeOptionType} */ (reader.readEnum());
      msg.setCastingtimeoptiontype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAffectedid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAffectorid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrpid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayeridtoprompt(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsrequired(value);
      break;
    case 8:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    case 9:
      var value = new proto.NumericInputReq;
      reader.readMessage(value,proto.NumericInputReq.deserializeBinaryFromReader);
      msg.setNumericinputreq(value);
      break;
    case 10:
      var value = new proto.SelectManaTypeReq;
      reader.readMessage(value,proto.SelectManaTypeReq.deserializeBinaryFromReader);
      msg.setSelectmanatypereq(value);
      break;
    case 11:
      var value = new proto.ModalReq;
      reader.readMessage(value,proto.ModalReq.deserializeBinaryFromReader);
      msg.setModalreq(value);
      break;
    case 12:
      var value = new proto.SelectNReq;
      reader.readMessage(value,proto.SelectNReq.deserializeBinaryFromReader);
      msg.setSelectnreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CastingTimeOptionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CastingTimeOptionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CastingTimeOptionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getManacostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.ManaRequirement.serializeBinaryToWriter
    );
  }
  f = message.getAutotapactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.AutoTapAction.serializeBinaryToWriter
    );
  }
  f = message.getCtoid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCastingtimeoptiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAffectedid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAffectorid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getGrpid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPlayeridtoprompt();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getIsrequired();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getNumericinputreq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.NumericInputReq.serializeBinaryToWriter
    );
  }
  f = message.getSelectmanatypereq();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.SelectManaTypeReq.serializeBinaryToWriter
    );
  }
  f = message.getModalreq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ModalReq.serializeBinaryToWriter
    );
  }
  f = message.getSelectnreq();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.SelectNReq.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ManaRequirement manaCost = 13;
 * @return {!Array.<!proto.ManaRequirement>}
 */
proto.CastingTimeOptionReq.prototype.getManacostList = function() {
  return /** @type{!Array.<!proto.ManaRequirement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaRequirement, 13));
};


/** @param {!Array.<!proto.ManaRequirement>} value */
proto.CastingTimeOptionReq.prototype.setManacostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.ManaRequirement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaRequirement}
 */
proto.CastingTimeOptionReq.prototype.addManacost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.ManaRequirement, opt_index);
};


proto.CastingTimeOptionReq.prototype.clearManacostList = function() {
  this.setManacostList([]);
};


/**
 * repeated AutoTapAction autoTapActions = 14;
 * @return {!Array.<!proto.AutoTapAction>}
 */
proto.CastingTimeOptionReq.prototype.getAutotapactionsList = function() {
  return /** @type{!Array.<!proto.AutoTapAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AutoTapAction, 14));
};


/** @param {!Array.<!proto.AutoTapAction>} value */
proto.CastingTimeOptionReq.prototype.setAutotapactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.AutoTapAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AutoTapAction}
 */
proto.CastingTimeOptionReq.prototype.addAutotapactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.AutoTapAction, opt_index);
};


proto.CastingTimeOptionReq.prototype.clearAutotapactionsList = function() {
  this.setAutotapactionsList([]);
};


/**
 * optional uint32 ctoId = 1;
 * @return {number}
 */
proto.CastingTimeOptionReq.prototype.getCtoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CastingTimeOptionReq.prototype.setCtoid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CastingTimeOptionType castingTimeOptionType = 2;
 * @return {!proto.CastingTimeOptionType}
 */
proto.CastingTimeOptionReq.prototype.getCastingtimeoptiontype = function() {
  return /** @type {!proto.CastingTimeOptionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.CastingTimeOptionType} value */
proto.CastingTimeOptionReq.prototype.setCastingtimeoptiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 affectedId = 3;
 * @return {number}
 */
proto.CastingTimeOptionReq.prototype.getAffectedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CastingTimeOptionReq.prototype.setAffectedid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 affectorId = 4;
 * @return {number}
 */
proto.CastingTimeOptionReq.prototype.getAffectorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.CastingTimeOptionReq.prototype.setAffectorid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 grpId = 5;
 * @return {number}
 */
proto.CastingTimeOptionReq.prototype.getGrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CastingTimeOptionReq.prototype.setGrpid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 playerIdToPrompt = 6;
 * @return {number}
 */
proto.CastingTimeOptionReq.prototype.getPlayeridtoprompt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.CastingTimeOptionReq.prototype.setPlayeridtoprompt = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool isRequired = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CastingTimeOptionReq.prototype.getIsrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.CastingTimeOptionReq.prototype.setIsrequired = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional Prompt prompt = 8;
 * @return {?proto.Prompt}
 */
proto.CastingTimeOptionReq.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 8));
};


/** @param {?proto.Prompt|undefined} value */
proto.CastingTimeOptionReq.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.CastingTimeOptionReq.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionReq.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NumericInputReq numericInputReq = 9;
 * @return {?proto.NumericInputReq}
 */
proto.CastingTimeOptionReq.prototype.getNumericinputreq = function() {
  return /** @type{?proto.NumericInputReq} */ (
    jspb.Message.getWrapperField(this, proto.NumericInputReq, 9));
};


/** @param {?proto.NumericInputReq|undefined} value */
proto.CastingTimeOptionReq.prototype.setNumericinputreq = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.CastingTimeOptionReq.prototype.clearNumericinputreq = function() {
  this.setNumericinputreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionReq.prototype.hasNumericinputreq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SelectManaTypeReq selectManaTypeReq = 10;
 * @return {?proto.SelectManaTypeReq}
 */
proto.CastingTimeOptionReq.prototype.getSelectmanatypereq = function() {
  return /** @type{?proto.SelectManaTypeReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectManaTypeReq, 10));
};


/** @param {?proto.SelectManaTypeReq|undefined} value */
proto.CastingTimeOptionReq.prototype.setSelectmanatypereq = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.CastingTimeOptionReq.prototype.clearSelectmanatypereq = function() {
  this.setSelectmanatypereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionReq.prototype.hasSelectmanatypereq = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ModalReq modalReq = 11;
 * @return {?proto.ModalReq}
 */
proto.CastingTimeOptionReq.prototype.getModalreq = function() {
  return /** @type{?proto.ModalReq} */ (
    jspb.Message.getWrapperField(this, proto.ModalReq, 11));
};


/** @param {?proto.ModalReq|undefined} value */
proto.CastingTimeOptionReq.prototype.setModalreq = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.CastingTimeOptionReq.prototype.clearModalreq = function() {
  this.setModalreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionReq.prototype.hasModalreq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SelectNReq selectNReq = 12;
 * @return {?proto.SelectNReq}
 */
proto.CastingTimeOptionReq.prototype.getSelectnreq = function() {
  return /** @type{?proto.SelectNReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectNReq, 12));
};


/** @param {?proto.SelectNReq|undefined} value */
proto.CastingTimeOptionReq.prototype.setSelectnreq = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.CastingTimeOptionReq.prototype.clearSelectnreq = function() {
  this.setSelectnreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionReq.prototype.hasSelectnreq = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CastingTimeOptionResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CastingTimeOptionResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CastingTimeOptionResp.displayName = 'proto.CastingTimeOptionResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CastingTimeOptionResp.prototype.toObject = function(opt_includeInstance) {
  return proto.CastingTimeOptionResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CastingTimeOptionResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ctoid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    castingtimeoptiontype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numericinputresp: (f = msg.getNumericinputresp()) && proto.NumericInputResp.toObject(includeInstance, f),
    selectmanatyperesp: (f = msg.getSelectmanatyperesp()) && proto.SelectManaTypeResp.toObject(includeInstance, f),
    choosemodalresp: (f = msg.getChoosemodalresp()) && proto.ChooseModalResp.toObject(includeInstance, f),
    selectnresp: (f = msg.getSelectnresp()) && proto.SelectNResp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CastingTimeOptionResp}
 */
proto.CastingTimeOptionResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CastingTimeOptionResp;
  return proto.CastingTimeOptionResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CastingTimeOptionResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CastingTimeOptionResp}
 */
proto.CastingTimeOptionResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCtoid(value);
      break;
    case 2:
      var value = /** @type {!proto.CastingTimeOptionType} */ (reader.readEnum());
      msg.setCastingtimeoptiontype(value);
      break;
    case 3:
      var value = new proto.NumericInputResp;
      reader.readMessage(value,proto.NumericInputResp.deserializeBinaryFromReader);
      msg.setNumericinputresp(value);
      break;
    case 4:
      var value = new proto.SelectManaTypeResp;
      reader.readMessage(value,proto.SelectManaTypeResp.deserializeBinaryFromReader);
      msg.setSelectmanatyperesp(value);
      break;
    case 5:
      var value = new proto.ChooseModalResp;
      reader.readMessage(value,proto.ChooseModalResp.deserializeBinaryFromReader);
      msg.setChoosemodalresp(value);
      break;
    case 6:
      var value = new proto.SelectNResp;
      reader.readMessage(value,proto.SelectNResp.deserializeBinaryFromReader);
      msg.setSelectnresp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CastingTimeOptionResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CastingTimeOptionResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CastingTimeOptionResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCtoid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCastingtimeoptiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNumericinputresp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.NumericInputResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectmanatyperesp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SelectManaTypeResp.serializeBinaryToWriter
    );
  }
  f = message.getChoosemodalresp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ChooseModalResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectnresp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SelectNResp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 ctoId = 1;
 * @return {number}
 */
proto.CastingTimeOptionResp.prototype.getCtoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CastingTimeOptionResp.prototype.setCtoid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CastingTimeOptionType castingTimeOptionType = 2;
 * @return {!proto.CastingTimeOptionType}
 */
proto.CastingTimeOptionResp.prototype.getCastingtimeoptiontype = function() {
  return /** @type {!proto.CastingTimeOptionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.CastingTimeOptionType} value */
proto.CastingTimeOptionResp.prototype.setCastingtimeoptiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NumericInputResp numericInputResp = 3;
 * @return {?proto.NumericInputResp}
 */
proto.CastingTimeOptionResp.prototype.getNumericinputresp = function() {
  return /** @type{?proto.NumericInputResp} */ (
    jspb.Message.getWrapperField(this, proto.NumericInputResp, 3));
};


/** @param {?proto.NumericInputResp|undefined} value */
proto.CastingTimeOptionResp.prototype.setNumericinputresp = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.CastingTimeOptionResp.prototype.clearNumericinputresp = function() {
  this.setNumericinputresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionResp.prototype.hasNumericinputresp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SelectManaTypeResp selectManaTypeResp = 4;
 * @return {?proto.SelectManaTypeResp}
 */
proto.CastingTimeOptionResp.prototype.getSelectmanatyperesp = function() {
  return /** @type{?proto.SelectManaTypeResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectManaTypeResp, 4));
};


/** @param {?proto.SelectManaTypeResp|undefined} value */
proto.CastingTimeOptionResp.prototype.setSelectmanatyperesp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.CastingTimeOptionResp.prototype.clearSelectmanatyperesp = function() {
  this.setSelectmanatyperesp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionResp.prototype.hasSelectmanatyperesp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ChooseModalResp chooseModalResp = 5;
 * @return {?proto.ChooseModalResp}
 */
proto.CastingTimeOptionResp.prototype.getChoosemodalresp = function() {
  return /** @type{?proto.ChooseModalResp} */ (
    jspb.Message.getWrapperField(this, proto.ChooseModalResp, 5));
};


/** @param {?proto.ChooseModalResp|undefined} value */
proto.CastingTimeOptionResp.prototype.setChoosemodalresp = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.CastingTimeOptionResp.prototype.clearChoosemodalresp = function() {
  this.setChoosemodalresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionResp.prototype.hasChoosemodalresp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SelectNResp selectNResp = 6;
 * @return {?proto.SelectNResp}
 */
proto.CastingTimeOptionResp.prototype.getSelectnresp = function() {
  return /** @type{?proto.SelectNResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectNResp, 6));
};


/** @param {?proto.SelectNResp|undefined} value */
proto.CastingTimeOptionResp.prototype.setSelectnresp = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.CastingTimeOptionResp.prototype.clearSelectnresp = function() {
  this.setSelectnresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionResp.prototype.hasSelectnresp = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CastingTimeOptionsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CastingTimeOptionsReq.repeatedFields_, null);
};
goog.inherits(proto.CastingTimeOptionsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CastingTimeOptionsReq.displayName = 'proto.CastingTimeOptionsReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CastingTimeOptionsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CastingTimeOptionsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CastingTimeOptionsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CastingTimeOptionsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    castingtimeoptionreqList: jspb.Message.toObjectList(msg.getCastingtimeoptionreqList(),
    proto.CastingTimeOptionReq.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CastingTimeOptionsReq}
 */
proto.CastingTimeOptionsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CastingTimeOptionsReq;
  return proto.CastingTimeOptionsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CastingTimeOptionsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CastingTimeOptionsReq}
 */
proto.CastingTimeOptionsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CastingTimeOptionReq;
      reader.readMessage(value,proto.CastingTimeOptionReq.deserializeBinaryFromReader);
      msg.addCastingtimeoptionreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CastingTimeOptionsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CastingTimeOptionsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CastingTimeOptionsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCastingtimeoptionreqList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CastingTimeOptionReq.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CastingTimeOptionReq castingTimeOptionReq = 1;
 * @return {!Array.<!proto.CastingTimeOptionReq>}
 */
proto.CastingTimeOptionsReq.prototype.getCastingtimeoptionreqList = function() {
  return /** @type{!Array.<!proto.CastingTimeOptionReq>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CastingTimeOptionReq, 1));
};


/** @param {!Array.<!proto.CastingTimeOptionReq>} value */
proto.CastingTimeOptionsReq.prototype.setCastingtimeoptionreqList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CastingTimeOptionReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CastingTimeOptionReq}
 */
proto.CastingTimeOptionsReq.prototype.addCastingtimeoptionreq = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CastingTimeOptionReq, opt_index);
};


proto.CastingTimeOptionsReq.prototype.clearCastingtimeoptionreqList = function() {
  this.setCastingtimeoptionreqList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CastingTimeOptionsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CastingTimeOptionsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CastingTimeOptionsResp.displayName = 'proto.CastingTimeOptionsResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CastingTimeOptionsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.CastingTimeOptionsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CastingTimeOptionsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    castingtimeoptionresp: (f = msg.getCastingtimeoptionresp()) && proto.CastingTimeOptionResp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CastingTimeOptionsResp}
 */
proto.CastingTimeOptionsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CastingTimeOptionsResp;
  return proto.CastingTimeOptionsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CastingTimeOptionsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CastingTimeOptionsResp}
 */
proto.CastingTimeOptionsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CastingTimeOptionResp;
      reader.readMessage(value,proto.CastingTimeOptionResp.deserializeBinaryFromReader);
      msg.setCastingtimeoptionresp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CastingTimeOptionsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CastingTimeOptionsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CastingTimeOptionsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CastingTimeOptionsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCastingtimeoptionresp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CastingTimeOptionResp.serializeBinaryToWriter
    );
  }
};


/**
 * optional CastingTimeOptionResp castingTimeOptionResp = 1;
 * @return {?proto.CastingTimeOptionResp}
 */
proto.CastingTimeOptionsResp.prototype.getCastingtimeoptionresp = function() {
  return /** @type{?proto.CastingTimeOptionResp} */ (
    jspb.Message.getWrapperField(this, proto.CastingTimeOptionResp, 1));
};


/** @param {?proto.CastingTimeOptionResp|undefined} value */
proto.CastingTimeOptionsResp.prototype.setCastingtimeoptionresp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CastingTimeOptionsResp.prototype.clearCastingtimeoptionresp = function() {
  this.setCastingtimeoptionresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CastingTimeOptionsResp.prototype.hasCastingtimeoptionresp = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CheckpointConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CheckpointConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CheckpointConfiguration.displayName = 'proto.CheckpointConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CheckpointConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.CheckpointConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CheckpointConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckpointConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CheckpointConfiguration}
 */
proto.CheckpointConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CheckpointConfiguration;
  return proto.CheckpointConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CheckpointConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CheckpointConfiguration}
 */
proto.CheckpointConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CheckpointConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CheckpointConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CheckpointConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckpointConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CheckpointConfiguration.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.CheckpointConfiguration.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Choice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Choice.repeatedFields_, null);
};
goog.inherits(proto.Choice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Choice.displayName = 'proto.Choice';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Choice.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Choice.prototype.toObject = function(opt_includeInstance) {
  return proto.Choice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Choice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Choice.toObject = function(includeInstance, msg) {
  var f, obj = {
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.PromptParameter.toObject, includeInstance),
    choiceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    responsevalue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Choice}
 */
proto.Choice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Choice;
  return proto.Choice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Choice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Choice}
 */
proto.Choice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.PromptParameter;
      reader.readMessage(value,proto.PromptParameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChoiceid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResponsevalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Choice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Choice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Choice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Choice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PromptParameter.serializeBinaryToWriter
    );
  }
  f = message.getChoiceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResponsevalue();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated PromptParameter parameters = 2;
 * @return {!Array.<!proto.PromptParameter>}
 */
proto.Choice.prototype.getParametersList = function() {
  return /** @type{!Array.<!proto.PromptParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PromptParameter, 2));
};


/** @param {!Array.<!proto.PromptParameter>} value */
proto.Choice.prototype.setParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PromptParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PromptParameter}
 */
proto.Choice.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PromptParameter, opt_index);
};


proto.Choice.prototype.clearParametersList = function() {
  this.setParametersList([]);
};


/**
 * optional uint32 choiceId = 1;
 * @return {number}
 */
proto.Choice.prototype.getChoiceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Choice.prototype.setChoiceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 responseValue = 3;
 * @return {number}
 */
proto.Choice.prototype.getResponsevalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Choice.prototype.setResponsevalue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChooseModalResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChooseModalResp.repeatedFields_, null);
};
goog.inherits(proto.ChooseModalResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChooseModalResp.displayName = 'proto.ChooseModalResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChooseModalResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChooseModalResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ChooseModalResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChooseModalResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChooseModalResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    grpidsList: jspb.Message.getRepeatedField(msg, 2),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChooseModalResp}
 */
proto.ChooseModalResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChooseModalResp;
  return proto.ChooseModalResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChooseModalResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChooseModalResp}
 */
proto.ChooseModalResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setGrpidsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChooseModalResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChooseModalResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChooseModalResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChooseModalResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrpidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 grpIds = 2;
 * @return {!Array.<number>}
 */
proto.ChooseModalResp.prototype.getGrpidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.ChooseModalResp.prototype.setGrpidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ChooseModalResp.prototype.addGrpids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.ChooseModalResp.prototype.clearGrpidsList = function() {
  this.setGrpidsList([]);
};


/**
 * optional uint32 abilityGrpId = 1;
 * @return {number}
 */
proto.ChooseModalResp.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChooseModalResp.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChooseStartingPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChooseStartingPlayerReq.repeatedFields_, null);
};
goog.inherits(proto.ChooseStartingPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChooseStartingPlayerReq.displayName = 'proto.ChooseStartingPlayerReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChooseStartingPlayerReq.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChooseStartingPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ChooseStartingPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChooseStartingPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChooseStartingPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemseatidsList: jspb.Message.getRepeatedField(msg, 2),
    teamidsList: jspb.Message.getRepeatedField(msg, 3),
    teamtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChooseStartingPlayerReq}
 */
proto.ChooseStartingPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChooseStartingPlayerReq;
  return proto.ChooseStartingPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChooseStartingPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChooseStartingPlayerReq}
 */
proto.ChooseStartingPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSystemseatidsList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setTeamidsList(value);
      break;
    case 1:
      var value = /** @type {!proto.TeamType} */ (reader.readEnum());
      msg.setTeamtype(value);
      break;
    case 4:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChooseStartingPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChooseStartingPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChooseStartingPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChooseStartingPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemseatidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getTeamidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getTeamtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 systemSeatIds = 2;
 * @return {!Array.<number>}
 */
proto.ChooseStartingPlayerReq.prototype.getSystemseatidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.ChooseStartingPlayerReq.prototype.setSystemseatidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ChooseStartingPlayerReq.prototype.addSystemseatids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.ChooseStartingPlayerReq.prototype.clearSystemseatidsList = function() {
  this.setSystemseatidsList([]);
};


/**
 * repeated uint32 teamIds = 3;
 * @return {!Array.<number>}
 */
proto.ChooseStartingPlayerReq.prototype.getTeamidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.ChooseStartingPlayerReq.prototype.setTeamidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ChooseStartingPlayerReq.prototype.addTeamids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.ChooseStartingPlayerReq.prototype.clearTeamidsList = function() {
  this.setTeamidsList([]);
};


/**
 * optional TeamType teamType = 1;
 * @return {!proto.TeamType}
 */
proto.ChooseStartingPlayerReq.prototype.getTeamtype = function() {
  return /** @type {!proto.TeamType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TeamType} value */
proto.ChooseStartingPlayerReq.prototype.setTeamtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Prompt prompt = 4;
 * @return {?proto.Prompt}
 */
proto.ChooseStartingPlayerReq.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 4));
};


/** @param {?proto.Prompt|undefined} value */
proto.ChooseStartingPlayerReq.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ChooseStartingPlayerReq.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChooseStartingPlayerReq.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChooseStartingPlayerResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChooseStartingPlayerResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChooseStartingPlayerResp.displayName = 'proto.ChooseStartingPlayerResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChooseStartingPlayerResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ChooseStartingPlayerResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChooseStartingPlayerResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChooseStartingPlayerResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChooseStartingPlayerResp}
 */
proto.ChooseStartingPlayerResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChooseStartingPlayerResp;
  return proto.ChooseStartingPlayerResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChooseStartingPlayerResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChooseStartingPlayerResp}
 */
proto.ChooseStartingPlayerResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TeamType} */ (reader.readEnum());
      msg.setTeamtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChooseStartingPlayerResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChooseStartingPlayerResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChooseStartingPlayerResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChooseStartingPlayerResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional TeamType teamType = 1;
 * @return {!proto.TeamType}
 */
proto.ChooseStartingPlayerResp.prototype.getTeamtype = function() {
  return /** @type {!proto.TeamType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TeamType} value */
proto.ChooseStartingPlayerResp.prototype.setTeamtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 systemSeatId = 2;
 * @return {number}
 */
proto.ChooseStartingPlayerResp.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ChooseStartingPlayerResp.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 teamId = 3;
 * @return {number}
 */
proto.ChooseStartingPlayerResp.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChooseStartingPlayerResp.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClearLobbyUserStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClearLobbyUserStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClearLobbyUserStatusRequest.displayName = 'proto.ClearLobbyUserStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClearLobbyUserStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ClearLobbyUserStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClearLobbyUserStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClearLobbyUserStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClearLobbyUserStatusRequest}
 */
proto.ClearLobbyUserStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClearLobbyUserStatusRequest;
  return proto.ClearLobbyUserStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClearLobbyUserStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClearLobbyUserStatusRequest}
 */
proto.ClearLobbyUserStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClearLobbyUserStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClearLobbyUserStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClearLobbyUserStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClearLobbyUserStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.ClearLobbyUserStatusRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClearLobbyUserStatusRequest.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClearLobbyUserStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClearLobbyUserStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClearLobbyUserStatusResponse.displayName = 'proto.ClearLobbyUserStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClearLobbyUserStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ClearLobbyUserStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClearLobbyUserStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClearLobbyUserStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userinfo: (f = msg.getUserinfo()) && proto.LobbyUserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClearLobbyUserStatusResponse}
 */
proto.ClearLobbyUserStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClearLobbyUserStatusResponse;
  return proto.ClearLobbyUserStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClearLobbyUserStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClearLobbyUserStatusResponse}
 */
proto.ClearLobbyUserStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LobbyUserInfo;
      reader.readMessage(value,proto.LobbyUserInfo.deserializeBinaryFromReader);
      msg.setUserinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClearLobbyUserStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClearLobbyUserStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClearLobbyUserStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClearLobbyUserStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LobbyUserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LobbyUserInfo userInfo = 1;
 * @return {?proto.LobbyUserInfo}
 */
proto.ClearLobbyUserStatusResponse.prototype.getUserinfo = function() {
  return /** @type{?proto.LobbyUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyUserInfo, 1));
};


/** @param {?proto.LobbyUserInfo|undefined} value */
proto.ClearLobbyUserStatusResponse.prototype.setUserinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ClearLobbyUserStatusResponse.prototype.clearUserinfo = function() {
  this.setUserinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClearLobbyUserStatusResponse.prototype.hasUserinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientInfo.displayName = 'proto.ClientInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientversion: jspb.Message.getFieldWithDefault(msg, 10, ""),
    clientlocation: jspb.Message.getFieldWithDefault(msg, 11, ""),
    clientlanguage: jspb.Message.getFieldWithDefault(msg, 12, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientInfo}
 */
proto.ClientInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientInfo;
  return proto.ClientInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientInfo}
 */
proto.ClientInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientversion(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientlocation(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientlanguage(value);
      break;
    case 2:
      var value = /** @type {!proto.ClientType} */ (reader.readEnum());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientversion();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getClientlocation();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getClientlanguage();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getClienttype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.ClientInfo.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientInfo.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientVersion = 10;
 * @return {string}
 */
proto.ClientInfo.prototype.getClientversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.ClientInfo.prototype.setClientversion = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string clientLocation = 11;
 * @return {string}
 */
proto.ClientInfo.prototype.getClientlocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.ClientInfo.prototype.setClientlocation = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string clientLanguage = 12;
 * @return {string}
 */
proto.ClientInfo.prototype.getClientlanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.ClientInfo.prototype.setClientlanguage = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional ClientType clientType = 2;
 * @return {!proto.ClientType}
 */
proto.ClientInfo.prototype.getClienttype = function() {
  return /** @type {!proto.ClientType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ClientType} value */
proto.ClientInfo.prototype.setClienttype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientSessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientSessionInfo.repeatedFields_, null);
};
goog.inherits(proto.ClientSessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientSessionInfo.displayName = 'proto.ClientSessionInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientSessionInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientSessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientSessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientSessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientSessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rolesList: jspb.Message.getRepeatedField(msg, 3),
    username: jspb.Message.getFieldWithDefault(msg, 4, ""),
    screenname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clientinfo: (f = msg.getClientinfo()) && proto.ClientInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientSessionInfo}
 */
proto.ClientSessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientSessionInfo;
  return proto.ClientSessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientSessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientSessionInfo}
 */
proto.ClientSessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setScreenname(value);
      break;
    case 10:
      var value = new proto.ClientInfo;
      reader.readMessage(value,proto.ClientInfo.deserializeBinaryFromReader);
      msg.setClientinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientSessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientSessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientSessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientSessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScreenname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClientinfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ClientInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.ClientSessionInfo.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientSessionInfo.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sessionId = 2;
 * @return {string}
 */
proto.ClientSessionInfo.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientSessionInfo.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string roles = 3;
 * @return {!Array.<string>}
 */
proto.ClientSessionInfo.prototype.getRolesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.ClientSessionInfo.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ClientSessionInfo.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.ClientSessionInfo.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * optional string userName = 4;
 * @return {string}
 */
proto.ClientSessionInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ClientSessionInfo.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string screenName = 5;
 * @return {string}
 */
proto.ClientSessionInfo.prototype.getScreenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ClientSessionInfo.prototype.setScreenname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ClientInfo clientInfo = 10;
 * @return {?proto.ClientInfo}
 */
proto.ClientSessionInfo.prototype.getClientinfo = function() {
  return /** @type{?proto.ClientInfo} */ (
    jspb.Message.getWrapperField(this, proto.ClientInfo, 10));
};


/** @param {?proto.ClientInfo|undefined} value */
proto.ClientSessionInfo.prototype.setClientinfo = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.ClientSessionInfo.prototype.clearClientinfo = function() {
  this.setClientinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientSessionInfo.prototype.hasClientinfo = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientSync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientSync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientSync.displayName = 'proto.ClientSync';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientSync.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientSync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientSync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientSync.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemseatid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientSync}
 */
proto.ClientSync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientSync;
  return proto.ClientSync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientSync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientSync}
 */
proto.ClientSync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientSync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientSync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientSync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientSync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 systemSeatId = 1;
 * @return {number}
 */
proto.ClientSync.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientSync.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientToFrontDoorMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientToFrontDoorMessage.oneofGroups_);
};
goog.inherits(proto.ClientToFrontDoorMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientToFrontDoorMessage.displayName = 'proto.ClientToFrontDoorMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientToFrontDoorMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ClientToFrontDoorMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CLIENTTOLOBBYMESSAGE: 1,
  CLIENTTOLAPAMESSAGE: 2
};

/**
 * @return {proto.ClientToFrontDoorMessage.MessageCase}
 */
proto.ClientToFrontDoorMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ClientToFrontDoorMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ClientToFrontDoorMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientToFrontDoorMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientToFrontDoorMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientToFrontDoorMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToFrontDoorMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    clienttolobbymessage: (f = msg.getClienttolobbymessage()) && proto.ClientToLobbyMessage.toObject(includeInstance, f),
    clienttolapamessage: (f = msg.getClienttolapamessage()) && proto.ClientToLapaMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientToFrontDoorMessage}
 */
proto.ClientToFrontDoorMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientToFrontDoorMessage;
  return proto.ClientToFrontDoorMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientToFrontDoorMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientToFrontDoorMessage}
 */
proto.ClientToFrontDoorMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientToLobbyMessage;
      reader.readMessage(value,proto.ClientToLobbyMessage.deserializeBinaryFromReader);
      msg.setClienttolobbymessage(value);
      break;
    case 2:
      var value = new proto.ClientToLapaMessage;
      reader.readMessage(value,proto.ClientToLapaMessage.deserializeBinaryFromReader);
      msg.setClienttolapamessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientToFrontDoorMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientToFrontDoorMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientToFrontDoorMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToFrontDoorMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClienttolobbymessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ClientToLobbyMessage.serializeBinaryToWriter
    );
  }
  f = message.getClienttolapamessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ClientToLapaMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientToLobbyMessage clientToLobbyMessage = 1;
 * @return {?proto.ClientToLobbyMessage}
 */
proto.ClientToFrontDoorMessage.prototype.getClienttolobbymessage = function() {
  return /** @type{?proto.ClientToLobbyMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToLobbyMessage, 1));
};


/** @param {?proto.ClientToLobbyMessage|undefined} value */
proto.ClientToFrontDoorMessage.prototype.setClienttolobbymessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ClientToFrontDoorMessage.oneofGroups_[0], value);
};


proto.ClientToFrontDoorMessage.prototype.clearClienttolobbymessage = function() {
  this.setClienttolobbymessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToFrontDoorMessage.prototype.hasClienttolobbymessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientToLapaMessage clientToLapaMessage = 2;
 * @return {?proto.ClientToLapaMessage}
 */
proto.ClientToFrontDoorMessage.prototype.getClienttolapamessage = function() {
  return /** @type{?proto.ClientToLapaMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToLapaMessage, 2));
};


/** @param {?proto.ClientToLapaMessage|undefined} value */
proto.ClientToFrontDoorMessage.prototype.setClienttolapamessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ClientToFrontDoorMessage.oneofGroups_[0], value);
};


proto.ClientToFrontDoorMessage.prototype.clearClienttolapamessage = function() {
  this.setClienttolapamessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToFrontDoorMessage.prototype.hasClienttolapamessage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientToGREMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientToGREMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientToGREMessage.displayName = 'proto.ClientToGREMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientToGREMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientToGREMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientToGREMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToGREMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gamestateid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    respid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    connectreq: (f = msg.getConnectreq()) && proto.ConnectReq.toObject(includeInstance, f),
    cancelactionreq: (f = msg.getCancelactionreq()) && proto.CancelActionReq.toObject(includeInstance, f),
    choosemodalresp: (f = msg.getChoosemodalresp()) && proto.ChooseModalResp.toObject(includeInstance, f),
    concedereq: (f = msg.getConcedereq()) && proto.ConcedeReq.toObject(includeInstance, f),
    forcedrawreq: (f = msg.getForcedrawreq()) && proto.ForceDrawReq.toObject(includeInstance, f),
    groupresp: (f = msg.getGroupresp()) && proto.GroupResp.toObject(includeInstance, f),
    mulliganresp: (f = msg.getMulliganresp()) && proto.MulliganResp.toObject(includeInstance, f),
    optionalresp: (f = msg.getOptionalresp()) && proto.OptionalResp.toObject(includeInstance, f),
    orderresp: (f = msg.getOrderresp()) && proto.OrderResp.toObject(includeInstance, f),
    performactionresp: (f = msg.getPerformactionresp()) && proto.PerformActionResp.toObject(includeInstance, f),
    selectnresp: (f = msg.getSelectnresp()) && proto.SelectNResp.toObject(includeInstance, f),
    setsettingsreq: (f = msg.getSetsettingsreq()) && proto.SetSettingsReq.toObject(includeInstance, f),
    choosestartingplayerresp: (f = msg.getChoosestartingplayerresp()) && proto.ChooseStartingPlayerResp.toObject(includeInstance, f),
    declareattackersresp: (f = msg.getDeclareattackersresp()) && proto.DeclareAttackersResp.toObject(includeInstance, f),
    declareblockersresp: (f = msg.getDeclareblockersresp()) && proto.DeclareBlockersResp.toObject(includeInstance, f),
    ordercombatdamageresp: (f = msg.getOrdercombatdamageresp()) && proto.OrderCombatDamageResp.toObject(includeInstance, f),
    assigndamageresp: (f = msg.getAssigndamageresp()) && proto.AssignDamageResp.toObject(includeInstance, f),
    selecttargetsresp: (f = msg.getSelecttargetsresp()) && proto.SelectTargetsResp.toObject(includeInstance, f),
    selectreplacementresp: (f = msg.getSelectreplacementresp()) && proto.SelectReplacementResp.toObject(includeInstance, f),
    selectngroupresp: (f = msg.getSelectngroupresp()) && proto.SelectNGroupResp.toObject(includeInstance, f),
    alternativecostresp: (f = msg.getAlternativecostresp()) && proto.AlternativeCostResp.toObject(includeInstance, f),
    distributionresp: (f = msg.getDistributionresp()) && proto.DistributionResp.toObject(includeInstance, f),
    numericinputresp: (f = msg.getNumericinputresp()) && proto.NumericInputResp.toObject(includeInstance, f),
    searchresp: (f = msg.getSearchresp()) && proto.SearchResp.toObject(includeInstance, f),
    actioncostresp: (f = msg.getActioncostresp()) && proto.ActionCostResp.toObject(includeInstance, f),
    castingtimeoptionsresp: (f = msg.getCastingtimeoptionsresp()) && proto.CastingTimeOptionsResp.toObject(includeInstance, f),
    selectmanatyperesp: (f = msg.getSelectmanatyperesp()) && proto.SelectManaTypeResp.toObject(includeInstance, f),
    selectfromgroupsresp: (f = msg.getSelectfromgroupsresp()) && proto.SelectFromGroupsResp.toObject(includeInstance, f),
    searchfromgroupsresp: (f = msg.getSearchfromgroupsresp()) && proto.SearchFromGroupsResp.toObject(includeInstance, f),
    gatherresp: (f = msg.getGatherresp()) && proto.GatherResp.toObject(includeInstance, f),
    submitpaymentresp: (f = msg.getSubmitpaymentresp()) && proto.SubmitPaymentResp.toObject(includeInstance, f),
    uimessage: (f = msg.getUimessage()) && proto.UIMessage.toObject(includeInstance, f),
    submitdeckresp: (f = msg.getSubmitdeckresp()) && proto.SubmitDeckResp.toObject(includeInstance, f),
    controlreq: (f = msg.getControlreq()) && proto.ControlReq.toObject(includeInstance, f),
    timerid: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientToGREMessage}
 */
proto.ClientToGREMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientToGREMessage;
  return proto.ClientToGREMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientToGREMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientToGREMessage}
 */
proto.ClientToGREMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ClientMessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGamestateid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRespid(value);
      break;
    case 5:
      var value = new proto.ConnectReq;
      reader.readMessage(value,proto.ConnectReq.deserializeBinaryFromReader);
      msg.setConnectreq(value);
      break;
    case 6:
      var value = new proto.CancelActionReq;
      reader.readMessage(value,proto.CancelActionReq.deserializeBinaryFromReader);
      msg.setCancelactionreq(value);
      break;
    case 7:
      var value = new proto.ChooseModalResp;
      reader.readMessage(value,proto.ChooseModalResp.deserializeBinaryFromReader);
      msg.setChoosemodalresp(value);
      break;
    case 8:
      var value = new proto.ConcedeReq;
      reader.readMessage(value,proto.ConcedeReq.deserializeBinaryFromReader);
      msg.setConcedereq(value);
      break;
    case 9:
      var value = new proto.ForceDrawReq;
      reader.readMessage(value,proto.ForceDrawReq.deserializeBinaryFromReader);
      msg.setForcedrawreq(value);
      break;
    case 10:
      var value = new proto.GroupResp;
      reader.readMessage(value,proto.GroupResp.deserializeBinaryFromReader);
      msg.setGroupresp(value);
      break;
    case 11:
      var value = new proto.MulliganResp;
      reader.readMessage(value,proto.MulliganResp.deserializeBinaryFromReader);
      msg.setMulliganresp(value);
      break;
    case 12:
      var value = new proto.OptionalResp;
      reader.readMessage(value,proto.OptionalResp.deserializeBinaryFromReader);
      msg.setOptionalresp(value);
      break;
    case 13:
      var value = new proto.OrderResp;
      reader.readMessage(value,proto.OrderResp.deserializeBinaryFromReader);
      msg.setOrderresp(value);
      break;
    case 14:
      var value = new proto.PerformActionResp;
      reader.readMessage(value,proto.PerformActionResp.deserializeBinaryFromReader);
      msg.setPerformactionresp(value);
      break;
    case 15:
      var value = new proto.SelectNResp;
      reader.readMessage(value,proto.SelectNResp.deserializeBinaryFromReader);
      msg.setSelectnresp(value);
      break;
    case 16:
      var value = new proto.SetSettingsReq;
      reader.readMessage(value,proto.SetSettingsReq.deserializeBinaryFromReader);
      msg.setSetsettingsreq(value);
      break;
    case 21:
      var value = new proto.ChooseStartingPlayerResp;
      reader.readMessage(value,proto.ChooseStartingPlayerResp.deserializeBinaryFromReader);
      msg.setChoosestartingplayerresp(value);
      break;
    case 22:
      var value = new proto.DeclareAttackersResp;
      reader.readMessage(value,proto.DeclareAttackersResp.deserializeBinaryFromReader);
      msg.setDeclareattackersresp(value);
      break;
    case 23:
      var value = new proto.DeclareBlockersResp;
      reader.readMessage(value,proto.DeclareBlockersResp.deserializeBinaryFromReader);
      msg.setDeclareblockersresp(value);
      break;
    case 24:
      var value = new proto.OrderCombatDamageResp;
      reader.readMessage(value,proto.OrderCombatDamageResp.deserializeBinaryFromReader);
      msg.setOrdercombatdamageresp(value);
      break;
    case 25:
      var value = new proto.AssignDamageResp;
      reader.readMessage(value,proto.AssignDamageResp.deserializeBinaryFromReader);
      msg.setAssigndamageresp(value);
      break;
    case 26:
      var value = new proto.SelectTargetsResp;
      reader.readMessage(value,proto.SelectTargetsResp.deserializeBinaryFromReader);
      msg.setSelecttargetsresp(value);
      break;
    case 27:
      var value = new proto.SelectReplacementResp;
      reader.readMessage(value,proto.SelectReplacementResp.deserializeBinaryFromReader);
      msg.setSelectreplacementresp(value);
      break;
    case 28:
      var value = new proto.SelectNGroupResp;
      reader.readMessage(value,proto.SelectNGroupResp.deserializeBinaryFromReader);
      msg.setSelectngroupresp(value);
      break;
    case 29:
      var value = new proto.AlternativeCostResp;
      reader.readMessage(value,proto.AlternativeCostResp.deserializeBinaryFromReader);
      msg.setAlternativecostresp(value);
      break;
    case 30:
      var value = new proto.DistributionResp;
      reader.readMessage(value,proto.DistributionResp.deserializeBinaryFromReader);
      msg.setDistributionresp(value);
      break;
    case 31:
      var value = new proto.NumericInputResp;
      reader.readMessage(value,proto.NumericInputResp.deserializeBinaryFromReader);
      msg.setNumericinputresp(value);
      break;
    case 32:
      var value = new proto.SearchResp;
      reader.readMessage(value,proto.SearchResp.deserializeBinaryFromReader);
      msg.setSearchresp(value);
      break;
    case 33:
      var value = new proto.ActionCostResp;
      reader.readMessage(value,proto.ActionCostResp.deserializeBinaryFromReader);
      msg.setActioncostresp(value);
      break;
    case 34:
      var value = new proto.CastingTimeOptionsResp;
      reader.readMessage(value,proto.CastingTimeOptionsResp.deserializeBinaryFromReader);
      msg.setCastingtimeoptionsresp(value);
      break;
    case 35:
      var value = new proto.SelectManaTypeResp;
      reader.readMessage(value,proto.SelectManaTypeResp.deserializeBinaryFromReader);
      msg.setSelectmanatyperesp(value);
      break;
    case 36:
      var value = new proto.SelectFromGroupsResp;
      reader.readMessage(value,proto.SelectFromGroupsResp.deserializeBinaryFromReader);
      msg.setSelectfromgroupsresp(value);
      break;
    case 37:
      var value = new proto.SearchFromGroupsResp;
      reader.readMessage(value,proto.SearchFromGroupsResp.deserializeBinaryFromReader);
      msg.setSearchfromgroupsresp(value);
      break;
    case 38:
      var value = new proto.GatherResp;
      reader.readMessage(value,proto.GatherResp.deserializeBinaryFromReader);
      msg.setGatherresp(value);
      break;
    case 39:
      var value = new proto.SubmitPaymentResp;
      reader.readMessage(value,proto.SubmitPaymentResp.deserializeBinaryFromReader);
      msg.setSubmitpaymentresp(value);
      break;
    case 40:
      var value = new proto.UIMessage;
      reader.readMessage(value,proto.UIMessage.deserializeBinaryFromReader);
      msg.setUimessage(value);
      break;
    case 41:
      var value = new proto.SubmitDeckResp;
      reader.readMessage(value,proto.SubmitDeckResp.deserializeBinaryFromReader);
      msg.setSubmitdeckresp(value);
      break;
    case 42:
      var value = new proto.ControlReq;
      reader.readMessage(value,proto.ControlReq.deserializeBinaryFromReader);
      msg.setControlreq(value);
      break;
    case 100:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientToGREMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientToGREMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientToGREMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToGREMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGamestateid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRespid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getConnectreq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ConnectReq.serializeBinaryToWriter
    );
  }
  f = message.getCancelactionreq();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.CancelActionReq.serializeBinaryToWriter
    );
  }
  f = message.getChoosemodalresp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ChooseModalResp.serializeBinaryToWriter
    );
  }
  f = message.getConcedereq();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ConcedeReq.serializeBinaryToWriter
    );
  }
  f = message.getForcedrawreq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ForceDrawReq.serializeBinaryToWriter
    );
  }
  f = message.getGroupresp();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.GroupResp.serializeBinaryToWriter
    );
  }
  f = message.getMulliganresp();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.MulliganResp.serializeBinaryToWriter
    );
  }
  f = message.getOptionalresp();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.OptionalResp.serializeBinaryToWriter
    );
  }
  f = message.getOrderresp();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.OrderResp.serializeBinaryToWriter
    );
  }
  f = message.getPerformactionresp();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.PerformActionResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectnresp();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.SelectNResp.serializeBinaryToWriter
    );
  }
  f = message.getSetsettingsreq();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.SetSettingsReq.serializeBinaryToWriter
    );
  }
  f = message.getChoosestartingplayerresp();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.ChooseStartingPlayerResp.serializeBinaryToWriter
    );
  }
  f = message.getDeclareattackersresp();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.DeclareAttackersResp.serializeBinaryToWriter
    );
  }
  f = message.getDeclareblockersresp();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.DeclareBlockersResp.serializeBinaryToWriter
    );
  }
  f = message.getOrdercombatdamageresp();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.OrderCombatDamageResp.serializeBinaryToWriter
    );
  }
  f = message.getAssigndamageresp();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.AssignDamageResp.serializeBinaryToWriter
    );
  }
  f = message.getSelecttargetsresp();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.SelectTargetsResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectreplacementresp();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.SelectReplacementResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectngroupresp();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.SelectNGroupResp.serializeBinaryToWriter
    );
  }
  f = message.getAlternativecostresp();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.AlternativeCostResp.serializeBinaryToWriter
    );
  }
  f = message.getDistributionresp();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.DistributionResp.serializeBinaryToWriter
    );
  }
  f = message.getNumericinputresp();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.NumericInputResp.serializeBinaryToWriter
    );
  }
  f = message.getSearchresp();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.SearchResp.serializeBinaryToWriter
    );
  }
  f = message.getActioncostresp();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.ActionCostResp.serializeBinaryToWriter
    );
  }
  f = message.getCastingtimeoptionsresp();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.CastingTimeOptionsResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectmanatyperesp();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.SelectManaTypeResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectfromgroupsresp();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.SelectFromGroupsResp.serializeBinaryToWriter
    );
  }
  f = message.getSearchfromgroupsresp();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.SearchFromGroupsResp.serializeBinaryToWriter
    );
  }
  f = message.getGatherresp();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.GatherResp.serializeBinaryToWriter
    );
  }
  f = message.getSubmitpaymentresp();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.SubmitPaymentResp.serializeBinaryToWriter
    );
  }
  f = message.getUimessage();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.UIMessage.serializeBinaryToWriter
    );
  }
  f = message.getSubmitdeckresp();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.SubmitDeckResp.serializeBinaryToWriter
    );
  }
  f = message.getControlreq();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.ControlReq.serializeBinaryToWriter
    );
  }
  f = message.getTimerid();
  if (f !== 0) {
    writer.writeUint32(
      100,
      f
    );
  }
};


/**
 * optional ClientMessageType type = 1;
 * @return {!proto.ClientMessageType}
 */
proto.ClientToGREMessage.prototype.getType = function() {
  return /** @type {!proto.ClientMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ClientMessageType} value */
proto.ClientToGREMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 systemSeatId = 2;
 * @return {number}
 */
proto.ClientToGREMessage.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ClientToGREMessage.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 gameStateId = 3;
 * @return {number}
 */
proto.ClientToGREMessage.prototype.getGamestateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientToGREMessage.prototype.setGamestateid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 respId = 4;
 * @return {number}
 */
proto.ClientToGREMessage.prototype.getRespid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ClientToGREMessage.prototype.setRespid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ConnectReq connectReq = 5;
 * @return {?proto.ConnectReq}
 */
proto.ClientToGREMessage.prototype.getConnectreq = function() {
  return /** @type{?proto.ConnectReq} */ (
    jspb.Message.getWrapperField(this, proto.ConnectReq, 5));
};


/** @param {?proto.ConnectReq|undefined} value */
proto.ClientToGREMessage.prototype.setConnectreq = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ClientToGREMessage.prototype.clearConnectreq = function() {
  this.setConnectreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasConnectreq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CancelActionReq cancelActionReq = 6;
 * @return {?proto.CancelActionReq}
 */
proto.ClientToGREMessage.prototype.getCancelactionreq = function() {
  return /** @type{?proto.CancelActionReq} */ (
    jspb.Message.getWrapperField(this, proto.CancelActionReq, 6));
};


/** @param {?proto.CancelActionReq|undefined} value */
proto.ClientToGREMessage.prototype.setCancelactionreq = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.ClientToGREMessage.prototype.clearCancelactionreq = function() {
  this.setCancelactionreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasCancelactionreq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ChooseModalResp chooseModalResp = 7;
 * @return {?proto.ChooseModalResp}
 */
proto.ClientToGREMessage.prototype.getChoosemodalresp = function() {
  return /** @type{?proto.ChooseModalResp} */ (
    jspb.Message.getWrapperField(this, proto.ChooseModalResp, 7));
};


/** @param {?proto.ChooseModalResp|undefined} value */
proto.ClientToGREMessage.prototype.setChoosemodalresp = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.ClientToGREMessage.prototype.clearChoosemodalresp = function() {
  this.setChoosemodalresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasChoosemodalresp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ConcedeReq concedeReq = 8;
 * @return {?proto.ConcedeReq}
 */
proto.ClientToGREMessage.prototype.getConcedereq = function() {
  return /** @type{?proto.ConcedeReq} */ (
    jspb.Message.getWrapperField(this, proto.ConcedeReq, 8));
};


/** @param {?proto.ConcedeReq|undefined} value */
proto.ClientToGREMessage.prototype.setConcedereq = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.ClientToGREMessage.prototype.clearConcedereq = function() {
  this.setConcedereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasConcedereq = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ForceDrawReq forceDrawReq = 9;
 * @return {?proto.ForceDrawReq}
 */
proto.ClientToGREMessage.prototype.getForcedrawreq = function() {
  return /** @type{?proto.ForceDrawReq} */ (
    jspb.Message.getWrapperField(this, proto.ForceDrawReq, 9));
};


/** @param {?proto.ForceDrawReq|undefined} value */
proto.ClientToGREMessage.prototype.setForcedrawreq = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.ClientToGREMessage.prototype.clearForcedrawreq = function() {
  this.setForcedrawreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasForcedrawreq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional GroupResp groupResp = 10;
 * @return {?proto.GroupResp}
 */
proto.ClientToGREMessage.prototype.getGroupresp = function() {
  return /** @type{?proto.GroupResp} */ (
    jspb.Message.getWrapperField(this, proto.GroupResp, 10));
};


/** @param {?proto.GroupResp|undefined} value */
proto.ClientToGREMessage.prototype.setGroupresp = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.ClientToGREMessage.prototype.clearGroupresp = function() {
  this.setGroupresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasGroupresp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MulliganResp mulliganResp = 11;
 * @return {?proto.MulliganResp}
 */
proto.ClientToGREMessage.prototype.getMulliganresp = function() {
  return /** @type{?proto.MulliganResp} */ (
    jspb.Message.getWrapperField(this, proto.MulliganResp, 11));
};


/** @param {?proto.MulliganResp|undefined} value */
proto.ClientToGREMessage.prototype.setMulliganresp = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.ClientToGREMessage.prototype.clearMulliganresp = function() {
  this.setMulliganresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasMulliganresp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional OptionalResp optionalResp = 12;
 * @return {?proto.OptionalResp}
 */
proto.ClientToGREMessage.prototype.getOptionalresp = function() {
  return /** @type{?proto.OptionalResp} */ (
    jspb.Message.getWrapperField(this, proto.OptionalResp, 12));
};


/** @param {?proto.OptionalResp|undefined} value */
proto.ClientToGREMessage.prototype.setOptionalresp = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.ClientToGREMessage.prototype.clearOptionalresp = function() {
  this.setOptionalresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasOptionalresp = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional OrderResp orderResp = 13;
 * @return {?proto.OrderResp}
 */
proto.ClientToGREMessage.prototype.getOrderresp = function() {
  return /** @type{?proto.OrderResp} */ (
    jspb.Message.getWrapperField(this, proto.OrderResp, 13));
};


/** @param {?proto.OrderResp|undefined} value */
proto.ClientToGREMessage.prototype.setOrderresp = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.ClientToGREMessage.prototype.clearOrderresp = function() {
  this.setOrderresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasOrderresp = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional PerformActionResp performActionResp = 14;
 * @return {?proto.PerformActionResp}
 */
proto.ClientToGREMessage.prototype.getPerformactionresp = function() {
  return /** @type{?proto.PerformActionResp} */ (
    jspb.Message.getWrapperField(this, proto.PerformActionResp, 14));
};


/** @param {?proto.PerformActionResp|undefined} value */
proto.ClientToGREMessage.prototype.setPerformactionresp = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.ClientToGREMessage.prototype.clearPerformactionresp = function() {
  this.setPerformactionresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasPerformactionresp = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SelectNResp selectNResp = 15;
 * @return {?proto.SelectNResp}
 */
proto.ClientToGREMessage.prototype.getSelectnresp = function() {
  return /** @type{?proto.SelectNResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectNResp, 15));
};


/** @param {?proto.SelectNResp|undefined} value */
proto.ClientToGREMessage.prototype.setSelectnresp = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.ClientToGREMessage.prototype.clearSelectnresp = function() {
  this.setSelectnresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSelectnresp = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SetSettingsReq setSettingsReq = 16;
 * @return {?proto.SetSettingsReq}
 */
proto.ClientToGREMessage.prototype.getSetsettingsreq = function() {
  return /** @type{?proto.SetSettingsReq} */ (
    jspb.Message.getWrapperField(this, proto.SetSettingsReq, 16));
};


/** @param {?proto.SetSettingsReq|undefined} value */
proto.ClientToGREMessage.prototype.setSetsettingsreq = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.ClientToGREMessage.prototype.clearSetsettingsreq = function() {
  this.setSetsettingsreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSetsettingsreq = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ChooseStartingPlayerResp chooseStartingPlayerResp = 21;
 * @return {?proto.ChooseStartingPlayerResp}
 */
proto.ClientToGREMessage.prototype.getChoosestartingplayerresp = function() {
  return /** @type{?proto.ChooseStartingPlayerResp} */ (
    jspb.Message.getWrapperField(this, proto.ChooseStartingPlayerResp, 21));
};


/** @param {?proto.ChooseStartingPlayerResp|undefined} value */
proto.ClientToGREMessage.prototype.setChoosestartingplayerresp = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.ClientToGREMessage.prototype.clearChoosestartingplayerresp = function() {
  this.setChoosestartingplayerresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasChoosestartingplayerresp = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional DeclareAttackersResp declareAttackersResp = 22;
 * @return {?proto.DeclareAttackersResp}
 */
proto.ClientToGREMessage.prototype.getDeclareattackersresp = function() {
  return /** @type{?proto.DeclareAttackersResp} */ (
    jspb.Message.getWrapperField(this, proto.DeclareAttackersResp, 22));
};


/** @param {?proto.DeclareAttackersResp|undefined} value */
proto.ClientToGREMessage.prototype.setDeclareattackersresp = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.ClientToGREMessage.prototype.clearDeclareattackersresp = function() {
  this.setDeclareattackersresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasDeclareattackersresp = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional DeclareBlockersResp declareBlockersResp = 23;
 * @return {?proto.DeclareBlockersResp}
 */
proto.ClientToGREMessage.prototype.getDeclareblockersresp = function() {
  return /** @type{?proto.DeclareBlockersResp} */ (
    jspb.Message.getWrapperField(this, proto.DeclareBlockersResp, 23));
};


/** @param {?proto.DeclareBlockersResp|undefined} value */
proto.ClientToGREMessage.prototype.setDeclareblockersresp = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.ClientToGREMessage.prototype.clearDeclareblockersresp = function() {
  this.setDeclareblockersresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasDeclareblockersresp = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional OrderCombatDamageResp orderCombatDamageResp = 24;
 * @return {?proto.OrderCombatDamageResp}
 */
proto.ClientToGREMessage.prototype.getOrdercombatdamageresp = function() {
  return /** @type{?proto.OrderCombatDamageResp} */ (
    jspb.Message.getWrapperField(this, proto.OrderCombatDamageResp, 24));
};


/** @param {?proto.OrderCombatDamageResp|undefined} value */
proto.ClientToGREMessage.prototype.setOrdercombatdamageresp = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.ClientToGREMessage.prototype.clearOrdercombatdamageresp = function() {
  this.setOrdercombatdamageresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasOrdercombatdamageresp = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional AssignDamageResp assignDamageResp = 25;
 * @return {?proto.AssignDamageResp}
 */
proto.ClientToGREMessage.prototype.getAssigndamageresp = function() {
  return /** @type{?proto.AssignDamageResp} */ (
    jspb.Message.getWrapperField(this, proto.AssignDamageResp, 25));
};


/** @param {?proto.AssignDamageResp|undefined} value */
proto.ClientToGREMessage.prototype.setAssigndamageresp = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.ClientToGREMessage.prototype.clearAssigndamageresp = function() {
  this.setAssigndamageresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasAssigndamageresp = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional SelectTargetsResp selectTargetsResp = 26;
 * @return {?proto.SelectTargetsResp}
 */
proto.ClientToGREMessage.prototype.getSelecttargetsresp = function() {
  return /** @type{?proto.SelectTargetsResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectTargetsResp, 26));
};


/** @param {?proto.SelectTargetsResp|undefined} value */
proto.ClientToGREMessage.prototype.setSelecttargetsresp = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.ClientToGREMessage.prototype.clearSelecttargetsresp = function() {
  this.setSelecttargetsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSelecttargetsresp = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional SelectReplacementResp selectReplacementResp = 27;
 * @return {?proto.SelectReplacementResp}
 */
proto.ClientToGREMessage.prototype.getSelectreplacementresp = function() {
  return /** @type{?proto.SelectReplacementResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectReplacementResp, 27));
};


/** @param {?proto.SelectReplacementResp|undefined} value */
proto.ClientToGREMessage.prototype.setSelectreplacementresp = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.ClientToGREMessage.prototype.clearSelectreplacementresp = function() {
  this.setSelectreplacementresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSelectreplacementresp = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional SelectNGroupResp selectNGroupResp = 28;
 * @return {?proto.SelectNGroupResp}
 */
proto.ClientToGREMessage.prototype.getSelectngroupresp = function() {
  return /** @type{?proto.SelectNGroupResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectNGroupResp, 28));
};


/** @param {?proto.SelectNGroupResp|undefined} value */
proto.ClientToGREMessage.prototype.setSelectngroupresp = function(value) {
  jspb.Message.setWrapperField(this, 28, value);
};


proto.ClientToGREMessage.prototype.clearSelectngroupresp = function() {
  this.setSelectngroupresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSelectngroupresp = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional AlternativeCostResp alternativeCostResp = 29;
 * @return {?proto.AlternativeCostResp}
 */
proto.ClientToGREMessage.prototype.getAlternativecostresp = function() {
  return /** @type{?proto.AlternativeCostResp} */ (
    jspb.Message.getWrapperField(this, proto.AlternativeCostResp, 29));
};


/** @param {?proto.AlternativeCostResp|undefined} value */
proto.ClientToGREMessage.prototype.setAlternativecostresp = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.ClientToGREMessage.prototype.clearAlternativecostresp = function() {
  this.setAlternativecostresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasAlternativecostresp = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional DistributionResp distributionResp = 30;
 * @return {?proto.DistributionResp}
 */
proto.ClientToGREMessage.prototype.getDistributionresp = function() {
  return /** @type{?proto.DistributionResp} */ (
    jspb.Message.getWrapperField(this, proto.DistributionResp, 30));
};


/** @param {?proto.DistributionResp|undefined} value */
proto.ClientToGREMessage.prototype.setDistributionresp = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.ClientToGREMessage.prototype.clearDistributionresp = function() {
  this.setDistributionresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasDistributionresp = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional NumericInputResp numericInputResp = 31;
 * @return {?proto.NumericInputResp}
 */
proto.ClientToGREMessage.prototype.getNumericinputresp = function() {
  return /** @type{?proto.NumericInputResp} */ (
    jspb.Message.getWrapperField(this, proto.NumericInputResp, 31));
};


/** @param {?proto.NumericInputResp|undefined} value */
proto.ClientToGREMessage.prototype.setNumericinputresp = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.ClientToGREMessage.prototype.clearNumericinputresp = function() {
  this.setNumericinputresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasNumericinputresp = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional SearchResp searchResp = 32;
 * @return {?proto.SearchResp}
 */
proto.ClientToGREMessage.prototype.getSearchresp = function() {
  return /** @type{?proto.SearchResp} */ (
    jspb.Message.getWrapperField(this, proto.SearchResp, 32));
};


/** @param {?proto.SearchResp|undefined} value */
proto.ClientToGREMessage.prototype.setSearchresp = function(value) {
  jspb.Message.setWrapperField(this, 32, value);
};


proto.ClientToGREMessage.prototype.clearSearchresp = function() {
  this.setSearchresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSearchresp = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional ActionCostResp actionCostResp = 33;
 * @return {?proto.ActionCostResp}
 */
proto.ClientToGREMessage.prototype.getActioncostresp = function() {
  return /** @type{?proto.ActionCostResp} */ (
    jspb.Message.getWrapperField(this, proto.ActionCostResp, 33));
};


/** @param {?proto.ActionCostResp|undefined} value */
proto.ClientToGREMessage.prototype.setActioncostresp = function(value) {
  jspb.Message.setWrapperField(this, 33, value);
};


proto.ClientToGREMessage.prototype.clearActioncostresp = function() {
  this.setActioncostresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasActioncostresp = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional CastingTimeOptionsResp castingTimeOptionsResp = 34;
 * @return {?proto.CastingTimeOptionsResp}
 */
proto.ClientToGREMessage.prototype.getCastingtimeoptionsresp = function() {
  return /** @type{?proto.CastingTimeOptionsResp} */ (
    jspb.Message.getWrapperField(this, proto.CastingTimeOptionsResp, 34));
};


/** @param {?proto.CastingTimeOptionsResp|undefined} value */
proto.ClientToGREMessage.prototype.setCastingtimeoptionsresp = function(value) {
  jspb.Message.setWrapperField(this, 34, value);
};


proto.ClientToGREMessage.prototype.clearCastingtimeoptionsresp = function() {
  this.setCastingtimeoptionsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasCastingtimeoptionsresp = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional SelectManaTypeResp selectManaTypeResp = 35;
 * @return {?proto.SelectManaTypeResp}
 */
proto.ClientToGREMessage.prototype.getSelectmanatyperesp = function() {
  return /** @type{?proto.SelectManaTypeResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectManaTypeResp, 35));
};


/** @param {?proto.SelectManaTypeResp|undefined} value */
proto.ClientToGREMessage.prototype.setSelectmanatyperesp = function(value) {
  jspb.Message.setWrapperField(this, 35, value);
};


proto.ClientToGREMessage.prototype.clearSelectmanatyperesp = function() {
  this.setSelectmanatyperesp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSelectmanatyperesp = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional SelectFromGroupsResp selectFromGroupsResp = 36;
 * @return {?proto.SelectFromGroupsResp}
 */
proto.ClientToGREMessage.prototype.getSelectfromgroupsresp = function() {
  return /** @type{?proto.SelectFromGroupsResp} */ (
    jspb.Message.getWrapperField(this, proto.SelectFromGroupsResp, 36));
};


/** @param {?proto.SelectFromGroupsResp|undefined} value */
proto.ClientToGREMessage.prototype.setSelectfromgroupsresp = function(value) {
  jspb.Message.setWrapperField(this, 36, value);
};


proto.ClientToGREMessage.prototype.clearSelectfromgroupsresp = function() {
  this.setSelectfromgroupsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSelectfromgroupsresp = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional SearchFromGroupsResp searchFromGroupsResp = 37;
 * @return {?proto.SearchFromGroupsResp}
 */
proto.ClientToGREMessage.prototype.getSearchfromgroupsresp = function() {
  return /** @type{?proto.SearchFromGroupsResp} */ (
    jspb.Message.getWrapperField(this, proto.SearchFromGroupsResp, 37));
};


/** @param {?proto.SearchFromGroupsResp|undefined} value */
proto.ClientToGREMessage.prototype.setSearchfromgroupsresp = function(value) {
  jspb.Message.setWrapperField(this, 37, value);
};


proto.ClientToGREMessage.prototype.clearSearchfromgroupsresp = function() {
  this.setSearchfromgroupsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSearchfromgroupsresp = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional GatherResp gatherResp = 38;
 * @return {?proto.GatherResp}
 */
proto.ClientToGREMessage.prototype.getGatherresp = function() {
  return /** @type{?proto.GatherResp} */ (
    jspb.Message.getWrapperField(this, proto.GatherResp, 38));
};


/** @param {?proto.GatherResp|undefined} value */
proto.ClientToGREMessage.prototype.setGatherresp = function(value) {
  jspb.Message.setWrapperField(this, 38, value);
};


proto.ClientToGREMessage.prototype.clearGatherresp = function() {
  this.setGatherresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasGatherresp = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional SubmitPaymentResp submitPaymentResp = 39;
 * @return {?proto.SubmitPaymentResp}
 */
proto.ClientToGREMessage.prototype.getSubmitpaymentresp = function() {
  return /** @type{?proto.SubmitPaymentResp} */ (
    jspb.Message.getWrapperField(this, proto.SubmitPaymentResp, 39));
};


/** @param {?proto.SubmitPaymentResp|undefined} value */
proto.ClientToGREMessage.prototype.setSubmitpaymentresp = function(value) {
  jspb.Message.setWrapperField(this, 39, value);
};


proto.ClientToGREMessage.prototype.clearSubmitpaymentresp = function() {
  this.setSubmitpaymentresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSubmitpaymentresp = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional UIMessage uiMessage = 40;
 * @return {?proto.UIMessage}
 */
proto.ClientToGREMessage.prototype.getUimessage = function() {
  return /** @type{?proto.UIMessage} */ (
    jspb.Message.getWrapperField(this, proto.UIMessage, 40));
};


/** @param {?proto.UIMessage|undefined} value */
proto.ClientToGREMessage.prototype.setUimessage = function(value) {
  jspb.Message.setWrapperField(this, 40, value);
};


proto.ClientToGREMessage.prototype.clearUimessage = function() {
  this.setUimessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasUimessage = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional SubmitDeckResp submitDeckResp = 41;
 * @return {?proto.SubmitDeckResp}
 */
proto.ClientToGREMessage.prototype.getSubmitdeckresp = function() {
  return /** @type{?proto.SubmitDeckResp} */ (
    jspb.Message.getWrapperField(this, proto.SubmitDeckResp, 41));
};


/** @param {?proto.SubmitDeckResp|undefined} value */
proto.ClientToGREMessage.prototype.setSubmitdeckresp = function(value) {
  jspb.Message.setWrapperField(this, 41, value);
};


proto.ClientToGREMessage.prototype.clearSubmitdeckresp = function() {
  this.setSubmitdeckresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasSubmitdeckresp = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional ControlReq controlReq = 42;
 * @return {?proto.ControlReq}
 */
proto.ClientToGREMessage.prototype.getControlreq = function() {
  return /** @type{?proto.ControlReq} */ (
    jspb.Message.getWrapperField(this, proto.ControlReq, 42));
};


/** @param {?proto.ControlReq|undefined} value */
proto.ClientToGREMessage.prototype.setControlreq = function(value) {
  jspb.Message.setWrapperField(this, 42, value);
};


proto.ClientToGREMessage.prototype.clearControlreq = function() {
  this.setControlreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToGREMessage.prototype.hasControlreq = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional uint32 timerId = 100;
 * @return {number}
 */
proto.ClientToGREMessage.prototype.getTimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.ClientToGREMessage.prototype.setTimerid = function(value) {
  jspb.Message.setProto3IntField(this, 100, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientToLapaMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientToLapaMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientToLapaMessage.displayName = 'proto.ClientToLapaMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientToLapaMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientToLapaMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientToLapaMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToLapaMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientToLapaMessage}
 */
proto.ClientToLapaMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientToLapaMessage;
  return proto.ClientToLapaMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientToLapaMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientToLapaMessage}
 */
proto.ClientToLapaMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientToLapaMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientToLapaMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientToLapaMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToLapaMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string payload = 1;
 * @return {string}
 */
proto.ClientToLapaMessage.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientToLapaMessage.prototype.setPayload = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientToLobbyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.ClientToLobbyMessage.oneofGroups_);
};
goog.inherits(proto.ClientToLobbyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientToLobbyMessage.displayName = 'proto.ClientToLobbyMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientToLobbyMessage.oneofGroups_ = [[100,101,102,110,111,112,200,201,202,203,204,205,206,400,1000]];

/**
 * @enum {number}
 */
proto.ClientToLobbyMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  AUTHENTICATEREQUEST: 100,
  SERVICEINFOREQUEST: 101,
  CLIENTSESSIONINFO: 102,
  GETUSERIDSREQUEST: 110,
  GETUSERINFOREQUEST: 111,
  CLEARLOBBYUSERSTATUSREQUEST: 112,
  JOINQUEUEREQUEST: 200,
  DROPQUEUEREQUEST: 201,
  DELETEQUEUEREQUEST: 202,
  JOINMATCHMAKINGREQUESTV2: 203,
  DROPMATCHMAKINGREQUESTV2: 204,
  JOINCONSTRUCTEDMATCHMAKINGREQUEST: 205,
  DROPCONSTRUCTEDMATCHMAKINGREQUEST: 206,
  MATCHSERVICETOCLIENTMESSAGE: 400,
  ECHOREQUEST: 1000
};

/**
 * @return {proto.ClientToLobbyMessage.MessageCase}
 */
proto.ClientToLobbyMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ClientToLobbyMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ClientToLobbyMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientToLobbyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientToLobbyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientToLobbyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToLobbyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    correlationinfo: (f = msg.getCorrelationinfo()) && proto.CorrelationInfo.toObject(includeInstance, f),
    authenticaterequest: (f = msg.getAuthenticaterequest()) && proto.AuthenticateRequest.toObject(includeInstance, f),
    serviceinforequest: (f = msg.getServiceinforequest()) && proto.ServiceInfoRequest.toObject(includeInstance, f),
    clientsessioninfo: (f = msg.getClientsessioninfo()) && proto.ClientSessionInfo.toObject(includeInstance, f),
    getuseridsrequest: (f = msg.getGetuseridsrequest()) && proto.GetLobbyUserIdsRequest.toObject(includeInstance, f),
    getuserinforequest: (f = msg.getGetuserinforequest()) && proto.GetLobbyUserInfoRequest.toObject(includeInstance, f),
    clearlobbyuserstatusrequest: (f = msg.getClearlobbyuserstatusrequest()) && proto.ClearLobbyUserStatusRequest.toObject(includeInstance, f),
    joinqueuerequest: (f = msg.getJoinqueuerequest()) && proto.JoinQueueRequest.toObject(includeInstance, f),
    dropqueuerequest: (f = msg.getDropqueuerequest()) && proto.DropQueueRequest.toObject(includeInstance, f),
    deletequeuerequest: (f = msg.getDeletequeuerequest()) && proto.DeleteQueueRequest.toObject(includeInstance, f),
    joinmatchmakingrequestv2: (f = msg.getJoinmatchmakingrequestv2()) && proto.JoinMatchmakingRequestV2.toObject(includeInstance, f),
    dropmatchmakingrequestv2: (f = msg.getDropmatchmakingrequestv2()) && proto.DropMatchmakingRequestV2.toObject(includeInstance, f),
    joinconstructedmatchmakingrequest: (f = msg.getJoinconstructedmatchmakingrequest()) && proto.JoinConstructedMatchmakingRequest.toObject(includeInstance, f),
    dropconstructedmatchmakingrequest: (f = msg.getDropconstructedmatchmakingrequest()) && proto.DropConstructedMatchmakingRequest.toObject(includeInstance, f),
    matchservicetoclientmessage: (f = msg.getMatchservicetoclientmessage()) && proto.MatchServiceToClientMessage.toObject(includeInstance, f),
    echorequest: (f = msg.getEchorequest()) && proto.EchoRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientToLobbyMessage}
 */
proto.ClientToLobbyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientToLobbyMessage;
  return proto.ClientToLobbyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientToLobbyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientToLobbyMessage}
 */
proto.ClientToLobbyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new proto.CorrelationInfo;
      reader.readMessage(value,proto.CorrelationInfo.deserializeBinaryFromReader);
      msg.setCorrelationinfo(value);
      break;
    case 100:
      var value = new proto.AuthenticateRequest;
      reader.readMessage(value,proto.AuthenticateRequest.deserializeBinaryFromReader);
      msg.setAuthenticaterequest(value);
      break;
    case 101:
      var value = new proto.ServiceInfoRequest;
      reader.readMessage(value,proto.ServiceInfoRequest.deserializeBinaryFromReader);
      msg.setServiceinforequest(value);
      break;
    case 102:
      var value = new proto.ClientSessionInfo;
      reader.readMessage(value,proto.ClientSessionInfo.deserializeBinaryFromReader);
      msg.setClientsessioninfo(value);
      break;
    case 110:
      var value = new proto.GetLobbyUserIdsRequest;
      reader.readMessage(value,proto.GetLobbyUserIdsRequest.deserializeBinaryFromReader);
      msg.setGetuseridsrequest(value);
      break;
    case 111:
      var value = new proto.GetLobbyUserInfoRequest;
      reader.readMessage(value,proto.GetLobbyUserInfoRequest.deserializeBinaryFromReader);
      msg.setGetuserinforequest(value);
      break;
    case 112:
      var value = new proto.ClearLobbyUserStatusRequest;
      reader.readMessage(value,proto.ClearLobbyUserStatusRequest.deserializeBinaryFromReader);
      msg.setClearlobbyuserstatusrequest(value);
      break;
    case 200:
      var value = new proto.JoinQueueRequest;
      reader.readMessage(value,proto.JoinQueueRequest.deserializeBinaryFromReader);
      msg.setJoinqueuerequest(value);
      break;
    case 201:
      var value = new proto.DropQueueRequest;
      reader.readMessage(value,proto.DropQueueRequest.deserializeBinaryFromReader);
      msg.setDropqueuerequest(value);
      break;
    case 202:
      var value = new proto.DeleteQueueRequest;
      reader.readMessage(value,proto.DeleteQueueRequest.deserializeBinaryFromReader);
      msg.setDeletequeuerequest(value);
      break;
    case 203:
      var value = new proto.JoinMatchmakingRequestV2;
      reader.readMessage(value,proto.JoinMatchmakingRequestV2.deserializeBinaryFromReader);
      msg.setJoinmatchmakingrequestv2(value);
      break;
    case 204:
      var value = new proto.DropMatchmakingRequestV2;
      reader.readMessage(value,proto.DropMatchmakingRequestV2.deserializeBinaryFromReader);
      msg.setDropmatchmakingrequestv2(value);
      break;
    case 205:
      var value = new proto.JoinConstructedMatchmakingRequest;
      reader.readMessage(value,proto.JoinConstructedMatchmakingRequest.deserializeBinaryFromReader);
      msg.setJoinconstructedmatchmakingrequest(value);
      break;
    case 206:
      var value = new proto.DropConstructedMatchmakingRequest;
      reader.readMessage(value,proto.DropConstructedMatchmakingRequest.deserializeBinaryFromReader);
      msg.setDropconstructedmatchmakingrequest(value);
      break;
    case 400:
      var value = new proto.MatchServiceToClientMessage;
      reader.readMessage(value,proto.MatchServiceToClientMessage.deserializeBinaryFromReader);
      msg.setMatchservicetoclientmessage(value);
      break;
    case 1000:
      var value = new proto.EchoRequest;
      reader.readMessage(value,proto.EchoRequest.deserializeBinaryFromReader);
      msg.setEchorequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientToLobbyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientToLobbyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientToLobbyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToLobbyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCorrelationinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.CorrelationInfo.serializeBinaryToWriter
    );
  }
  f = message.getAuthenticaterequest();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.AuthenticateRequest.serializeBinaryToWriter
    );
  }
  f = message.getServiceinforequest();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.ServiceInfoRequest.serializeBinaryToWriter
    );
  }
  f = message.getClientsessioninfo();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.ClientSessionInfo.serializeBinaryToWriter
    );
  }
  f = message.getGetuseridsrequest();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.GetLobbyUserIdsRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetuserinforequest();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.GetLobbyUserInfoRequest.serializeBinaryToWriter
    );
  }
  f = message.getClearlobbyuserstatusrequest();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.ClearLobbyUserStatusRequest.serializeBinaryToWriter
    );
  }
  f = message.getJoinqueuerequest();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.JoinQueueRequest.serializeBinaryToWriter
    );
  }
  f = message.getDropqueuerequest();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.DropQueueRequest.serializeBinaryToWriter
    );
  }
  f = message.getDeletequeuerequest();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.DeleteQueueRequest.serializeBinaryToWriter
    );
  }
  f = message.getJoinmatchmakingrequestv2();
  if (f != null) {
    writer.writeMessage(
      203,
      f,
      proto.JoinMatchmakingRequestV2.serializeBinaryToWriter
    );
  }
  f = message.getDropmatchmakingrequestv2();
  if (f != null) {
    writer.writeMessage(
      204,
      f,
      proto.DropMatchmakingRequestV2.serializeBinaryToWriter
    );
  }
  f = message.getJoinconstructedmatchmakingrequest();
  if (f != null) {
    writer.writeMessage(
      205,
      f,
      proto.JoinConstructedMatchmakingRequest.serializeBinaryToWriter
    );
  }
  f = message.getDropconstructedmatchmakingrequest();
  if (f != null) {
    writer.writeMessage(
      206,
      f,
      proto.DropConstructedMatchmakingRequest.serializeBinaryToWriter
    );
  }
  f = message.getMatchservicetoclientmessage();
  if (f != null) {
    writer.writeMessage(
      400,
      f,
      proto.MatchServiceToClientMessage.serializeBinaryToWriter
    );
  }
  f = message.getEchorequest();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.EchoRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.ClientToLobbyMessage.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientToLobbyMessage.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 requestId = 2;
 * @return {number}
 */
proto.ClientToLobbyMessage.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ClientToLobbyMessage.prototype.setRequestid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.ClientToLobbyMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientToLobbyMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CorrelationInfo correlationInfo = 4;
 * @return {?proto.CorrelationInfo}
 */
proto.ClientToLobbyMessage.prototype.getCorrelationinfo = function() {
  return /** @type{?proto.CorrelationInfo} */ (
    jspb.Message.getWrapperField(this, proto.CorrelationInfo, 4));
};


/** @param {?proto.CorrelationInfo|undefined} value */
proto.ClientToLobbyMessage.prototype.setCorrelationinfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ClientToLobbyMessage.prototype.clearCorrelationinfo = function() {
  this.setCorrelationinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasCorrelationinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AuthenticateRequest authenticateRequest = 100;
 * @return {?proto.AuthenticateRequest}
 */
proto.ClientToLobbyMessage.prototype.getAuthenticaterequest = function() {
  return /** @type{?proto.AuthenticateRequest} */ (
    jspb.Message.getWrapperField(this, proto.AuthenticateRequest, 100));
};


/** @param {?proto.AuthenticateRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setAuthenticaterequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearAuthenticaterequest = function() {
  this.setAuthenticaterequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasAuthenticaterequest = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional ServiceInfoRequest serviceInfoRequest = 101;
 * @return {?proto.ServiceInfoRequest}
 */
proto.ClientToLobbyMessage.prototype.getServiceinforequest = function() {
  return /** @type{?proto.ServiceInfoRequest} */ (
    jspb.Message.getWrapperField(this, proto.ServiceInfoRequest, 101));
};


/** @param {?proto.ServiceInfoRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setServiceinforequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearServiceinforequest = function() {
  this.setServiceinforequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasServiceinforequest = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional ClientSessionInfo clientSessionInfo = 102;
 * @return {?proto.ClientSessionInfo}
 */
proto.ClientToLobbyMessage.prototype.getClientsessioninfo = function() {
  return /** @type{?proto.ClientSessionInfo} */ (
    jspb.Message.getWrapperField(this, proto.ClientSessionInfo, 102));
};


/** @param {?proto.ClientSessionInfo|undefined} value */
proto.ClientToLobbyMessage.prototype.setClientsessioninfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 102, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearClientsessioninfo = function() {
  this.setClientsessioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasClientsessioninfo = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional GetLobbyUserIdsRequest getUserIdsRequest = 110;
 * @return {?proto.GetLobbyUserIdsRequest}
 */
proto.ClientToLobbyMessage.prototype.getGetuseridsrequest = function() {
  return /** @type{?proto.GetLobbyUserIdsRequest} */ (
    jspb.Message.getWrapperField(this, proto.GetLobbyUserIdsRequest, 110));
};


/** @param {?proto.GetLobbyUserIdsRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setGetuseridsrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 110, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearGetuseridsrequest = function() {
  this.setGetuseridsrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasGetuseridsrequest = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional GetLobbyUserInfoRequest getUserInfoRequest = 111;
 * @return {?proto.GetLobbyUserInfoRequest}
 */
proto.ClientToLobbyMessage.prototype.getGetuserinforequest = function() {
  return /** @type{?proto.GetLobbyUserInfoRequest} */ (
    jspb.Message.getWrapperField(this, proto.GetLobbyUserInfoRequest, 111));
};


/** @param {?proto.GetLobbyUserInfoRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setGetuserinforequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 111, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearGetuserinforequest = function() {
  this.setGetuserinforequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasGetuserinforequest = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional ClearLobbyUserStatusRequest clearLobbyUserStatusRequest = 112;
 * @return {?proto.ClearLobbyUserStatusRequest}
 */
proto.ClientToLobbyMessage.prototype.getClearlobbyuserstatusrequest = function() {
  return /** @type{?proto.ClearLobbyUserStatusRequest} */ (
    jspb.Message.getWrapperField(this, proto.ClearLobbyUserStatusRequest, 112));
};


/** @param {?proto.ClearLobbyUserStatusRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setClearlobbyuserstatusrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 112, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearClearlobbyuserstatusrequest = function() {
  this.setClearlobbyuserstatusrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasClearlobbyuserstatusrequest = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional JoinQueueRequest joinQueueRequest = 200;
 * @return {?proto.JoinQueueRequest}
 */
proto.ClientToLobbyMessage.prototype.getJoinqueuerequest = function() {
  return /** @type{?proto.JoinQueueRequest} */ (
    jspb.Message.getWrapperField(this, proto.JoinQueueRequest, 200));
};


/** @param {?proto.JoinQueueRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setJoinqueuerequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 200, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearJoinqueuerequest = function() {
  this.setJoinqueuerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasJoinqueuerequest = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional DropQueueRequest dropQueueRequest = 201;
 * @return {?proto.DropQueueRequest}
 */
proto.ClientToLobbyMessage.prototype.getDropqueuerequest = function() {
  return /** @type{?proto.DropQueueRequest} */ (
    jspb.Message.getWrapperField(this, proto.DropQueueRequest, 201));
};


/** @param {?proto.DropQueueRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setDropqueuerequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearDropqueuerequest = function() {
  this.setDropqueuerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasDropqueuerequest = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional DeleteQueueRequest deleteQueueRequest = 202;
 * @return {?proto.DeleteQueueRequest}
 */
proto.ClientToLobbyMessage.prototype.getDeletequeuerequest = function() {
  return /** @type{?proto.DeleteQueueRequest} */ (
    jspb.Message.getWrapperField(this, proto.DeleteQueueRequest, 202));
};


/** @param {?proto.DeleteQueueRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setDeletequeuerequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 202, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearDeletequeuerequest = function() {
  this.setDeletequeuerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasDeletequeuerequest = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional JoinMatchmakingRequestV2 joinMatchmakingRequestV2 = 203;
 * @return {?proto.JoinMatchmakingRequestV2}
 */
proto.ClientToLobbyMessage.prototype.getJoinmatchmakingrequestv2 = function() {
  return /** @type{?proto.JoinMatchmakingRequestV2} */ (
    jspb.Message.getWrapperField(this, proto.JoinMatchmakingRequestV2, 203));
};


/** @param {?proto.JoinMatchmakingRequestV2|undefined} value */
proto.ClientToLobbyMessage.prototype.setJoinmatchmakingrequestv2 = function(value) {
  jspb.Message.setOneofWrapperField(this, 203, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearJoinmatchmakingrequestv2 = function() {
  this.setJoinmatchmakingrequestv2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasJoinmatchmakingrequestv2 = function() {
  return jspb.Message.getField(this, 203) != null;
};


/**
 * optional DropMatchmakingRequestV2 dropMatchmakingRequestV2 = 204;
 * @return {?proto.DropMatchmakingRequestV2}
 */
proto.ClientToLobbyMessage.prototype.getDropmatchmakingrequestv2 = function() {
  return /** @type{?proto.DropMatchmakingRequestV2} */ (
    jspb.Message.getWrapperField(this, proto.DropMatchmakingRequestV2, 204));
};


/** @param {?proto.DropMatchmakingRequestV2|undefined} value */
proto.ClientToLobbyMessage.prototype.setDropmatchmakingrequestv2 = function(value) {
  jspb.Message.setOneofWrapperField(this, 204, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearDropmatchmakingrequestv2 = function() {
  this.setDropmatchmakingrequestv2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasDropmatchmakingrequestv2 = function() {
  return jspb.Message.getField(this, 204) != null;
};


/**
 * optional JoinConstructedMatchmakingRequest joinConstructedMatchmakingRequest = 205;
 * @return {?proto.JoinConstructedMatchmakingRequest}
 */
proto.ClientToLobbyMessage.prototype.getJoinconstructedmatchmakingrequest = function() {
  return /** @type{?proto.JoinConstructedMatchmakingRequest} */ (
    jspb.Message.getWrapperField(this, proto.JoinConstructedMatchmakingRequest, 205));
};


/** @param {?proto.JoinConstructedMatchmakingRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setJoinconstructedmatchmakingrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 205, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearJoinconstructedmatchmakingrequest = function() {
  this.setJoinconstructedmatchmakingrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasJoinconstructedmatchmakingrequest = function() {
  return jspb.Message.getField(this, 205) != null;
};


/**
 * optional DropConstructedMatchmakingRequest dropConstructedMatchmakingRequest = 206;
 * @return {?proto.DropConstructedMatchmakingRequest}
 */
proto.ClientToLobbyMessage.prototype.getDropconstructedmatchmakingrequest = function() {
  return /** @type{?proto.DropConstructedMatchmakingRequest} */ (
    jspb.Message.getWrapperField(this, proto.DropConstructedMatchmakingRequest, 206));
};


/** @param {?proto.DropConstructedMatchmakingRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setDropconstructedmatchmakingrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 206, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearDropconstructedmatchmakingrequest = function() {
  this.setDropconstructedmatchmakingrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasDropconstructedmatchmakingrequest = function() {
  return jspb.Message.getField(this, 206) != null;
};


/**
 * optional MatchServiceToClientMessage matchServiceToClientMessage = 400;
 * @return {?proto.MatchServiceToClientMessage}
 */
proto.ClientToLobbyMessage.prototype.getMatchservicetoclientmessage = function() {
  return /** @type{?proto.MatchServiceToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.MatchServiceToClientMessage, 400));
};


/** @param {?proto.MatchServiceToClientMessage|undefined} value */
proto.ClientToLobbyMessage.prototype.setMatchservicetoclientmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 400, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearMatchservicetoclientmessage = function() {
  this.setMatchservicetoclientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasMatchservicetoclientmessage = function() {
  return jspb.Message.getField(this, 400) != null;
};


/**
 * optional EchoRequest echoRequest = 1000;
 * @return {?proto.EchoRequest}
 */
proto.ClientToLobbyMessage.prototype.getEchorequest = function() {
  return /** @type{?proto.EchoRequest} */ (
    jspb.Message.getWrapperField(this, proto.EchoRequest, 1000));
};


/** @param {?proto.EchoRequest|undefined} value */
proto.ClientToLobbyMessage.prototype.setEchorequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1000, proto.ClientToLobbyMessage.oneofGroups_[0], value);
};


proto.ClientToLobbyMessage.prototype.clearEchorequest = function() {
  this.setEchorequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToLobbyMessage.prototype.hasEchorequest = function() {
  return jspb.Message.getField(this, 1000) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientToMatchDoorConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientToMatchDoorConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientToMatchDoorConnectRequest.displayName = 'proto.ClientToMatchDoorConnectRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientToMatchDoorConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientToMatchDoorConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientToMatchDoorConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToMatchDoorConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mcfabricuri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clienttogremessagebytes: msg.getClienttogremessagebytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientToMatchDoorConnectRequest}
 */
proto.ClientToMatchDoorConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientToMatchDoorConnectRequest;
  return proto.ClientToMatchDoorConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientToMatchDoorConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientToMatchDoorConnectRequest}
 */
proto.ClientToMatchDoorConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcfabricuri(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClienttogremessagebytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientToMatchDoorConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientToMatchDoorConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientToMatchDoorConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToMatchDoorConnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMcfabricuri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClienttogremessagebytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional string matchId = 1;
 * @return {string}
 */
proto.ClientToMatchDoorConnectRequest.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientToMatchDoorConnectRequest.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mcFabricUri = 2;
 * @return {string}
 */
proto.ClientToMatchDoorConnectRequest.prototype.getMcfabricuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientToMatchDoorConnectRequest.prototype.setMcfabricuri = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes clientToGreMessageBytes = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ClientToMatchDoorConnectRequest.prototype.getClienttogremessagebytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes clientToGreMessageBytes = 10;
 * This is a type-conversion wrapper around `getClienttogremessagebytes()`
 * @return {string}
 */
proto.ClientToMatchDoorConnectRequest.prototype.getClienttogremessagebytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClienttogremessagebytes()));
};


/**
 * optional bytes clientToGreMessageBytes = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClienttogremessagebytes()`
 * @return {!Uint8Array}
 */
proto.ClientToMatchDoorConnectRequest.prototype.getClienttogremessagebytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClienttogremessagebytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.ClientToMatchDoorConnectRequest.prototype.setClienttogremessagebytes = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientToMatchServiceMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientToMatchServiceMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientToMatchServiceMessage.displayName = 'proto.ClientToMatchServiceMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientToMatchServiceMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientToMatchServiceMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientToMatchServiceMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToMatchServiceMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    payload: msg.getPayload_asB64(),
    requestid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clienttomatchservicemessagetype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientToMatchServiceMessage}
 */
proto.ClientToMatchServiceMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientToMatchServiceMessage;
  return proto.ClientToMatchServiceMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientToMatchServiceMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientToMatchServiceMessage}
 */
proto.ClientToMatchServiceMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionid(value);
      break;
    case 100:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {!proto.ClientToMatchServiceMessageType} */ (reader.readEnum());
      msg.setClienttomatchservicemessagetype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientToMatchServiceMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientToMatchServiceMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientToMatchServiceMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToMatchServiceMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      100,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClienttomatchservicemessagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string transactionId = 4;
 * @return {string}
 */
proto.ClientToMatchServiceMessage.prototype.getTransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ClientToMatchServiceMessage.prototype.setTransactionid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes payload = 100;
 * @return {!(string|Uint8Array)}
 */
proto.ClientToMatchServiceMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * optional bytes payload = 100;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.ClientToMatchServiceMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 100;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.ClientToMatchServiceMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.ClientToMatchServiceMessage.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 100, value);
};


/**
 * optional int32 requestId = 1;
 * @return {number}
 */
proto.ClientToMatchServiceMessage.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientToMatchServiceMessage.prototype.setRequestid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ClientToMatchServiceMessageType clientToMatchServiceMessageType = 2;
 * @return {!proto.ClientToMatchServiceMessageType}
 */
proto.ClientToMatchServiceMessage.prototype.getClienttomatchservicemessagetype = function() {
  return /** @type {!proto.ClientToMatchServiceMessageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ClientToMatchServiceMessageType} value */
proto.ClientToMatchServiceMessage.prototype.setClienttomatchservicemessagetype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.ClientToMatchServiceMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientToMatchServiceMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CombatDamageOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CombatDamageOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CombatDamageOrder.displayName = 'proto.CombatDamageOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CombatDamageOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.CombatDamageOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CombatDamageOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CombatDamageOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recipients: (f = msg.getRecipients()) && proto.OrderReq.toObject(includeInstance, f),
    decisionprompt: (f = msg.getDecisionprompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CombatDamageOrder}
 */
proto.CombatDamageOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CombatDamageOrder;
  return proto.CombatDamageOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CombatDamageOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CombatDamageOrder}
 */
proto.CombatDamageOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = new proto.OrderReq;
      reader.readMessage(value,proto.OrderReq.deserializeBinaryFromReader);
      msg.setRecipients(value);
      break;
    case 3:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setDecisionprompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CombatDamageOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CombatDamageOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CombatDamageOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CombatDamageOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRecipients();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OrderReq.serializeBinaryToWriter
    );
  }
  f = message.getDecisionprompt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.CombatDamageOrder.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CombatDamageOrder.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional OrderReq recipients = 2;
 * @return {?proto.OrderReq}
 */
proto.CombatDamageOrder.prototype.getRecipients = function() {
  return /** @type{?proto.OrderReq} */ (
    jspb.Message.getWrapperField(this, proto.OrderReq, 2));
};


/** @param {?proto.OrderReq|undefined} value */
proto.CombatDamageOrder.prototype.setRecipients = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CombatDamageOrder.prototype.clearRecipients = function() {
  this.setRecipients(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CombatDamageOrder.prototype.hasRecipients = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Prompt decisionPrompt = 3;
 * @return {?proto.Prompt}
 */
proto.CombatDamageOrder.prototype.getDecisionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 3));
};


/** @param {?proto.Prompt|undefined} value */
proto.CombatDamageOrder.prototype.setDecisionprompt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.CombatDamageOrder.prototype.clearDecisionprompt = function() {
  this.setDecisionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CombatDamageOrder.prototype.hasDecisionprompt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CombatDamageOrderAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CombatDamageOrderAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CombatDamageOrderAssignment.displayName = 'proto.CombatDamageOrderAssignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CombatDamageOrderAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.CombatDamageOrderAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CombatDamageOrderAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CombatDamageOrderAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recipients: (f = msg.getRecipients()) && proto.OrderResp.toObject(includeInstance, f),
    decisionprompt: (f = msg.getDecisionprompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CombatDamageOrderAssignment}
 */
proto.CombatDamageOrderAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CombatDamageOrderAssignment;
  return proto.CombatDamageOrderAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CombatDamageOrderAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CombatDamageOrderAssignment}
 */
proto.CombatDamageOrderAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = new proto.OrderResp;
      reader.readMessage(value,proto.OrderResp.deserializeBinaryFromReader);
      msg.setRecipients(value);
      break;
    case 3:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setDecisionprompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CombatDamageOrderAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CombatDamageOrderAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CombatDamageOrderAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CombatDamageOrderAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRecipients();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OrderResp.serializeBinaryToWriter
    );
  }
  f = message.getDecisionprompt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.CombatDamageOrderAssignment.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CombatDamageOrderAssignment.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional OrderResp recipients = 2;
 * @return {?proto.OrderResp}
 */
proto.CombatDamageOrderAssignment.prototype.getRecipients = function() {
  return /** @type{?proto.OrderResp} */ (
    jspb.Message.getWrapperField(this, proto.OrderResp, 2));
};


/** @param {?proto.OrderResp|undefined} value */
proto.CombatDamageOrderAssignment.prototype.setRecipients = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CombatDamageOrderAssignment.prototype.clearRecipients = function() {
  this.setRecipients(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CombatDamageOrderAssignment.prototype.hasRecipients = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Prompt decisionPrompt = 3;
 * @return {?proto.Prompt}
 */
proto.CombatDamageOrderAssignment.prototype.getDecisionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 3));
};


/** @param {?proto.Prompt|undefined} value */
proto.CombatDamageOrderAssignment.prototype.setDecisionprompt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.CombatDamageOrderAssignment.prototype.clearDecisionprompt = function() {
  this.setDecisionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CombatDamageOrderAssignment.prototype.hasDecisionprompt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Composite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Composite.oneofGroups_);
};
goog.inherits(proto.Composite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Composite.displayName = 'proto.Composite';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Composite.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Composite.MessageCase = {
  MESSAGE_NOT_SET: 0,
  SEQUENCE: 1,
  SELECTOR: 2,
  PARALLEL: 3
};

/**
 * @return {proto.Composite.MessageCase}
 */
proto.Composite.prototype.getMessageCase = function() {
  return /** @type {proto.Composite.MessageCase} */(jspb.Message.computeOneofCase(this, proto.Composite.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Composite.prototype.toObject = function(opt_includeInstance) {
  return proto.Composite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Composite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Composite.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: (f = msg.getSequence()) && proto.Sequence.toObject(includeInstance, f),
    selector: (f = msg.getSelector()) && proto.Selector.toObject(includeInstance, f),
    parallel: (f = msg.getParallel()) && proto.Parallel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Composite}
 */
proto.Composite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Composite;
  return proto.Composite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Composite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Composite}
 */
proto.Composite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Sequence;
      reader.readMessage(value,proto.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    case 2:
      var value = new proto.Selector;
      reader.readMessage(value,proto.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    case 3:
      var value = new proto.Parallel;
      reader.readMessage(value,proto.Parallel.deserializeBinaryFromReader);
      msg.setParallel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Composite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Composite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Composite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Composite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Selector.serializeBinaryToWriter
    );
  }
  f = message.getParallel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Parallel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Sequence sequence = 1;
 * @return {?proto.Sequence}
 */
proto.Composite.prototype.getSequence = function() {
  return /** @type{?proto.Sequence} */ (
    jspb.Message.getWrapperField(this, proto.Sequence, 1));
};


/** @param {?proto.Sequence|undefined} value */
proto.Composite.prototype.setSequence = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Composite.oneofGroups_[0], value);
};


proto.Composite.prototype.clearSequence = function() {
  this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Composite.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Selector selector = 2;
 * @return {?proto.Selector}
 */
proto.Composite.prototype.getSelector = function() {
  return /** @type{?proto.Selector} */ (
    jspb.Message.getWrapperField(this, proto.Selector, 2));
};


/** @param {?proto.Selector|undefined} value */
proto.Composite.prototype.setSelector = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Composite.oneofGroups_[0], value);
};


proto.Composite.prototype.clearSelector = function() {
  this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Composite.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Parallel parallel = 3;
 * @return {?proto.Parallel}
 */
proto.Composite.prototype.getParallel = function() {
  return /** @type{?proto.Parallel} */ (
    jspb.Message.getWrapperField(this, proto.Parallel, 3));
};


/** @param {?proto.Parallel|undefined} value */
proto.Composite.prototype.setParallel = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Composite.oneofGroups_[0], value);
};


proto.Composite.prototype.clearParallel = function() {
  this.setParallel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Composite.prototype.hasParallel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConcedeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConcedeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConcedeReq.displayName = 'proto.ConcedeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConcedeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ConcedeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConcedeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConcedeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamenumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConcedeReq}
 */
proto.ConcedeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConcedeReq;
  return proto.ConcedeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConcedeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConcedeReq}
 */
proto.ConcedeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MatchScope} */ (reader.readEnum());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGamenumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConcedeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConcedeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConcedeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConcedeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGamenumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional MatchScope scope = 1;
 * @return {!proto.MatchScope}
 */
proto.ConcedeReq.prototype.getScope = function() {
  return /** @type {!proto.MatchScope} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MatchScope} value */
proto.ConcedeReq.prototype.setScope = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 gameNumber = 2;
 * @return {number}
 */
proto.ConcedeReq.prototype.getGamenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ConcedeReq.prototype.setGamenumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConfigureRequest.displayName = 'proto.ConfigureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    general: (f = msg.getGeneral()) && proto.GeneralConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureRequest}
 */
proto.ConfigureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureRequest;
  return proto.ConfigureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureRequest}
 */
proto.ConfigureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GeneralConfiguration;
      reader.readMessage(value,proto.GeneralConfiguration.deserializeBinaryFromReader);
      msg.setGeneral(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeneral();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GeneralConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional GeneralConfiguration general = 1;
 * @return {?proto.GeneralConfiguration}
 */
proto.ConfigureRequest.prototype.getGeneral = function() {
  return /** @type{?proto.GeneralConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.GeneralConfiguration, 1));
};


/** @param {?proto.GeneralConfiguration|undefined} value */
proto.ConfigureRequest.prototype.setGeneral = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ConfigureRequest.prototype.clearGeneral = function() {
  this.setGeneral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConfigureRequest.prototype.hasGeneral = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConfigureResponse.displayName = 'proto.ConfigureResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureResponse}
 */
proto.ConfigureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureResponse;
  return proto.ConfigureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureResponse}
 */
proto.ConfigureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.GRETHHostErrorCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional GRETHHostErrorCode result = 1;
 * @return {!proto.GRETHHostErrorCode}
 */
proto.ConfigureResponse.prototype.getResult = function() {
  return /** @type {!proto.GRETHHostErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.GRETHHostErrorCode} value */
proto.ConfigureResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConnectReq.displayName = 'proto.ConnectReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    majorver: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minorver: jspb.Message.getFieldWithDefault(msg, 2, 0),
    revisionver: jspb.Message.getFieldWithDefault(msg, 3, 0),
    buildver: jspb.Message.getFieldWithDefault(msg, 4, 0),
    defaultsettings: (f = msg.getDefaultsettings()) && proto.SettingsMessage.toObject(includeInstance, f),
    protover: jspb.Message.getFieldWithDefault(msg, 6, 0),
    seatid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectReq}
 */
proto.ConnectReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectReq;
  return proto.ConnectReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectReq}
 */
proto.ConnectReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajorver(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinorver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRevisionver(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuildver(value);
      break;
    case 5:
      var value = new proto.SettingsMessage;
      reader.readMessage(value,proto.SettingsMessage.deserializeBinaryFromReader);
      msg.setDefaultsettings(value);
      break;
    case 6:
      var value = /** @type {!proto.ProtoVersion} */ (reader.readEnum());
      msg.setProtover(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajorver();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinorver();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRevisionver();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBuildver();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDefaultsettings();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SettingsMessage.serializeBinaryToWriter
    );
  }
  f = message.getProtover();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 majorVer = 1;
 * @return {number}
 */
proto.ConnectReq.prototype.getMajorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ConnectReq.prototype.setMajorver = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minorVer = 2;
 * @return {number}
 */
proto.ConnectReq.prototype.getMinorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ConnectReq.prototype.setMinorver = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 revisionVer = 3;
 * @return {number}
 */
proto.ConnectReq.prototype.getRevisionver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ConnectReq.prototype.setRevisionver = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 buildVer = 4;
 * @return {number}
 */
proto.ConnectReq.prototype.getBuildver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ConnectReq.prototype.setBuildver = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional SettingsMessage defaultSettings = 5;
 * @return {?proto.SettingsMessage}
 */
proto.ConnectReq.prototype.getDefaultsettings = function() {
  return /** @type{?proto.SettingsMessage} */ (
    jspb.Message.getWrapperField(this, proto.SettingsMessage, 5));
};


/** @param {?proto.SettingsMessage|undefined} value */
proto.ConnectReq.prototype.setDefaultsettings = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ConnectReq.prototype.clearDefaultsettings = function() {
  this.setDefaultsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConnectReq.prototype.hasDefaultsettings = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ProtoVersion protoVer = 6;
 * @return {!proto.ProtoVersion}
 */
proto.ConnectReq.prototype.getProtover = function() {
  return /** @type {!proto.ProtoVersion} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.ProtoVersion} value */
proto.ConnectReq.prototype.setProtover = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint32 seatId = 7;
 * @return {number}
 */
proto.ConnectReq.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ConnectReq.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConnectResp.displayName = 'proto.ConnectResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    majorver: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minorver: jspb.Message.getFieldWithDefault(msg, 3, 0),
    revisionver: jspb.Message.getFieldWithDefault(msg, 4, 0),
    buildver: jspb.Message.getFieldWithDefault(msg, 5, 0),
    protover: jspb.Message.getFieldWithDefault(msg, 6, 0),
    seatid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    settings: (f = msg.getSettings()) && proto.SettingsMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectResp}
 */
proto.ConnectResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectResp;
  return proto.ConnectResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectResp}
 */
proto.ConnectResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ConnectionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajorver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinorver(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRevisionver(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuildver(value);
      break;
    case 6:
      var value = /** @type {!proto.ProtoVersion} */ (reader.readEnum());
      msg.setProtover(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeatid(value);
      break;
    case 8:
      var value = new proto.SettingsMessage;
      reader.readMessage(value,proto.SettingsMessage.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMajorver();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMinorver();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRevisionver();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBuildver();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getProtover();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SettingsMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConnectionStatus status = 1;
 * @return {!proto.ConnectionStatus}
 */
proto.ConnectResp.prototype.getStatus = function() {
  return /** @type {!proto.ConnectionStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ConnectionStatus} value */
proto.ConnectResp.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 majorVer = 2;
 * @return {number}
 */
proto.ConnectResp.prototype.getMajorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ConnectResp.prototype.setMajorver = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 minorVer = 3;
 * @return {number}
 */
proto.ConnectResp.prototype.getMinorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ConnectResp.prototype.setMinorver = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 revisionVer = 4;
 * @return {number}
 */
proto.ConnectResp.prototype.getRevisionver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ConnectResp.prototype.setRevisionver = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 buildVer = 5;
 * @return {number}
 */
proto.ConnectResp.prototype.getBuildver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ConnectResp.prototype.setBuildver = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ProtoVersion protoVer = 6;
 * @return {!proto.ProtoVersion}
 */
proto.ConnectResp.prototype.getProtover = function() {
  return /** @type {!proto.ProtoVersion} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.ProtoVersion} value */
proto.ConnectResp.prototype.setProtover = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint32 seatId = 7;
 * @return {number}
 */
proto.ConnectResp.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ConnectResp.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional SettingsMessage settings = 8;
 * @return {?proto.SettingsMessage}
 */
proto.ConnectResp.prototype.getSettings = function() {
  return /** @type{?proto.SettingsMessage} */ (
    jspb.Message.getWrapperField(this, proto.SettingsMessage, 8));
};


/** @param {?proto.SettingsMessage|undefined} value */
proto.ConnectResp.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.ConnectResp.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConnectResp.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ContinuationToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ContinuationToken.oneofGroups_);
};
goog.inherits(proto.ContinuationToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ContinuationToken.displayName = 'proto.ContinuationToken';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ContinuationToken.oneofGroups_ = [[5]];

/**
 * @enum {number}
 */
proto.ContinuationToken.MessageCase = {
  MESSAGE_NOT_SET: 0,
  TIMESTAMP: 5
};

/**
 * @return {proto.ContinuationToken.MessageCase}
 */
proto.ContinuationToken.prototype.getMessageCase = function() {
  return /** @type {proto.ContinuationToken.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ContinuationToken.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ContinuationToken.prototype.toObject = function(opt_includeInstance) {
  return proto.ContinuationToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ContinuationToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ContinuationToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ContinuationToken}
 */
proto.ContinuationToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ContinuationToken;
  return proto.ContinuationToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ContinuationToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ContinuationToken}
 */
proto.ContinuationToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ContinuationToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ContinuationToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ContinuationToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ContinuationToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.ContinuationToken.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ContinuationToken.prototype.setTimestamp = function(value) {
  jspb.Message.setOneofField(this, 5, proto.ContinuationToken.oneofGroups_[0], value);
};


proto.ContinuationToken.prototype.clearTimestamp = function() {
  jspb.Message.setOneofField(this, 5, proto.ContinuationToken.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ContinuationToken.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControlReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ControlReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ControlReq.displayName = 'proto.ControlReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControlReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ControlReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControlReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    controllerid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControlReq}
 */
proto.ControlReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControlReq;
  return proto.ControlReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControlReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControlReq}
 */
proto.ControlReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ControllerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setControllerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControlReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ControlReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ControlReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getControllerid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ControllerType type = 1;
 * @return {!proto.ControllerType}
 */
proto.ControlReq.prototype.getType = function() {
  return /** @type {!proto.ControllerType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ControllerType} value */
proto.ControlReq.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 controllerId = 2;
 * @return {number}
 */
proto.ControlReq.prototype.getControllerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ControlReq.prototype.setControllerid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CorrelationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CorrelationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CorrelationInfo.displayName = 'proto.CorrelationInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CorrelationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.CorrelationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CorrelationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CorrelationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    correlationcontextMap: (f = msg.getCorrelationcontextMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CorrelationInfo}
 */
proto.CorrelationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CorrelationInfo;
  return proto.CorrelationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CorrelationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CorrelationInfo}
 */
proto.CorrelationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 5:
      var value = msg.getCorrelationcontextMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CorrelationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CorrelationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CorrelationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CorrelationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCorrelationcontextMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string correlationId = 1;
 * @return {string}
 */
proto.CorrelationInfo.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CorrelationInfo.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> correlationContext = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.CorrelationInfo.prototype.getCorrelationcontextMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.CorrelationInfo.prototype.clearCorrelationcontextMap = function() {
  this.getCorrelationcontextMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CosmeticConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CosmeticConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CosmeticConfig.displayName = 'proto.CosmeticConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CosmeticConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.CosmeticConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CosmeticConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CosmeticConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seatid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CosmeticConfig}
 */
proto.CosmeticConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CosmeticConfig;
  return proto.CosmeticConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CosmeticConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CosmeticConfig}
 */
proto.CosmeticConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CosmeticConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CosmeticConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CosmeticConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CosmeticConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.CosmeticConfig.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CosmeticConfig.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 seatId = 1;
 * @return {number}
 */
proto.CosmeticConfig.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CosmeticConfig.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CosmeticInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CosmeticInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CosmeticInfo.displayName = 'proto.CosmeticInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CosmeticInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.CosmeticInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CosmeticInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CosmeticInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seatid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CosmeticInfo}
 */
proto.CosmeticInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CosmeticInfo;
  return proto.CosmeticInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CosmeticInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CosmeticInfo}
 */
proto.CosmeticInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CosmeticInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CosmeticInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CosmeticInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CosmeticInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.CosmeticInfo.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CosmeticInfo.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 seatId = 1;
 * @return {number}
 */
proto.CosmeticInfo.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CosmeticInfo.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Counter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Counter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Counter.displayName = 'proto.Counter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Counter.prototype.toObject = function(opt_includeInstance) {
  return proto.Counter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Counter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Counter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    markedobject: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Counter}
 */
proto.Counter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Counter;
  return proto.Counter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Counter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Counter}
 */
proto.Counter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CounterType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMarkedobject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Counter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Counter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Counter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Counter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMarkedobject();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional CounterType type = 1;
 * @return {!proto.CounterType}
 */
proto.Counter.prototype.getType = function() {
  return /** @type {!proto.CounterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.CounterType} value */
proto.Counter.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.Counter.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Counter.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 id = 3;
 * @return {number}
 */
proto.Counter.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Counter.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 markedObject = 4;
 * @return {number}
 */
proto.Counter.prototype.getMarkedobject = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Counter.prototype.setMarkedobject = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateMatchGameRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateMatchGameRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateMatchGameRoomRequest.displayName = 'proto.CreateMatchGameRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateMatchGameRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateMatchGameRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateMatchGameRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMatchGameRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroomconfig: (f = msg.getGameroomconfig()) && proto.MatchGameRoomConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateMatchGameRoomRequest}
 */
proto.CreateMatchGameRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateMatchGameRoomRequest;
  return proto.CreateMatchGameRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateMatchGameRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateMatchGameRoomRequest}
 */
proto.CreateMatchGameRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchGameRoomConfig;
      reader.readMessage(value,proto.MatchGameRoomConfig.deserializeBinaryFromReader);
      msg.setGameroomconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateMatchGameRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateMatchGameRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateMatchGameRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMatchGameRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroomconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchGameRoomConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchGameRoomConfig gameRoomConfig = 1;
 * @return {?proto.MatchGameRoomConfig}
 */
proto.CreateMatchGameRoomRequest.prototype.getGameroomconfig = function() {
  return /** @type{?proto.MatchGameRoomConfig} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomConfig, 1));
};


/** @param {?proto.MatchGameRoomConfig|undefined} value */
proto.CreateMatchGameRoomRequest.prototype.setGameroomconfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CreateMatchGameRoomRequest.prototype.clearGameroomconfig = function() {
  this.setGameroomconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateMatchGameRoomRequest.prototype.hasGameroomconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateMatchGameRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateMatchGameRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateMatchGameRoomResponse.displayName = 'proto.CreateMatchGameRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateMatchGameRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateMatchGameRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateMatchGameRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMatchGameRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroominfo: (f = msg.getGameroominfo()) && proto.MatchGameRoomInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateMatchGameRoomResponse}
 */
proto.CreateMatchGameRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateMatchGameRoomResponse;
  return proto.CreateMatchGameRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateMatchGameRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateMatchGameRoomResponse}
 */
proto.CreateMatchGameRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchGameRoomInfo;
      reader.readMessage(value,proto.MatchGameRoomInfo.deserializeBinaryFromReader);
      msg.setGameroominfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateMatchGameRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateMatchGameRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateMatchGameRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMatchGameRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroominfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchGameRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchGameRoomInfo gameRoomInfo = 1;
 * @return {?proto.MatchGameRoomInfo}
 */
proto.CreateMatchGameRoomResponse.prototype.getGameroominfo = function() {
  return /** @type{?proto.MatchGameRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomInfo, 1));
};


/** @param {?proto.MatchGameRoomInfo|undefined} value */
proto.CreateMatchGameRoomResponse.prototype.setGameroominfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CreateMatchGameRoomResponse.prototype.clearGameroominfo = function() {
  this.setGameroominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateMatchGameRoomResponse.prototype.hasGameroominfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateMatchGameRoomResponseV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateMatchGameRoomResponseV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateMatchGameRoomResponseV2.displayName = 'proto.CreateMatchGameRoomResponseV2';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateMatchGameRoomResponseV2.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateMatchGameRoomResponseV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateMatchGameRoomResponseV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMatchGameRoomResponseV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcfabricuri: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateMatchGameRoomResponseV2}
 */
proto.CreateMatchGameRoomResponseV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateMatchGameRoomResponseV2;
  return proto.CreateMatchGameRoomResponseV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateMatchGameRoomResponseV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateMatchGameRoomResponseV2}
 */
proto.CreateMatchGameRoomResponseV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcfabricuri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateMatchGameRoomResponseV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateMatchGameRoomResponseV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateMatchGameRoomResponseV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMatchGameRoomResponseV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcfabricuri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mcFabricUri = 1;
 * @return {string}
 */
proto.CreateMatchGameRoomResponseV2.prototype.getMcfabricuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateMatchGameRoomResponseV2.prototype.setMcfabricuri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DamageAssigner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DamageAssigner.repeatedFields_, null);
};
goog.inherits(proto.DamageAssigner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DamageAssigner.displayName = 'proto.DamageAssigner';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DamageAssigner.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DamageAssigner.prototype.toObject = function(opt_includeInstance) {
  return proto.DamageAssigner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DamageAssigner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DamageAssigner.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignmentsList: jspb.Message.toObjectList(msg.getAssignmentsList(),
    proto.DamageAssignment.toObject, includeInstance),
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totaldamage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    decisionprompt: (f = msg.getDecisionprompt()) && proto.Prompt.toObject(includeInstance, f),
    canignoreblockers: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DamageAssigner}
 */
proto.DamageAssigner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DamageAssigner;
  return proto.DamageAssigner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DamageAssigner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DamageAssigner}
 */
proto.DamageAssigner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.DamageAssignment;
      reader.readMessage(value,proto.DamageAssignment.deserializeBinaryFromReader);
      msg.addAssignments(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotaldamage(value);
      break;
    case 4:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setDecisionprompt(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanignoreblockers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DamageAssigner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DamageAssigner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DamageAssigner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DamageAssigner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.DamageAssignment.serializeBinaryToWriter
    );
  }
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTotaldamage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDecisionprompt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getCanignoreblockers();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated DamageAssignment assignments = 3;
 * @return {!Array.<!proto.DamageAssignment>}
 */
proto.DamageAssigner.prototype.getAssignmentsList = function() {
  return /** @type{!Array.<!proto.DamageAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DamageAssignment, 3));
};


/** @param {!Array.<!proto.DamageAssignment>} value */
proto.DamageAssigner.prototype.setAssignmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.DamageAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DamageAssignment}
 */
proto.DamageAssigner.prototype.addAssignments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.DamageAssignment, opt_index);
};


proto.DamageAssigner.prototype.clearAssignmentsList = function() {
  this.setAssignmentsList([]);
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.DamageAssigner.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DamageAssigner.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 totalDamage = 2;
 * @return {number}
 */
proto.DamageAssigner.prototype.getTotaldamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DamageAssigner.prototype.setTotaldamage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Prompt decisionPrompt = 4;
 * @return {?proto.Prompt}
 */
proto.DamageAssigner.prototype.getDecisionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 4));
};


/** @param {?proto.Prompt|undefined} value */
proto.DamageAssigner.prototype.setDecisionprompt = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.DamageAssigner.prototype.clearDecisionprompt = function() {
  this.setDecisionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DamageAssigner.prototype.hasDecisionprompt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool canIgnoreBlockers = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DamageAssigner.prototype.getCanignoreblockers = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.DamageAssigner.prototype.setCanignoreblockers = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DamageAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DamageAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DamageAssignment.displayName = 'proto.DamageAssignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DamageAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.DamageAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DamageAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DamageAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mindamage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxdamage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    assigneddamage: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DamageAssignment}
 */
proto.DamageAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DamageAssignment;
  return proto.DamageAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DamageAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DamageAssignment}
 */
proto.DamageAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMindamage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxdamage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssigneddamage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DamageAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DamageAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DamageAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DamageAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMindamage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxdamage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAssigneddamage();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.DamageAssignment.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DamageAssignment.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minDamage = 2;
 * @return {number}
 */
proto.DamageAssignment.prototype.getMindamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DamageAssignment.prototype.setMindamage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxDamage = 3;
 * @return {number}
 */
proto.DamageAssignment.prototype.getMaxdamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DamageAssignment.prototype.setMaxdamage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 assignedDamage = 4;
 * @return {number}
 */
proto.DamageAssignment.prototype.getAssigneddamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.DamageAssignment.prototype.setAssigneddamage = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DamageRecipient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DamageRecipient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DamageRecipient.displayName = 'proto.DamageRecipient';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DamageRecipient.prototype.toObject = function(opt_includeInstance) {
  return proto.DamageRecipient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DamageRecipient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DamageRecipient.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    playersystemseatid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    planeswalkerinstanceid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DamageRecipient}
 */
proto.DamageRecipient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DamageRecipient;
  return proto.DamageRecipient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DamageRecipient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DamageRecipient}
 */
proto.DamageRecipient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DamageRecType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTeamid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayersystemseatid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlaneswalkerinstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DamageRecipient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DamageRecipient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DamageRecipient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DamageRecipient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPlayersystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPlaneswalkerinstanceid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional DamageRecType type = 1;
 * @return {!proto.DamageRecType}
 */
proto.DamageRecipient.prototype.getType = function() {
  return /** @type {!proto.DamageRecType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DamageRecType} value */
proto.DamageRecipient.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 teamId = 2;
 * @return {number}
 */
proto.DamageRecipient.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DamageRecipient.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 playerSystemSeatId = 3;
 * @return {number}
 */
proto.DamageRecipient.prototype.getPlayersystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DamageRecipient.prototype.setPlayersystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 planeswalkerInstanceId = 4;
 * @return {number}
 */
proto.DamageRecipient.prototype.getPlaneswalkerinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.DamageRecipient.prototype.setPlaneswalkerinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeckInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeckInfo.repeatedFields_, null);
};
goog.inherits(proto.DeckInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeckInfo.displayName = 'proto.DeckInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeckInfo.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeckInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.DeckInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeckInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeckInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    courseid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deckname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    librarycardidsList: jspb.Message.getRepeatedField(msg, 5),
    sideboardcardidsList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeckInfo}
 */
proto.DeckInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeckInfo;
  return proto.DeckInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeckInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeckInfo}
 */
proto.DeckInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeckid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCourseid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeckname(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setLibrarycardidsList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSideboardcardidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeckInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeckInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeckInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeckInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCourseid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeckname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLibrarycardidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getSideboardcardidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
};


/**
 * optional string deckId = 1;
 * @return {string}
 */
proto.DeckInfo.prototype.getDeckid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DeckInfo.prototype.setDeckid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.DeckInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DeckInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string courseId = 3;
 * @return {string}
 */
proto.DeckInfo.prototype.getCourseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.DeckInfo.prototype.setCourseid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string deckName = 4;
 * @return {string}
 */
proto.DeckInfo.prototype.getDeckname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DeckInfo.prototype.setDeckname = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated uint32 libraryCardIds = 5;
 * @return {!Array.<number>}
 */
proto.DeckInfo.prototype.getLibrarycardidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.DeckInfo.prototype.setLibrarycardidsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DeckInfo.prototype.addLibrarycardids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.DeckInfo.prototype.clearLibrarycardidsList = function() {
  this.setLibrarycardidsList([]);
};


/**
 * repeated uint32 sideboardCardIds = 6;
 * @return {!Array.<number>}
 */
proto.DeckInfo.prototype.getSideboardcardidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.DeckInfo.prototype.setSideboardcardidsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DeckInfo.prototype.addSideboardcardids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.DeckInfo.prototype.clearSideboardcardidsList = function() {
  this.setSideboardcardidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeckMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeckMessage.repeatedFields_, null);
};
goog.inherits(proto.DeckMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeckMessage.displayName = 'proto.DeckMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeckMessage.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeckMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.DeckMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeckMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeckMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckcardsList: jspb.Message.getRepeatedField(msg, 1),
    sideboardcardsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeckMessage}
 */
proto.DeckMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeckMessage;
  return proto.DeckMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeckMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeckMessage}
 */
proto.DeckMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeckcardsList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSideboardcardsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeckMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeckMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeckMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeckMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckcardsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getSideboardcardsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * repeated uint32 deckCards = 1;
 * @return {!Array.<number>}
 */
proto.DeckMessage.prototype.getDeckcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.DeckMessage.prototype.setDeckcardsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DeckMessage.prototype.addDeckcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.DeckMessage.prototype.clearDeckcardsList = function() {
  this.setDeckcardsList([]);
};


/**
 * repeated uint32 sideboardCards = 2;
 * @return {!Array.<number>}
 */
proto.DeckMessage.prototype.getSideboardcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.DeckMessage.prototype.setSideboardcardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DeckMessage.prototype.addSideboardcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.DeckMessage.prototype.clearSideboardcardsList = function() {
  this.setSideboardcardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeclareAttackersReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeclareAttackersReq.repeatedFields_, null);
};
goog.inherits(proto.DeclareAttackersReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeclareAttackersReq.displayName = 'proto.DeclareAttackersReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeclareAttackersReq.repeatedFields_ = [1,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeclareAttackersReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DeclareAttackersReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeclareAttackersReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareAttackersReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    attackersList: jspb.Message.toObjectList(msg.getAttackersList(),
    proto.Attacker.toObject, includeInstance),
    attackwarningsList: jspb.Message.toObjectList(msg.getAttackwarningsList(),
    proto.AttackWarning.toObject, includeInstance),
    manacostList: jspb.Message.toObjectList(msg.getManacostList(),
    proto.ManaRequirement.toObject, includeInstance),
    hasrequirements: jspb.Message.getFieldWithDefault(msg, 2, false),
    hasrestrictions: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeclareAttackersReq}
 */
proto.DeclareAttackersReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeclareAttackersReq;
  return proto.DeclareAttackersReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeclareAttackersReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeclareAttackersReq}
 */
proto.DeclareAttackersReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Attacker;
      reader.readMessage(value,proto.Attacker.deserializeBinaryFromReader);
      msg.addAttackers(value);
      break;
    case 4:
      var value = new proto.AttackWarning;
      reader.readMessage(value,proto.AttackWarning.deserializeBinaryFromReader);
      msg.addAttackwarnings(value);
      break;
    case 5:
      var value = new proto.ManaRequirement;
      reader.readMessage(value,proto.ManaRequirement.deserializeBinaryFromReader);
      msg.addManacost(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasrequirements(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasrestrictions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeclareAttackersReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeclareAttackersReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeclareAttackersReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareAttackersReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttackersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Attacker.serializeBinaryToWriter
    );
  }
  f = message.getAttackwarningsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.AttackWarning.serializeBinaryToWriter
    );
  }
  f = message.getManacostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ManaRequirement.serializeBinaryToWriter
    );
  }
  f = message.getHasrequirements();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHasrestrictions();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated Attacker attackers = 1;
 * @return {!Array.<!proto.Attacker>}
 */
proto.DeclareAttackersReq.prototype.getAttackersList = function() {
  return /** @type{!Array.<!proto.Attacker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Attacker, 1));
};


/** @param {!Array.<!proto.Attacker>} value */
proto.DeclareAttackersReq.prototype.setAttackersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Attacker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Attacker}
 */
proto.DeclareAttackersReq.prototype.addAttackers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Attacker, opt_index);
};


proto.DeclareAttackersReq.prototype.clearAttackersList = function() {
  this.setAttackersList([]);
};


/**
 * repeated AttackWarning attackWarnings = 4;
 * @return {!Array.<!proto.AttackWarning>}
 */
proto.DeclareAttackersReq.prototype.getAttackwarningsList = function() {
  return /** @type{!Array.<!proto.AttackWarning>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AttackWarning, 4));
};


/** @param {!Array.<!proto.AttackWarning>} value */
proto.DeclareAttackersReq.prototype.setAttackwarningsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.AttackWarning=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AttackWarning}
 */
proto.DeclareAttackersReq.prototype.addAttackwarnings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.AttackWarning, opt_index);
};


proto.DeclareAttackersReq.prototype.clearAttackwarningsList = function() {
  this.setAttackwarningsList([]);
};


/**
 * repeated ManaRequirement manaCost = 5;
 * @return {!Array.<!proto.ManaRequirement>}
 */
proto.DeclareAttackersReq.prototype.getManacostList = function() {
  return /** @type{!Array.<!proto.ManaRequirement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaRequirement, 5));
};


/** @param {!Array.<!proto.ManaRequirement>} value */
proto.DeclareAttackersReq.prototype.setManacostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ManaRequirement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaRequirement}
 */
proto.DeclareAttackersReq.prototype.addManacost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ManaRequirement, opt_index);
};


proto.DeclareAttackersReq.prototype.clearManacostList = function() {
  this.setManacostList([]);
};


/**
 * optional bool hasRequirements = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeclareAttackersReq.prototype.getHasrequirements = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.DeclareAttackersReq.prototype.setHasrequirements = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool hasRestrictions = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeclareAttackersReq.prototype.getHasrestrictions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.DeclareAttackersReq.prototype.setHasrestrictions = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeclareAttackersResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeclareAttackersResp.repeatedFields_, null);
};
goog.inherits(proto.DeclareAttackersResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeclareAttackersResp.displayName = 'proto.DeclareAttackersResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeclareAttackersResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeclareAttackersResp.prototype.toObject = function(opt_includeInstance) {
  return proto.DeclareAttackersResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeclareAttackersResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareAttackersResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectedattackersList: jspb.Message.toObjectList(msg.getSelectedattackersList(),
    proto.Attacker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeclareAttackersResp}
 */
proto.DeclareAttackersResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeclareAttackersResp;
  return proto.DeclareAttackersResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeclareAttackersResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeclareAttackersResp}
 */
proto.DeclareAttackersResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Attacker;
      reader.readMessage(value,proto.Attacker.deserializeBinaryFromReader);
      msg.addSelectedattackers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeclareAttackersResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeclareAttackersResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeclareAttackersResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareAttackersResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectedattackersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Attacker.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Attacker selectedAttackers = 1;
 * @return {!Array.<!proto.Attacker>}
 */
proto.DeclareAttackersResp.prototype.getSelectedattackersList = function() {
  return /** @type{!Array.<!proto.Attacker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Attacker, 1));
};


/** @param {!Array.<!proto.Attacker>} value */
proto.DeclareAttackersResp.prototype.setSelectedattackersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Attacker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Attacker}
 */
proto.DeclareAttackersResp.prototype.addSelectedattackers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Attacker, opt_index);
};


proto.DeclareAttackersResp.prototype.clearSelectedattackersList = function() {
  this.setSelectedattackersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeclareBlockersReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeclareBlockersReq.repeatedFields_, null);
};
goog.inherits(proto.DeclareBlockersReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeclareBlockersReq.displayName = 'proto.DeclareBlockersReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeclareBlockersReq.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeclareBlockersReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DeclareBlockersReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeclareBlockersReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareBlockersReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockersList: jspb.Message.toObjectList(msg.getBlockersList(),
    proto.Blocker.toObject, includeInstance),
    blockwarningsList: jspb.Message.toObjectList(msg.getBlockwarningsList(),
    proto.BlockWarning.toObject, includeInstance),
    hasrequirements: jspb.Message.getFieldWithDefault(msg, 2, false),
    hasrestrictions: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeclareBlockersReq}
 */
proto.DeclareBlockersReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeclareBlockersReq;
  return proto.DeclareBlockersReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeclareBlockersReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeclareBlockersReq}
 */
proto.DeclareBlockersReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Blocker;
      reader.readMessage(value,proto.Blocker.deserializeBinaryFromReader);
      msg.addBlockers(value);
      break;
    case 4:
      var value = new proto.BlockWarning;
      reader.readMessage(value,proto.BlockWarning.deserializeBinaryFromReader);
      msg.addBlockwarnings(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasrequirements(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasrestrictions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeclareBlockersReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeclareBlockersReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeclareBlockersReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareBlockersReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Blocker.serializeBinaryToWriter
    );
  }
  f = message.getBlockwarningsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.BlockWarning.serializeBinaryToWriter
    );
  }
  f = message.getHasrequirements();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHasrestrictions();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated Blocker blockers = 1;
 * @return {!Array.<!proto.Blocker>}
 */
proto.DeclareBlockersReq.prototype.getBlockersList = function() {
  return /** @type{!Array.<!proto.Blocker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Blocker, 1));
};


/** @param {!Array.<!proto.Blocker>} value */
proto.DeclareBlockersReq.prototype.setBlockersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Blocker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Blocker}
 */
proto.DeclareBlockersReq.prototype.addBlockers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Blocker, opt_index);
};


proto.DeclareBlockersReq.prototype.clearBlockersList = function() {
  this.setBlockersList([]);
};


/**
 * repeated BlockWarning blockWarnings = 4;
 * @return {!Array.<!proto.BlockWarning>}
 */
proto.DeclareBlockersReq.prototype.getBlockwarningsList = function() {
  return /** @type{!Array.<!proto.BlockWarning>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BlockWarning, 4));
};


/** @param {!Array.<!proto.BlockWarning>} value */
proto.DeclareBlockersReq.prototype.setBlockwarningsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.BlockWarning=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BlockWarning}
 */
proto.DeclareBlockersReq.prototype.addBlockwarnings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.BlockWarning, opt_index);
};


proto.DeclareBlockersReq.prototype.clearBlockwarningsList = function() {
  this.setBlockwarningsList([]);
};


/**
 * optional bool hasRequirements = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeclareBlockersReq.prototype.getHasrequirements = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.DeclareBlockersReq.prototype.setHasrequirements = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool hasRestrictions = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeclareBlockersReq.prototype.getHasrestrictions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.DeclareBlockersReq.prototype.setHasrestrictions = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeclareBlockersResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeclareBlockersResp.repeatedFields_, null);
};
goog.inherits(proto.DeclareBlockersResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeclareBlockersResp.displayName = 'proto.DeclareBlockersResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeclareBlockersResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeclareBlockersResp.prototype.toObject = function(opt_includeInstance) {
  return proto.DeclareBlockersResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeclareBlockersResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareBlockersResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectedblockersList: jspb.Message.toObjectList(msg.getSelectedblockersList(),
    proto.Blocker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeclareBlockersResp}
 */
proto.DeclareBlockersResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeclareBlockersResp;
  return proto.DeclareBlockersResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeclareBlockersResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeclareBlockersResp}
 */
proto.DeclareBlockersResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Blocker;
      reader.readMessage(value,proto.Blocker.deserializeBinaryFromReader);
      msg.addSelectedblockers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeclareBlockersResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeclareBlockersResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeclareBlockersResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeclareBlockersResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectedblockersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Blocker.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Blocker selectedBlockers = 1;
 * @return {!Array.<!proto.Blocker>}
 */
proto.DeclareBlockersResp.prototype.getSelectedblockersList = function() {
  return /** @type{!Array.<!proto.Blocker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Blocker, 1));
};


/** @param {!Array.<!proto.Blocker>} value */
proto.DeclareBlockersResp.prototype.setSelectedblockersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Blocker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Blocker}
 */
proto.DeclareBlockersResp.prototype.addSelectedblockers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Blocker, opt_index);
};


proto.DeclareBlockersResp.prototype.clearSelectedblockersList = function() {
  this.setSelectedblockersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Decorator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Decorator.oneofGroups_);
};
goog.inherits(proto.Decorator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Decorator.displayName = 'proto.Decorator';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Decorator.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Decorator.MessageCase = {
  MESSAGE_NOT_SET: 0,
  LOOP: 1,
  INVERTER: 2
};

/**
 * @return {proto.Decorator.MessageCase}
 */
proto.Decorator.prototype.getMessageCase = function() {
  return /** @type {proto.Decorator.MessageCase} */(jspb.Message.computeOneofCase(this, proto.Decorator.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Decorator.prototype.toObject = function(opt_includeInstance) {
  return proto.Decorator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Decorator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Decorator.toObject = function(includeInstance, msg) {
  var f, obj = {
    loop: (f = msg.getLoop()) && proto.Loop.toObject(includeInstance, f),
    inverter: (f = msg.getInverter()) && proto.Inverter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Decorator}
 */
proto.Decorator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Decorator;
  return proto.Decorator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Decorator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Decorator}
 */
proto.Decorator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Loop;
      reader.readMessage(value,proto.Loop.deserializeBinaryFromReader);
      msg.setLoop(value);
      break;
    case 2:
      var value = new proto.Inverter;
      reader.readMessage(value,proto.Inverter.deserializeBinaryFromReader);
      msg.setInverter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Decorator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Decorator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Decorator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Decorator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoop();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Loop.serializeBinaryToWriter
    );
  }
  f = message.getInverter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Inverter.serializeBinaryToWriter
    );
  }
};


/**
 * optional Loop loop = 1;
 * @return {?proto.Loop}
 */
proto.Decorator.prototype.getLoop = function() {
  return /** @type{?proto.Loop} */ (
    jspb.Message.getWrapperField(this, proto.Loop, 1));
};


/** @param {?proto.Loop|undefined} value */
proto.Decorator.prototype.setLoop = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Decorator.oneofGroups_[0], value);
};


proto.Decorator.prototype.clearLoop = function() {
  this.setLoop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Decorator.prototype.hasLoop = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Inverter inverter = 2;
 * @return {?proto.Inverter}
 */
proto.Decorator.prototype.getInverter = function() {
  return /** @type{?proto.Inverter} */ (
    jspb.Message.getWrapperField(this, proto.Inverter, 2));
};


/** @param {?proto.Inverter|undefined} value */
proto.Decorator.prototype.setInverter = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Decorator.oneofGroups_[0], value);
};


proto.Decorator.prototype.clearInverter = function() {
  this.setInverter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Decorator.prototype.hasInverter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteQueueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteQueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteQueueRequest.displayName = 'proto.DeleteQueueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteQueueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteQueueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteQueueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteQueueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    queuetype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteQueueRequest}
 */
proto.DeleteQueueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteQueueRequest;
  return proto.DeleteQueueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteQueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteQueueRequest}
 */
proto.DeleteQueueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 1:
      var value = /** @type {!proto.QueueType} */ (reader.readEnum());
      msg.setQueuetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteQueueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteQueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteQueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteQueueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQueuetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.DeleteQueueRequest.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DeleteQueueRequest.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional QueueType queueType = 1;
 * @return {!proto.QueueType}
 */
proto.DeleteQueueRequest.prototype.getQueuetype = function() {
  return /** @type {!proto.QueueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.QueueType} value */
proto.DeleteQueueRequest.prototype.setQueuetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteQueueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteQueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteQueueResponse.displayName = 'proto.DeleteQueueResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteQueueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteQueueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteQueueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteQueueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteQueueResponse}
 */
proto.DeleteQueueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteQueueResponse;
  return proto.DeleteQueueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteQueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteQueueResponse}
 */
proto.DeleteQueueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteQueueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteQueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteQueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteQueueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DieRollResultsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DieRollResultsResp.repeatedFields_, null);
};
goog.inherits(proto.DieRollResultsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DieRollResultsResp.displayName = 'proto.DieRollResultsResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DieRollResultsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DieRollResultsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.DieRollResultsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DieRollResultsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DieRollResultsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerdierollsList: jspb.Message.toObjectList(msg.getPlayerdierollsList(),
    proto.PlayerDieRoll.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DieRollResultsResp}
 */
proto.DieRollResultsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DieRollResultsResp;
  return proto.DieRollResultsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DieRollResultsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DieRollResultsResp}
 */
proto.DieRollResultsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayerDieRoll;
      reader.readMessage(value,proto.PlayerDieRoll.deserializeBinaryFromReader);
      msg.addPlayerdierolls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DieRollResultsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DieRollResultsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DieRollResultsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DieRollResultsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerdierollsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PlayerDieRoll.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerDieRoll playerDieRolls = 1;
 * @return {!Array.<!proto.PlayerDieRoll>}
 */
proto.DieRollResultsResp.prototype.getPlayerdierollsList = function() {
  return /** @type{!Array.<!proto.PlayerDieRoll>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerDieRoll, 1));
};


/** @param {!Array.<!proto.PlayerDieRoll>} value */
proto.DieRollResultsResp.prototype.setPlayerdierollsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PlayerDieRoll=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerDieRoll}
 */
proto.DieRollResultsResp.prototype.addPlayerdierolls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PlayerDieRoll, opt_index);
};


proto.DieRollResultsResp.prototype.clearPlayerdierollsList = function() {
  this.setPlayerdierollsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Distribution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Distribution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Distribution.displayName = 'proto.Distribution';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Distribution.prototype.toObject = function(opt_includeInstance) {
  return proto.Distribution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Distribution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Distribution.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Distribution}
 */
proto.Distribution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Distribution;
  return proto.Distribution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Distribution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Distribution}
 */
proto.Distribution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Distribution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Distribution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Distribution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Distribution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.Distribution.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Distribution.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 amount = 2;
 * @return {number}
 */
proto.Distribution.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Distribution.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DistributionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DistributionReq.repeatedFields_, null);
};
goog.inherits(proto.DistributionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DistributionReq.displayName = 'proto.DistributionReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DistributionReq.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DistributionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DistributionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DistributionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DistributionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetidsList: jspb.Message.getRepeatedField(msg, 5),
    existingdistributionvaluesList: jspb.Message.getRepeatedField(msg, 6),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minamount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxamount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minpertarget: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DistributionReq}
 */
proto.DistributionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DistributionReq;
  return proto.DistributionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DistributionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DistributionReq}
 */
proto.DistributionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setTargetidsList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setExistingdistributionvaluesList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinamount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxamount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinpertarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DistributionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DistributionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DistributionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DistributionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getExistingdistributionvaluesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinamount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxamount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMinpertarget();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated uint32 targetIds = 5;
 * @return {!Array.<number>}
 */
proto.DistributionReq.prototype.getTargetidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.DistributionReq.prototype.setTargetidsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DistributionReq.prototype.addTargetids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.DistributionReq.prototype.clearTargetidsList = function() {
  this.setTargetidsList([]);
};


/**
 * repeated uint32 existingDistributionValues = 6;
 * @return {!Array.<number>}
 */
proto.DistributionReq.prototype.getExistingdistributionvaluesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.DistributionReq.prototype.setExistingdistributionvaluesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DistributionReq.prototype.addExistingdistributionvalues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.DistributionReq.prototype.clearExistingdistributionvaluesList = function() {
  this.setExistingdistributionvaluesList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.DistributionReq.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DistributionReq.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minAmount = 2;
 * @return {number}
 */
proto.DistributionReq.prototype.getMinamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DistributionReq.prototype.setMinamount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxAmount = 3;
 * @return {number}
 */
proto.DistributionReq.prototype.getMaxamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DistributionReq.prototype.setMaxamount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 minPerTarget = 4;
 * @return {number}
 */
proto.DistributionReq.prototype.getMinpertarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.DistributionReq.prototype.setMinpertarget = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DistributionResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DistributionResp.repeatedFields_, null);
};
goog.inherits(proto.DistributionResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DistributionResp.displayName = 'proto.DistributionResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DistributionResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DistributionResp.prototype.toObject = function(opt_includeInstance) {
  return proto.DistributionResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DistributionResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DistributionResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    distributionsList: jspb.Message.toObjectList(msg.getDistributionsList(),
    proto.Distribution.toObject, includeInstance),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DistributionResp}
 */
proto.DistributionResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DistributionResp;
  return proto.DistributionResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DistributionResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DistributionResp}
 */
proto.DistributionResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.Distribution;
      reader.readMessage(value,proto.Distribution.deserializeBinaryFromReader);
      msg.addDistributions(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DistributionResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DistributionResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DistributionResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DistributionResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistributionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Distribution.serializeBinaryToWriter
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated Distribution distributions = 2;
 * @return {!Array.<!proto.Distribution>}
 */
proto.DistributionResp.prototype.getDistributionsList = function() {
  return /** @type{!Array.<!proto.Distribution>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Distribution, 2));
};


/** @param {!Array.<!proto.Distribution>} value */
proto.DistributionResp.prototype.setDistributionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Distribution=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Distribution}
 */
proto.DistributionResp.prototype.addDistributions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Distribution, opt_index);
};


proto.DistributionResp.prototype.clearDistributionsList = function() {
  this.setDistributionsList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.DistributionResp.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DistributionResp.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DraftGameRoomConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DraftGameRoomConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DraftGameRoomConfig.displayName = 'proto.DraftGameRoomConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DraftGameRoomConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.DraftGameRoomConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DraftGameRoomConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DraftGameRoomConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DraftGameRoomConfig}
 */
proto.DraftGameRoomConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DraftGameRoomConfig;
  return proto.DraftGameRoomConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DraftGameRoomConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DraftGameRoomConfig}
 */
proto.DraftGameRoomConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameroomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DraftGameRoomConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DraftGameRoomConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DraftGameRoomConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DraftGameRoomConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string gameRoomId = 1;
 * @return {string}
 */
proto.DraftGameRoomConfig.prototype.getGameroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DraftGameRoomConfig.prototype.setGameroomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.DraftGameRoomConfig.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DraftGameRoomConfig.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DraftGameRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DraftGameRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DraftGameRoomInfo.displayName = 'proto.DraftGameRoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DraftGameRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.DraftGameRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DraftGameRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DraftGameRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DraftGameRoomInfo}
 */
proto.DraftGameRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DraftGameRoomInfo;
  return proto.DraftGameRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DraftGameRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DraftGameRoomInfo}
 */
proto.DraftGameRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DraftGameRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DraftGameRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DraftGameRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DraftGameRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DropConstructedMatchmakingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DropConstructedMatchmakingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DropConstructedMatchmakingRequest.displayName = 'proto.DropConstructedMatchmakingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DropConstructedMatchmakingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DropConstructedMatchmakingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DropConstructedMatchmakingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropConstructedMatchmakingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DropConstructedMatchmakingRequest}
 */
proto.DropConstructedMatchmakingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DropConstructedMatchmakingRequest;
  return proto.DropConstructedMatchmakingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DropConstructedMatchmakingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DropConstructedMatchmakingRequest}
 */
proto.DropConstructedMatchmakingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DropConstructedMatchmakingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DropConstructedMatchmakingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DropConstructedMatchmakingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropConstructedMatchmakingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DropMatchmakingRequestV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DropMatchmakingRequestV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DropMatchmakingRequestV2.displayName = 'proto.DropMatchmakingRequestV2';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DropMatchmakingRequestV2.prototype.toObject = function(opt_includeInstance) {
  return proto.DropMatchmakingRequestV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DropMatchmakingRequestV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropMatchmakingRequestV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    courseid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DropMatchmakingRequestV2}
 */
proto.DropMatchmakingRequestV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DropMatchmakingRequestV2;
  return proto.DropMatchmakingRequestV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DropMatchmakingRequestV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DropMatchmakingRequestV2}
 */
proto.DropMatchmakingRequestV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCourseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DropMatchmakingRequestV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DropMatchmakingRequestV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DropMatchmakingRequestV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropMatchmakingRequestV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCourseid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string eventId = 1;
 * @return {string}
 */
proto.DropMatchmakingRequestV2.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DropMatchmakingRequestV2.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string courseId = 2;
 * @return {string}
 */
proto.DropMatchmakingRequestV2.prototype.getCourseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DropMatchmakingRequestV2.prototype.setCourseid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DropMatchmakingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DropMatchmakingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DropMatchmakingResponse.displayName = 'proto.DropMatchmakingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DropMatchmakingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DropMatchmakingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DropMatchmakingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropMatchmakingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DropMatchmakingResponse}
 */
proto.DropMatchmakingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DropMatchmakingResponse;
  return proto.DropMatchmakingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DropMatchmakingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DropMatchmakingResponse}
 */
proto.DropMatchmakingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DropMatchmakingResponseCode} */ (reader.readEnum());
      msg.setResponsecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DropMatchmakingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DropMatchmakingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DropMatchmakingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropMatchmakingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsecode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional DropMatchmakingResponseCode responseCode = 1;
 * @return {!proto.DropMatchmakingResponseCode}
 */
proto.DropMatchmakingResponse.prototype.getResponsecode = function() {
  return /** @type {!proto.DropMatchmakingResponseCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DropMatchmakingResponseCode} value */
proto.DropMatchmakingResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DropMatchmakingResponseV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DropMatchmakingResponseV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DropMatchmakingResponseV2.displayName = 'proto.DropMatchmakingResponseV2';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DropMatchmakingResponseV2.prototype.toObject = function(opt_includeInstance) {
  return proto.DropMatchmakingResponseV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DropMatchmakingResponseV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropMatchmakingResponseV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DropMatchmakingResponseV2}
 */
proto.DropMatchmakingResponseV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DropMatchmakingResponseV2;
  return proto.DropMatchmakingResponseV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DropMatchmakingResponseV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DropMatchmakingResponseV2}
 */
proto.DropMatchmakingResponseV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DropMatchmakingResponseCode} */ (reader.readEnum());
      msg.setResponsecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DropMatchmakingResponseV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DropMatchmakingResponseV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DropMatchmakingResponseV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropMatchmakingResponseV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsecode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional DropMatchmakingResponseCode responseCode = 1;
 * @return {!proto.DropMatchmakingResponseCode}
 */
proto.DropMatchmakingResponseV2.prototype.getResponsecode = function() {
  return /** @type {!proto.DropMatchmakingResponseCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DropMatchmakingResponseCode} value */
proto.DropMatchmakingResponseV2.prototype.setResponsecode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DropQueueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DropQueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DropQueueRequest.displayName = 'proto.DropQueueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DropQueueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DropQueueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DropQueueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropQueueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    queuetype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DropQueueRequest}
 */
proto.DropQueueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DropQueueRequest;
  return proto.DropQueueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DropQueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DropQueueRequest}
 */
proto.DropQueueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 1:
      var value = /** @type {!proto.QueueType} */ (reader.readEnum());
      msg.setQueuetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DropQueueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DropQueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DropQueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropQueueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQueuetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.DropQueueRequest.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DropQueueRequest.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional QueueType queueType = 1;
 * @return {!proto.QueueType}
 */
proto.DropQueueRequest.prototype.getQueuetype = function() {
  return /** @type {!proto.QueueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.QueueType} value */
proto.DropQueueRequest.prototype.setQueuetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DropQueueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DropQueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DropQueueResponse.displayName = 'proto.DropQueueResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DropQueueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DropQueueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DropQueueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropQueueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DropQueueResponse}
 */
proto.DropQueueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DropQueueResponse;
  return proto.DropQueueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DropQueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DropQueueResponse}
 */
proto.DropQueueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DropQueueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DropQueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DropQueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropQueueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DummyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DummyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DummyResponse.displayName = 'proto.DummyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DummyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DummyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DummyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DummyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dummy: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DummyResponse}
 */
proto.DummyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DummyResponse;
  return proto.DummyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DummyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DummyResponse}
 */
proto.DummyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDummy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DummyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DummyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DummyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DummyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDummy();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 dummy = 1;
 * @return {number}
 */
proto.DummyResponse.prototype.getDummy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DummyResponse.prototype.setDummy = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EchoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EchoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EchoRequest.displayName = 'proto.EchoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EchoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.EchoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EchoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EchoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EchoRequest}
 */
proto.EchoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EchoRequest;
  return proto.EchoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EchoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EchoRequest}
 */
proto.EchoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EchoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EchoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EchoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EchoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.EchoRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.EchoRequest.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EchoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EchoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EchoResponse.displayName = 'proto.EchoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EchoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.EchoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EchoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EchoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EchoResponse}
 */
proto.EchoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EchoResponse;
  return proto.EchoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EchoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EchoResponse}
 */
proto.EchoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EchoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EchoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EchoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EchoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.EchoResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.EchoResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EdictalMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EdictalMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EdictalMessage.displayName = 'proto.EdictalMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EdictalMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.EdictalMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EdictalMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EdictalMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    edictmessage: (f = msg.getEdictmessage()) && proto.ClientToGREMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EdictalMessage}
 */
proto.EdictalMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EdictalMessage;
  return proto.EdictalMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EdictalMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EdictalMessage}
 */
proto.EdictalMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientToGREMessage;
      reader.readMessage(value,proto.ClientToGREMessage.deserializeBinaryFromReader);
      msg.setEdictmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EdictalMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EdictalMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EdictalMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EdictalMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdictmessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ClientToGREMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientToGREMessage edictMessage = 1;
 * @return {?proto.ClientToGREMessage}
 */
proto.EdictalMessage.prototype.getEdictmessage = function() {
  return /** @type{?proto.ClientToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToGREMessage, 1));
};


/** @param {?proto.ClientToGREMessage|undefined} value */
proto.EdictalMessage.prototype.setEdictmessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EdictalMessage.prototype.clearEdictmessage = function() {
  this.setEdictmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EdictalMessage.prototype.hasEdictmessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EffectViolationBlocking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EffectViolationBlocking.repeatedFields_, null);
};
goog.inherits(proto.EffectViolationBlocking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EffectViolationBlocking.displayName = 'proto.EffectViolationBlocking';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EffectViolationBlocking.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EffectViolationBlocking.prototype.toObject = function(opt_includeInstance) {
  return proto.EffectViolationBlocking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EffectViolationBlocking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EffectViolationBlocking.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockerList: jspb.Message.toObjectList(msg.getBlockerList(),
    proto.Blocker.toObject, includeInstance),
    affectedinstanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EffectViolationBlocking}
 */
proto.EffectViolationBlocking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EffectViolationBlocking;
  return proto.EffectViolationBlocking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EffectViolationBlocking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EffectViolationBlocking}
 */
proto.EffectViolationBlocking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.Blocker;
      reader.readMessage(value,proto.Blocker.deserializeBinaryFromReader);
      msg.addBlocker(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAffectedinstanceid(value);
      break;
    case 2:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    case 3:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EffectViolationBlocking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EffectViolationBlocking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EffectViolationBlocking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EffectViolationBlocking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Blocker.serializeBinaryToWriter
    );
  }
  f = message.getAffectedinstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated Blocker blocker = 4;
 * @return {!Array.<!proto.Blocker>}
 */
proto.EffectViolationBlocking.prototype.getBlockerList = function() {
  return /** @type{!Array.<!proto.Blocker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Blocker, 4));
};


/** @param {!Array.<!proto.Blocker>} value */
proto.EffectViolationBlocking.prototype.setBlockerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Blocker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Blocker}
 */
proto.EffectViolationBlocking.prototype.addBlocker = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Blocker, opt_index);
};


proto.EffectViolationBlocking.prototype.clearBlockerList = function() {
  this.setBlockerList([]);
};


/**
 * optional uint32 affectedInstanceId = 1;
 * @return {number}
 */
proto.EffectViolationBlocking.prototype.getAffectedinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.EffectViolationBlocking.prototype.setAffectedinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Prompt prompt = 2;
 * @return {?proto.Prompt}
 */
proto.EffectViolationBlocking.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 2));
};


/** @param {?proto.Prompt|undefined} value */
proto.EffectViolationBlocking.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.EffectViolationBlocking.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EffectViolationBlocking.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResultCode result = 3;
 * @return {!proto.ResultCode}
 */
proto.EffectViolationBlocking.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ResultCode} value */
proto.EffectViolationBlocking.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EndTurn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EndTurn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EndTurn.displayName = 'proto.EndTurn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EndTurn.prototype.toObject = function(opt_includeInstance) {
  return proto.EndTurn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EndTurn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndTurn.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EndTurn}
 */
proto.EndTurn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EndTurn;
  return proto.EndTurn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EndTurn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EndTurn}
 */
proto.EndTurn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EndTurn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EndTurn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EndTurn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndTurn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FinalMatchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FinalMatchResult.repeatedFields_, null);
};
goog.inherits(proto.FinalMatchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FinalMatchResult.displayName = 'proto.FinalMatchResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FinalMatchResult.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FinalMatchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.FinalMatchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FinalMatchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FinalMatchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resultlistList: jspb.Message.toObjectList(msg.getResultlistList(),
    proto.ResultSpec.toObject, includeInstance),
    errormessage: jspb.Message.getFieldWithDefault(msg, 10, ""),
    matchforceresult: (f = msg.getMatchforceresult()) && proto.ResultSpec.toObject(includeInstance, f),
    matchcompletedreason: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FinalMatchResult}
 */
proto.FinalMatchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FinalMatchResult;
  return proto.FinalMatchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FinalMatchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FinalMatchResult}
 */
proto.FinalMatchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 5:
      var value = new proto.ResultSpec;
      reader.readMessage(value,proto.ResultSpec.deserializeBinaryFromReader);
      msg.addResultlist(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 2:
      var value = new proto.ResultSpec;
      reader.readMessage(value,proto.ResultSpec.deserializeBinaryFromReader);
      msg.setMatchforceresult(value);
      break;
    case 3:
      var value = /** @type {!proto.MatchCompletedReasonType} */ (reader.readEnum());
      msg.setMatchcompletedreason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FinalMatchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FinalMatchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FinalMatchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FinalMatchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResultlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ResultSpec.serializeBinaryToWriter
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMatchforceresult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ResultSpec.serializeBinaryToWriter
    );
  }
  f = message.getMatchcompletedreason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string matchId = 1;
 * @return {string}
 */
proto.FinalMatchResult.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FinalMatchResult.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ResultSpec resultList = 5;
 * @return {!Array.<!proto.ResultSpec>}
 */
proto.FinalMatchResult.prototype.getResultlistList = function() {
  return /** @type{!Array.<!proto.ResultSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ResultSpec, 5));
};


/** @param {!Array.<!proto.ResultSpec>} value */
proto.FinalMatchResult.prototype.setResultlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ResultSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ResultSpec}
 */
proto.FinalMatchResult.prototype.addResultlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ResultSpec, opt_index);
};


proto.FinalMatchResult.prototype.clearResultlistList = function() {
  this.setResultlistList([]);
};


/**
 * optional string errorMessage = 10;
 * @return {string}
 */
proto.FinalMatchResult.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.FinalMatchResult.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional ResultSpec matchForceResult = 2;
 * @return {?proto.ResultSpec}
 */
proto.FinalMatchResult.prototype.getMatchforceresult = function() {
  return /** @type{?proto.ResultSpec} */ (
    jspb.Message.getWrapperField(this, proto.ResultSpec, 2));
};


/** @param {?proto.ResultSpec|undefined} value */
proto.FinalMatchResult.prototype.setMatchforceresult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FinalMatchResult.prototype.clearMatchforceresult = function() {
  this.setMatchforceresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FinalMatchResult.prototype.hasMatchforceresult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MatchCompletedReasonType matchCompletedReason = 3;
 * @return {!proto.MatchCompletedReasonType}
 */
proto.FinalMatchResult.prototype.getMatchcompletedreason = function() {
  return /** @type {!proto.MatchCompletedReasonType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.MatchCompletedReasonType} value */
proto.FinalMatchResult.prototype.setMatchcompletedreason = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ForceDrawReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ForceDrawReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ForceDrawReq.displayName = 'proto.ForceDrawReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ForceDrawReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ForceDrawReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ForceDrawReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ForceDrawReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ForceDrawReq}
 */
proto.ForceDrawReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ForceDrawReq;
  return proto.ForceDrawReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ForceDrawReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ForceDrawReq}
 */
proto.ForceDrawReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MatchScope} */ (reader.readEnum());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ForceDrawReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ForceDrawReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ForceDrawReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ForceDrawReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional MatchScope scope = 1;
 * @return {!proto.MatchScope}
 */
proto.ForceDrawReq.prototype.getScope = function() {
  return /** @type {!proto.MatchScope} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MatchScope} value */
proto.ForceDrawReq.prototype.setScope = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FrontDoorToClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.FrontDoorToClientMessage.oneofGroups_);
};
goog.inherits(proto.FrontDoorToClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FrontDoorToClientMessage.displayName = 'proto.FrontDoorToClientMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.FrontDoorToClientMessage.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.FrontDoorToClientMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  LOBBYTOCLIENTMESSAGE: 1
};

/**
 * @return {proto.FrontDoorToClientMessage.MessageCase}
 */
proto.FrontDoorToClientMessage.prototype.getMessageCase = function() {
  return /** @type {proto.FrontDoorToClientMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.FrontDoorToClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FrontDoorToClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.FrontDoorToClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FrontDoorToClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FrontDoorToClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    lobbytoclientmessage: (f = msg.getLobbytoclientmessage()) && proto.LobbyToClientMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FrontDoorToClientMessage}
 */
proto.FrontDoorToClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FrontDoorToClientMessage;
  return proto.FrontDoorToClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FrontDoorToClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FrontDoorToClientMessage}
 */
proto.FrontDoorToClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LobbyToClientMessage;
      reader.readMessage(value,proto.LobbyToClientMessage.deserializeBinaryFromReader);
      msg.setLobbytoclientmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FrontDoorToClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FrontDoorToClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FrontDoorToClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FrontDoorToClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLobbytoclientmessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LobbyToClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional LobbyToClientMessage lobbyToClientMessage = 1;
 * @return {?proto.LobbyToClientMessage}
 */
proto.FrontDoorToClientMessage.prototype.getLobbytoclientmessage = function() {
  return /** @type{?proto.LobbyToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.LobbyToClientMessage, 1));
};


/** @param {?proto.LobbyToClientMessage|undefined} value */
proto.FrontDoorToClientMessage.prototype.setLobbytoclientmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.FrontDoorToClientMessage.oneofGroups_[0], value);
};


proto.FrontDoorToClientMessage.prototype.clearLobbytoclientmessage = function() {
  this.setLobbytoclientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FrontDoorToClientMessage.prototype.hasLobbytoclientmessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRECancelScheduledMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRECancelScheduledMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRECancelScheduledMessage.displayName = 'proto.GRECancelScheduledMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRECancelScheduledMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GRECancelScheduledMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRECancelScheduledMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRECancelScheduledMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timerid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRECancelScheduledMessage}
 */
proto.GRECancelScheduledMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRECancelScheduledMessage;
  return proto.GRECancelScheduledMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRECancelScheduledMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRECancelScheduledMessage}
 */
proto.GRECancelScheduledMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRECancelScheduledMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRECancelScheduledMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRECancelScheduledMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRECancelScheduledMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 timerId = 1;
 * @return {number}
 */
proto.GRECancelScheduledMessage.prototype.getTimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRECancelScheduledMessage.prototype.setTimerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREConfigRequest.displayName = 'proto.GREConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    greconfiguration: (f = msg.getGreconfiguration()) && proto.GREConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREConfigRequest}
 */
proto.GREConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREConfigRequest;
  return proto.GREConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREConfigRequest}
 */
proto.GREConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GREConfiguration;
      reader.readMessage(value,proto.GREConfiguration.deserializeBinaryFromReader);
      msg.setGreconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGreconfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GREConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional GREConfiguration greConfiguration = 1;
 * @return {?proto.GREConfiguration}
 */
proto.GREConfigRequest.prototype.getGreconfiguration = function() {
  return /** @type{?proto.GREConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.GREConfiguration, 1));
};


/** @param {?proto.GREConfiguration|undefined} value */
proto.GREConfigRequest.prototype.setGreconfiguration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GREConfigRequest.prototype.clearGreconfiguration = function() {
  this.setGreconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREConfigRequest.prototype.hasGreconfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREConfiguration.displayName = 'proto.GREConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.GREConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamestateredactorconfiguration: (f = msg.getGamestateredactorconfiguration()) && proto.GameStateRedactorConfiguration.toObject(includeInstance, f),
    clipsconfiguration: (f = msg.getClipsconfiguration()) && proto.CLIPSConfiguration.toObject(includeInstance, f),
    checkpointconfiguration: (f = msg.getCheckpointconfiguration()) && proto.CheckpointConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREConfiguration}
 */
proto.GREConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREConfiguration;
  return proto.GREConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREConfiguration}
 */
proto.GREConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GameStateRedactorConfiguration;
      reader.readMessage(value,proto.GameStateRedactorConfiguration.deserializeBinaryFromReader);
      msg.setGamestateredactorconfiguration(value);
      break;
    case 2:
      var value = new proto.CLIPSConfiguration;
      reader.readMessage(value,proto.CLIPSConfiguration.deserializeBinaryFromReader);
      msg.setClipsconfiguration(value);
      break;
    case 3:
      var value = new proto.CheckpointConfiguration;
      reader.readMessage(value,proto.CheckpointConfiguration.deserializeBinaryFromReader);
      msg.setCheckpointconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamestateredactorconfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GameStateRedactorConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getClipsconfiguration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CLIPSConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getCheckpointconfiguration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CheckpointConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameStateRedactorConfiguration gameStateRedactorConfiguration = 1;
 * @return {?proto.GameStateRedactorConfiguration}
 */
proto.GREConfiguration.prototype.getGamestateredactorconfiguration = function() {
  return /** @type{?proto.GameStateRedactorConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.GameStateRedactorConfiguration, 1));
};


/** @param {?proto.GameStateRedactorConfiguration|undefined} value */
proto.GREConfiguration.prototype.setGamestateredactorconfiguration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GREConfiguration.prototype.clearGamestateredactorconfiguration = function() {
  this.setGamestateredactorconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREConfiguration.prototype.hasGamestateredactorconfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CLIPSConfiguration clipsConfiguration = 2;
 * @return {?proto.CLIPSConfiguration}
 */
proto.GREConfiguration.prototype.getClipsconfiguration = function() {
  return /** @type{?proto.CLIPSConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.CLIPSConfiguration, 2));
};


/** @param {?proto.CLIPSConfiguration|undefined} value */
proto.GREConfiguration.prototype.setClipsconfiguration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GREConfiguration.prototype.clearClipsconfiguration = function() {
  this.setClipsconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREConfiguration.prototype.hasClipsconfiguration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CheckpointConfiguration checkpointConfiguration = 3;
 * @return {?proto.CheckpointConfiguration}
 */
proto.GREConfiguration.prototype.getCheckpointconfiguration = function() {
  return /** @type{?proto.CheckpointConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.CheckpointConfiguration, 3));
};


/** @param {?proto.CheckpointConfiguration|undefined} value */
proto.GREConfiguration.prototype.setCheckpointconfiguration = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GREConfiguration.prototype.clearCheckpointconfiguration = function() {
  this.setCheckpointconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREConfiguration.prototype.hasCheckpointconfiguration = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRECreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRECreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRECreateRequest.displayName = 'proto.GRECreateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRECreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GRECreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRECreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRECreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    greid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    majorver: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minorver: jspb.Message.getFieldWithDefault(msg, 5, 0),
    revisionver: jspb.Message.getFieldWithDefault(msg, 6, 0),
    buildver: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRECreateRequest}
 */
proto.GRECreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRECreateRequest;
  return proto.GRECreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRECreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRECreateRequest}
 */
proto.GRECreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGreid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajorver(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinorver(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRevisionver(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuildver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRECreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRECreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRECreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRECreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGreid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMajorver();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMinorver();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getRevisionver();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getBuildver();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional string matchID = 2;
 * @return {string}
 */
proto.GRECreateRequest.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GRECreateRequest.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 greID = 1;
 * @return {number}
 */
proto.GRECreateRequest.prototype.getGreid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRECreateRequest.prototype.setGreid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 gameID = 3;
 * @return {number}
 */
proto.GRECreateRequest.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GRECreateRequest.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 majorVer = 4;
 * @return {number}
 */
proto.GRECreateRequest.prototype.getMajorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GRECreateRequest.prototype.setMajorver = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 minorVer = 5;
 * @return {number}
 */
proto.GRECreateRequest.prototype.getMinorver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GRECreateRequest.prototype.setMinorver = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 revisionVer = 6;
 * @return {number}
 */
proto.GRECreateRequest.prototype.getRevisionver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GRECreateRequest.prototype.setRevisionver = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 buildVer = 7;
 * @return {number}
 */
proto.GRECreateRequest.prototype.getBuildver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GRECreateRequest.prototype.setBuildver = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRECreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRECreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRECreateResponse.displayName = 'proto.GRECreateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRECreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GRECreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRECreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRECreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    greid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRECreateResponse}
 */
proto.GRECreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRECreateResponse;
  return proto.GRECreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRECreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRECreateResponse}
 */
proto.GRECreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGreid(value);
      break;
    case 2:
      var value = /** @type {!proto.GRETHHostErrorCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRECreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRECreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRECreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRECreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGreid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 greID = 1;
 * @return {number}
 */
proto.GRECreateResponse.prototype.getGreid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRECreateResponse.prototype.setGreid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GRETHHostErrorCode result = 2;
 * @return {!proto.GRETHHostErrorCode}
 */
proto.GRECreateResponse.prototype.getResult = function() {
  return /** @type {!proto.GRETHHostErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GRETHHostErrorCode} value */
proto.GRECreateResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREDestroyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREDestroyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREDestroyRequest.displayName = 'proto.GREDestroyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREDestroyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREDestroyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREDestroyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREDestroyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    greid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREDestroyRequest}
 */
proto.GREDestroyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREDestroyRequest;
  return proto.GREDestroyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREDestroyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREDestroyRequest}
 */
proto.GREDestroyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGreid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREDestroyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREDestroyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREDestroyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREDestroyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGreid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 greID = 1;
 * @return {number}
 */
proto.GREDestroyRequest.prototype.getGreid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREDestroyRequest.prototype.setGreid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREDestroyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREDestroyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREDestroyResponse.displayName = 'proto.GREDestroyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREDestroyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GREDestroyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREDestroyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREDestroyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    greid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREDestroyResponse}
 */
proto.GREDestroyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREDestroyResponse;
  return proto.GREDestroyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREDestroyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREDestroyResponse}
 */
proto.GREDestroyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGreid(value);
      break;
    case 2:
      var value = /** @type {!proto.GRETHHostErrorCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREDestroyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREDestroyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREDestroyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREDestroyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGreid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 greID = 1;
 * @return {number}
 */
proto.GREDestroyResponse.prototype.getGreid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREDestroyResponse.prototype.setGreid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GRETHHostErrorCode result = 2;
 * @return {!proto.GRETHHostErrorCode}
 */
proto.GREDestroyResponse.prototype.getResult = function() {
  return /** @type {!proto.GRETHHostErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GRETHHostErrorCode} value */
proto.GREDestroyResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREExpireTimerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREExpireTimerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREExpireTimerRequest.displayName = 'proto.GREExpireTimerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREExpireTimerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREExpireTimerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREExpireTimerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREExpireTimerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    timerid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREExpireTimerRequest}
 */
proto.GREExpireTimerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREExpireTimerRequest;
  return proto.GREExpireTimerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREExpireTimerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREExpireTimerRequest}
 */
proto.GREExpireTimerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREExpireTimerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREExpireTimerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREExpireTimerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREExpireTimerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 timerId = 1;
 * @return {number}
 */
proto.GREExpireTimerRequest.prototype.getTimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREExpireTimerRequest.prototype.setTimerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREFatalError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREFatalError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREFatalError.displayName = 'proto.GREFatalError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREFatalError.prototype.toObject = function(opt_includeInstance) {
  return proto.GREFatalError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREFatalError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREFatalError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errormessage: msg.getErrormessage_asB64(),
    greid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREFatalError}
 */
proto.GREFatalError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREFatalError;
  return proto.GREFatalError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREFatalError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREFatalError}
 */
proto.GREFatalError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrormessage(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGreid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREFatalError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREFatalError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREFatalError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREFatalError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrormessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getGreid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional bytes errorMessage = 2;
 * @return {!(string|Uint8Array)}
 */
proto.GREFatalError.prototype.getErrormessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes errorMessage = 2;
 * This is a type-conversion wrapper around `getErrormessage()`
 * @return {string}
 */
proto.GREFatalError.prototype.getErrormessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrormessage()));
};


/**
 * optional bytes errorMessage = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrormessage()`
 * @return {!Uint8Array}
 */
proto.GREFatalError.prototype.getErrormessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrormessage()));
};


/** @param {!(string|Uint8Array)} value */
proto.GREFatalError.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 greID = 1;
 * @return {number}
 */
proto.GREFatalError.prototype.getGreid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREFatalError.prototype.setGreid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREForceResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREForceResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREForceResultRequest.displayName = 'proto.GREForceResultRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREForceResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREForceResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREForceResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREForceResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.ResultSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREForceResultRequest}
 */
proto.GREForceResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREForceResultRequest;
  return proto.GREForceResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREForceResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREForceResultRequest}
 */
proto.GREForceResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResultSpec;
      reader.readMessage(value,proto.ResultSpec.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREForceResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREForceResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREForceResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREForceResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResultSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultSpec result = 1;
 * @return {?proto.ResultSpec}
 */
proto.GREForceResultRequest.prototype.getResult = function() {
  return /** @type{?proto.ResultSpec} */ (
    jspb.Message.getWrapperField(this, proto.ResultSpec, 1));
};


/** @param {?proto.ResultSpec|undefined} value */
proto.GREForceResultRequest.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GREForceResultRequest.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREForceResultRequest.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREGameLoggerConfigureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREGameLoggerConfigureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREGameLoggerConfigureRequest.displayName = 'proto.GREGameLoggerConfigureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREGameLoggerConfigureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREGameLoggerConfigureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREGameLoggerConfigureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREGameLoggerConfigureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    loadfilename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    loadpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    savefilename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    savepath: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREGameLoggerConfigureRequest}
 */
proto.GREGameLoggerConfigureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREGameLoggerConfigureRequest;
  return proto.GREGameLoggerConfigureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREGameLoggerConfigureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREGameLoggerConfigureRequest}
 */
proto.GREGameLoggerConfigureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoadfilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoadpath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSavefilename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSavepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREGameLoggerConfigureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREGameLoggerConfigureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREGameLoggerConfigureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREGameLoggerConfigureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoadfilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLoadpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSavefilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSavepath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string loadFilename = 1;
 * @return {string}
 */
proto.GREGameLoggerConfigureRequest.prototype.getLoadfilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GREGameLoggerConfigureRequest.prototype.setLoadfilename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string loadPath = 2;
 * @return {string}
 */
proto.GREGameLoggerConfigureRequest.prototype.getLoadpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GREGameLoggerConfigureRequest.prototype.setLoadpath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string saveFilename = 3;
 * @return {string}
 */
proto.GREGameLoggerConfigureRequest.prototype.getSavefilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GREGameLoggerConfigureRequest.prototype.setSavefilename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string savePath = 4;
 * @return {string}
 */
proto.GREGameLoggerConfigureRequest.prototype.getSavepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GREGameLoggerConfigureRequest.prototype.setSavepath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREInterpretRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREInterpretRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREInterpretRequest.displayName = 'proto.GREInterpretRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREInterpretRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREInterpretRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREInterpretRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREInterpretRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clips: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREInterpretRequest}
 */
proto.GREInterpretRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREInterpretRequest;
  return proto.GREInterpretRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREInterpretRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREInterpretRequest}
 */
proto.GREInterpretRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClips(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREInterpretRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREInterpretRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREInterpretRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREInterpretRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClips();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string clips = 1;
 * @return {string}
 */
proto.GREInterpretRequest.prototype.getClips = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GREInterpretRequest.prototype.setClips = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREReplacePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREReplacePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREReplacePlayer.displayName = 'proto.GREReplacePlayer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREReplacePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.GREReplacePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREReplacePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREReplacePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemseatid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREReplacePlayer}
 */
proto.GREReplacePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREReplacePlayer;
  return proto.GREReplacePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREReplacePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREReplacePlayer}
 */
proto.GREReplacePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREReplacePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREReplacePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREReplacePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREReplacePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 systemSeatId = 1;
 * @return {number}
 */
proto.GREReplacePlayer.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREReplacePlayer.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREResumeMatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREResumeMatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREResumeMatchRequest.displayName = 'proto.GREResumeMatchRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREResumeMatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREResumeMatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREResumeMatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREResumeMatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    binarygamestate: (f = msg.getBinarygamestate()) && proto.BinaryGameState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREResumeMatchRequest}
 */
proto.GREResumeMatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREResumeMatchRequest;
  return proto.GREResumeMatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREResumeMatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREResumeMatchRequest}
 */
proto.GREResumeMatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BinaryGameState;
      reader.readMessage(value,proto.BinaryGameState.deserializeBinaryFromReader);
      msg.setBinarygamestate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREResumeMatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREResumeMatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREResumeMatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREResumeMatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBinarygamestate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.BinaryGameState.serializeBinaryToWriter
    );
  }
};


/**
 * optional BinaryGameState binaryGameState = 1;
 * @return {?proto.BinaryGameState}
 */
proto.GREResumeMatchRequest.prototype.getBinarygamestate = function() {
  return /** @type{?proto.BinaryGameState} */ (
    jspb.Message.getWrapperField(this, proto.BinaryGameState, 1));
};


/** @param {?proto.BinaryGameState|undefined} value */
proto.GREResumeMatchRequest.prototype.setBinarygamestate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GREResumeMatchRequest.prototype.clearBinarygamestate = function() {
  this.setBinarygamestate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREResumeMatchRequest.prototype.hasBinarygamestate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREScheduledMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREScheduledMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREScheduledMessage.displayName = 'proto.GREScheduledMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREScheduledMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GREScheduledMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREScheduledMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREScheduledMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    delayms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: (f = msg.getMessage()) && proto.ServerToGREMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREScheduledMessage}
 */
proto.GREScheduledMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREScheduledMessage;
  return proto.GREScheduledMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREScheduledMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREScheduledMessage}
 */
proto.GREScheduledMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDelayms(value);
      break;
    case 3:
      var value = new proto.ServerToGREMessage;
      reader.readMessage(value,proto.ServerToGREMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREScheduledMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREScheduledMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREScheduledMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREScheduledMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDelayms();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ServerToGREMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 timerId = 1;
 * @return {number}
 */
proto.GREScheduledMessage.prototype.getTimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREScheduledMessage.prototype.setTimerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 delayMs = 2;
 * @return {number}
 */
proto.GREScheduledMessage.prototype.getDelayms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GREScheduledMessage.prototype.setDelayms = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ServerToGREMessage message = 3;
 * @return {?proto.ServerToGREMessage}
 */
proto.GREScheduledMessage.prototype.getMessage = function() {
  return /** @type{?proto.ServerToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ServerToGREMessage, 3));
};


/** @param {?proto.ServerToGREMessage|undefined} value */
proto.GREScheduledMessage.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GREScheduledMessage.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREScheduledMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREStartMatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GREStartMatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREStartMatchRequest.displayName = 'proto.GREStartMatchRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREStartMatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GREStartMatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREStartMatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREStartMatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchconfig: (f = msg.getMatchconfig()) && proto.MatchConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREStartMatchRequest}
 */
proto.GREStartMatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREStartMatchRequest;
  return proto.GREStartMatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREStartMatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREStartMatchRequest}
 */
proto.GREStartMatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchConfig;
      reader.readMessage(value,proto.MatchConfig.deserializeBinaryFromReader);
      msg.setMatchconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREStartMatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREStartMatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREStartMatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREStartMatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchConfig matchConfig = 1;
 * @return {?proto.MatchConfig}
 */
proto.GREStartMatchRequest.prototype.getMatchconfig = function() {
  return /** @type{?proto.MatchConfig} */ (
    jspb.Message.getWrapperField(this, proto.MatchConfig, 1));
};


/** @param {?proto.MatchConfig|undefined} value */
proto.GREStartMatchRequest.prototype.setMatchconfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GREStartMatchRequest.prototype.clearMatchconfig = function() {
  this.setMatchconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREStartMatchRequest.prototype.hasMatchconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRESubmitDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GRESubmitDeckRequest.repeatedFields_, null);
};
goog.inherits(proto.GRESubmitDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRESubmitDeckRequest.displayName = 'proto.GRESubmitDeckRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GRESubmitDeckRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRESubmitDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GRESubmitDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRESubmitDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRESubmitDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckcardsList: jspb.Message.getRepeatedField(msg, 2),
    sideboardcardsList: jspb.Message.getRepeatedField(msg, 3),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRESubmitDeckRequest}
 */
proto.GRESubmitDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRESubmitDeckRequest;
  return proto.GRESubmitDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRESubmitDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRESubmitDeckRequest}
 */
proto.GRESubmitDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeckcardsList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSideboardcardsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRESubmitDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRESubmitDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRESubmitDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRESubmitDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckcardsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getSideboardcardsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 deckCards = 2;
 * @return {!Array.<number>}
 */
proto.GRESubmitDeckRequest.prototype.getDeckcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.GRESubmitDeckRequest.prototype.setDeckcardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GRESubmitDeckRequest.prototype.addDeckcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.GRESubmitDeckRequest.prototype.clearDeckcardsList = function() {
  this.setDeckcardsList([]);
};


/**
 * repeated uint32 sideboardCards = 3;
 * @return {!Array.<number>}
 */
proto.GRESubmitDeckRequest.prototype.getSideboardcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.GRESubmitDeckRequest.prototype.setSideboardcardsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GRESubmitDeckRequest.prototype.addSideboardcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.GRESubmitDeckRequest.prototype.clearSideboardcardsList = function() {
  this.setSideboardcardsList([]);
};


/**
 * optional uint32 systemSeatId = 1;
 * @return {number}
 */
proto.GRESubmitDeckRequest.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRESubmitDeckRequest.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETHHostEmulatorLaunch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRETHHostEmulatorLaunch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETHHostEmulatorLaunch.displayName = 'proto.GRETHHostEmulatorLaunch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETHHostEmulatorLaunch.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETHHostEmulatorLaunch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETHHostEmulatorLaunch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorLaunch.toObject = function(includeInstance, msg) {
  var f, obj = {
    programname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    executablepath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sharedlibraryfilename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    greirfilename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    logfilename: jspb.Message.getFieldWithDefault(msg, 8, ""),
    syslogipaddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
    syslogtcpport: jspb.Message.getFieldWithDefault(msg, 10, ""),
    syslogprocid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    outfilename: jspb.Message.getFieldWithDefault(msg, 12, ""),
    linkid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hostid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sutid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    enableredaction: jspb.Message.getFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETHHostEmulatorLaunch}
 */
proto.GRETHHostEmulatorLaunch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETHHostEmulatorLaunch;
  return proto.GRETHHostEmulatorLaunch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETHHostEmulatorLaunch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETHHostEmulatorLaunch}
 */
proto.GRETHHostEmulatorLaunch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProgramname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutablepath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSharedlibraryfilename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGreirfilename(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogfilename(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSyslogipaddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSyslogtcpport(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSyslogprocid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutfilename(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLinkid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHostid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSutid(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableredaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETHHostEmulatorLaunch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETHHostEmulatorLaunch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETHHostEmulatorLaunch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorLaunch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgramname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExecutablepath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSharedlibraryfilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGreirfilename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLogfilename();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSyslogipaddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSyslogtcpport();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSyslogprocid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getOutfilename();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLinkid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getHostid();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSutid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getEnableredaction();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional string programName = 1;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getProgramname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setProgramname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string executablePath = 2;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getExecutablepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setExecutablepath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sharedLibraryFilename = 3;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getSharedlibraryfilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setSharedlibraryfilename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string greIRFilename = 4;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getGreirfilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setGreirfilename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string logFilename = 8;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getLogfilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setLogfilename = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string syslogIPAddress = 9;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getSyslogipaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setSyslogipaddress = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string syslogTCPPort = 10;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getSyslogtcpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setSyslogtcpport = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string syslogProcID = 11;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getSyslogprocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setSyslogprocid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string outFilename = 12;
 * @return {string}
 */
proto.GRETHHostEmulatorLaunch.prototype.getOutfilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.GRETHHostEmulatorLaunch.prototype.setOutfilename = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 linkID = 5;
 * @return {number}
 */
proto.GRETHHostEmulatorLaunch.prototype.getLinkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorLaunch.prototype.setLinkid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 hostID = 6;
 * @return {number}
 */
proto.GRETHHostEmulatorLaunch.prototype.getHostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorLaunch.prototype.setHostid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 sutID = 7;
 * @return {number}
 */
proto.GRETHHostEmulatorLaunch.prototype.getSutid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorLaunch.prototype.setSutid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool enableRedaction = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GRETHHostEmulatorLaunch.prototype.getEnableredaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.GRETHHostEmulatorLaunch.prototype.setEnableredaction = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETHHostEmulatorLaunchResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRETHHostEmulatorLaunchResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETHHostEmulatorLaunchResp.displayName = 'proto.GRETHHostEmulatorLaunchResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETHHostEmulatorLaunchResp.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETHHostEmulatorLaunchResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETHHostEmulatorLaunchResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorLaunchResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hostid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETHHostEmulatorLaunchResp}
 */
proto.GRETHHostEmulatorLaunchResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETHHostEmulatorLaunchResp;
  return proto.GRETHHostEmulatorLaunchResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETHHostEmulatorLaunchResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETHHostEmulatorLaunchResp}
 */
proto.GRETHHostEmulatorLaunchResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHostid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETHHostEmulatorLaunchResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETHHostEmulatorLaunchResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETHHostEmulatorLaunchResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorLaunchResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHostid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 result = 1;
 * @return {number}
 */
proto.GRETHHostEmulatorLaunchResp.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorLaunchResp.prototype.setResult = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 hostID = 2;
 * @return {number}
 */
proto.GRETHHostEmulatorLaunchResp.prototype.getHostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorLaunchResp.prototype.setHostid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 pID = 3;
 * @return {number}
 */
proto.GRETHHostEmulatorLaunchResp.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorLaunchResp.prototype.setPid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETHHostEmulatorShutdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRETHHostEmulatorShutdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETHHostEmulatorShutdown.displayName = 'proto.GRETHHostEmulatorShutdown';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETHHostEmulatorShutdown.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETHHostEmulatorShutdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETHHostEmulatorShutdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorShutdown.toObject = function(includeInstance, msg) {
  var f, obj = {
    shutdownhostid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETHHostEmulatorShutdown}
 */
proto.GRETHHostEmulatorShutdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETHHostEmulatorShutdown;
  return proto.GRETHHostEmulatorShutdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETHHostEmulatorShutdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETHHostEmulatorShutdown}
 */
proto.GRETHHostEmulatorShutdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShutdownhostid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETHHostEmulatorShutdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETHHostEmulatorShutdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETHHostEmulatorShutdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorShutdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShutdownhostid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 shutdownHostID = 1;
 * @return {number}
 */
proto.GRETHHostEmulatorShutdown.prototype.getShutdownhostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorShutdown.prototype.setShutdownhostid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETHHostEmulatorShutdownResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRETHHostEmulatorShutdownResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETHHostEmulatorShutdownResp.displayName = 'proto.GRETHHostEmulatorShutdownResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETHHostEmulatorShutdownResp.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETHHostEmulatorShutdownResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETHHostEmulatorShutdownResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorShutdownResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shutdownhostid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETHHostEmulatorShutdownResp}
 */
proto.GRETHHostEmulatorShutdownResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETHHostEmulatorShutdownResp;
  return proto.GRETHHostEmulatorShutdownResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETHHostEmulatorShutdownResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETHHostEmulatorShutdownResp}
 */
proto.GRETHHostEmulatorShutdownResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShutdownhostid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETHHostEmulatorShutdownResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETHHostEmulatorShutdownResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETHHostEmulatorShutdownResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETHHostEmulatorShutdownResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getShutdownhostid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 result = 1;
 * @return {number}
 */
proto.GRETHHostEmulatorShutdownResp.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorShutdownResp.prototype.setResult = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 shutdownHostID = 2;
 * @return {number}
 */
proto.GRETHHostEmulatorShutdownResp.prototype.getShutdownhostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GRETHHostEmulatorShutdownResp.prototype.setShutdownhostid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETickMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRETickMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETickMessage.displayName = 'proto.GRETickMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETickMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETickMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETickMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETickMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETickMessage}
 */
proto.GRETickMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETickMessage;
  return proto.GRETickMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETickMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETickMessage}
 */
proto.GRETickMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETickMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETickMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETickMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETickMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETimeoutMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRETimeoutMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETimeoutMessage.displayName = 'proto.GRETimeoutMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETimeoutMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETimeoutMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETimeoutMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETimeoutMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETimeoutMessage}
 */
proto.GRETimeoutMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETimeoutMessage;
  return proto.GRETimeoutMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETimeoutMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETimeoutMessage}
 */
proto.GRETimeoutMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeatid(value);
      break;
    case 2:
      var value = /** @type {!proto.TimeoutType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETimeoutMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETimeoutMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETimeoutMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETimeoutMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 seatId = 1;
 * @return {number}
 */
proto.GRETimeoutMessage.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRETimeoutMessage.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TimeoutType type = 2;
 * @return {!proto.TimeoutType}
 */
proto.GRETimeoutMessage.prototype.getType = function() {
  return /** @type {!proto.TimeoutType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.TimeoutType} value */
proto.GRETimeoutMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETimerExpiredMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GRETimerExpiredMessage.oneofGroups_);
};
goog.inherits(proto.GRETimerExpiredMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETimerExpiredMessage.displayName = 'proto.GRETimerExpiredMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GRETimerExpiredMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.GRETimerExpiredMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  SERVERTOGREMESSAGE: 2,
  CLIENTTOGREMESSAGE: 3
};

/**
 * @return {proto.GRETimerExpiredMessage.MessageCase}
 */
proto.GRETimerExpiredMessage.prototype.getMessageCase = function() {
  return /** @type {proto.GRETimerExpiredMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.GRETimerExpiredMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETimerExpiredMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETimerExpiredMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETimerExpiredMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETimerExpiredMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    expiredtimerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    servertogremessage: (f = msg.getServertogremessage()) && proto.ServerToGREMessage.toObject(includeInstance, f),
    clienttogremessage: (f = msg.getClienttogremessage()) && proto.ClientToGREMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETimerExpiredMessage}
 */
proto.GRETimerExpiredMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETimerExpiredMessage;
  return proto.GRETimerExpiredMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETimerExpiredMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETimerExpiredMessage}
 */
proto.GRETimerExpiredMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpiredtimerid(value);
      break;
    case 2:
      var value = new proto.ServerToGREMessage;
      reader.readMessage(value,proto.ServerToGREMessage.deserializeBinaryFromReader);
      msg.setServertogremessage(value);
      break;
    case 3:
      var value = new proto.ClientToGREMessage;
      reader.readMessage(value,proto.ClientToGREMessage.deserializeBinaryFromReader);
      msg.setClienttogremessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETimerExpiredMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETimerExpiredMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETimerExpiredMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETimerExpiredMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpiredtimerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getServertogremessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ServerToGREMessage.serializeBinaryToWriter
    );
  }
  f = message.getClienttogremessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ClientToGREMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 expiredTimerId = 1;
 * @return {number}
 */
proto.GRETimerExpiredMessage.prototype.getExpiredtimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRETimerExpiredMessage.prototype.setExpiredtimerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ServerToGREMessage serverToGREMessage = 2;
 * @return {?proto.ServerToGREMessage}
 */
proto.GRETimerExpiredMessage.prototype.getServertogremessage = function() {
  return /** @type{?proto.ServerToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ServerToGREMessage, 2));
};


/** @param {?proto.ServerToGREMessage|undefined} value */
proto.GRETimerExpiredMessage.prototype.setServertogremessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.GRETimerExpiredMessage.oneofGroups_[0], value);
};


proto.GRETimerExpiredMessage.prototype.clearServertogremessage = function() {
  this.setServertogremessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GRETimerExpiredMessage.prototype.hasServertogremessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClientToGREMessage clientToGREMessage = 3;
 * @return {?proto.ClientToGREMessage}
 */
proto.GRETimerExpiredMessage.prototype.getClienttogremessage = function() {
  return /** @type{?proto.ClientToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToGREMessage, 3));
};


/** @param {?proto.ClientToGREMessage|undefined} value */
proto.GRETimerExpiredMessage.prototype.setClienttogremessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.GRETimerExpiredMessage.oneofGroups_[0], value);
};


proto.GRETimerExpiredMessage.prototype.clearClienttogremessage = function() {
  this.setClienttogremessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GRETimerExpiredMessage.prototype.hasClienttogremessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GRETimerExpiredNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GRETimerExpiredNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GRETimerExpiredNotification.displayName = 'proto.GRETimerExpiredNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GRETimerExpiredNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.GRETimerExpiredNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GRETimerExpiredNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETimerExpiredNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    timerid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GRETimerExpiredNotification}
 */
proto.GRETimerExpiredNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GRETimerExpiredNotification;
  return proto.GRETimerExpiredNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GRETimerExpiredNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GRETimerExpiredNotification}
 */
proto.GRETimerExpiredNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GRETimerExpiredNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GRETimerExpiredNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GRETimerExpiredNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GRETimerExpiredNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 timerID = 1;
 * @return {number}
 */
proto.GRETimerExpiredNotification.prototype.getTimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GRETimerExpiredNotification.prototype.setTimerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREToAnyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GREToAnyMessage.oneofGroups_);
};
goog.inherits(proto.GREToAnyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREToAnyMessage.displayName = 'proto.GREToAnyMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GREToAnyMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.GREToAnyMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  GRETOSERVERMESSAGE: 2,
  GRETOCLIENTMESSAGE: 3
};

/**
 * @return {proto.GREToAnyMessage.MessageCase}
 */
proto.GREToAnyMessage.prototype.getMessageCase = function() {
  return /** @type {proto.GREToAnyMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.GREToAnyMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREToAnyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GREToAnyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREToAnyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREToAnyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gretoservermessage: (f = msg.getGretoservermessage()) && proto.GREToServerMessage.toObject(includeInstance, f),
    gretoclientmessage: (f = msg.getGretoclientmessage()) && proto.GREToClientMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREToAnyMessage}
 */
proto.GREToAnyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREToAnyMessage;
  return proto.GREToAnyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREToAnyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREToAnyMessage}
 */
proto.GREToAnyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.GREToServerMessage;
      reader.readMessage(value,proto.GREToServerMessage.deserializeBinaryFromReader);
      msg.setGretoservermessage(value);
      break;
    case 3:
      var value = new proto.GREToClientMessage;
      reader.readMessage(value,proto.GREToClientMessage.deserializeBinaryFromReader);
      msg.setGretoclientmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREToAnyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREToAnyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREToAnyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREToAnyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGretoservermessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GREToServerMessage.serializeBinaryToWriter
    );
  }
  f = message.getGretoclientmessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GREToClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.GREToAnyMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREToAnyMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GREToServerMessage gREToServerMessage = 2;
 * @return {?proto.GREToServerMessage}
 */
proto.GREToAnyMessage.prototype.getGretoservermessage = function() {
  return /** @type{?proto.GREToServerMessage} */ (
    jspb.Message.getWrapperField(this, proto.GREToServerMessage, 2));
};


/** @param {?proto.GREToServerMessage|undefined} value */
proto.GREToAnyMessage.prototype.setGretoservermessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.GREToAnyMessage.oneofGroups_[0], value);
};


proto.GREToAnyMessage.prototype.clearGretoservermessage = function() {
  this.setGretoservermessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToAnyMessage.prototype.hasGretoservermessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GREToClientMessage gREToClientMessage = 3;
 * @return {?proto.GREToClientMessage}
 */
proto.GREToAnyMessage.prototype.getGretoclientmessage = function() {
  return /** @type{?proto.GREToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.GREToClientMessage, 3));
};


/** @param {?proto.GREToClientMessage|undefined} value */
proto.GREToAnyMessage.prototype.setGretoclientmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.GREToAnyMessage.oneofGroups_[0], value);
};


proto.GREToAnyMessage.prototype.clearGretoclientmessage = function() {
  this.setGretoclientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToAnyMessage.prototype.hasGretoclientmessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREToClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GREToClientMessage.repeatedFields_, null);
};
goog.inherits(proto.GREToClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREToClientMessage.displayName = 'proto.GREToClientMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GREToClientMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREToClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GREToClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREToClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREToClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemseatidsList: jspb.Message.getRepeatedField(msg, 2),
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gamestateid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gamestatemessage: (f = msg.getGamestatemessage()) && proto.GameStateMessage.toObject(includeInstance, f),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f),
    choosestartingplayerreq: (f = msg.getChoosestartingplayerreq()) && proto.ChooseStartingPlayerReq.toObject(includeInstance, f),
    optionalactionmessage: (f = msg.getOptionalactionmessage()) && proto.OptionalActionMessage.toObject(includeInstance, f),
    actionsavailablereq: (f = msg.getActionsavailablereq()) && proto.ActionsAvailableReq.toObject(includeInstance, f),
    orderreq: (f = msg.getOrderreq()) && proto.OrderReq.toObject(includeInstance, f),
    groupreq: (f = msg.getGroupreq()) && proto.GroupReq.toObject(includeInstance, f),
    selectnreq: (f = msg.getSelectnreq()) && proto.SelectNReq.toObject(includeInstance, f),
    modalreq: (f = msg.getModalreq()) && proto.ModalReq.toObject(includeInstance, f),
    getsettingsresp: (f = msg.getGetsettingsresp()) && proto.GetSettingsResp.toObject(includeInstance, f),
    setsettingsresp: (f = msg.getSetsettingsresp()) && proto.SetSettingsResp.toObject(includeInstance, f),
    connectresp: (f = msg.getConnectresp()) && proto.ConnectResp.toObject(includeInstance, f),
    illegalrequestmessage: (f = msg.getIllegalrequestmessage()) && proto.IllegalRequestMessage.toObject(includeInstance, f),
    binarygamestate: (f = msg.getBinarygamestate()) && proto.BinaryGameState.toObject(includeInstance, f),
    declareattackersreq: (f = msg.getDeclareattackersreq()) && proto.DeclareAttackersReq.toObject(includeInstance, f),
    submitattackersresp: (f = msg.getSubmitattackersresp()) && proto.SubmitAttackersResp.toObject(includeInstance, f),
    declareblockersreq: (f = msg.getDeclareblockersreq()) && proto.DeclareBlockersReq.toObject(includeInstance, f),
    submitblockersresp: (f = msg.getSubmitblockersresp()) && proto.SubmitBlockersResp.toObject(includeInstance, f),
    assigndamagereq: (f = msg.getAssigndamagereq()) && proto.AssignDamageReq.toObject(includeInstance, f),
    assigndamageconfirmation: (f = msg.getAssigndamageconfirmation()) && proto.AssignDamageConfirmation.toObject(includeInstance, f),
    ordercombatdamagereq: (f = msg.getOrdercombatdamagereq()) && proto.OrderCombatDamageReq.toObject(includeInstance, f),
    orderdamageconfirmation: (f = msg.getOrderdamageconfirmation()) && proto.OrderDamageConfirmation.toObject(includeInstance, f),
    selecttargetsreq: (f = msg.getSelecttargetsreq()) && proto.SelectTargetsReq.toObject(includeInstance, f),
    submittargetsresp: (f = msg.getSubmittargetsresp()) && proto.SubmitTargetsResp.toObject(includeInstance, f),
    paycostsreq: (f = msg.getPaycostsreq()) && proto.PayCostsReq.toObject(includeInstance, f),
    nondecisionplayerprompt: (f = msg.getNondecisionplayerprompt()) && proto.Prompt.toObject(includeInstance, f),
    intermissionreq: (f = msg.getIntermissionreq()) && proto.IntermissionReq.toObject(includeInstance, f),
    dierollresultsresp: (f = msg.getDierollresultsresp()) && proto.DieRollResultsResp.toObject(includeInstance, f),
    selectreplacementreq: (f = msg.getSelectreplacementreq()) && proto.SelectReplacementReq.toObject(includeInstance, f),
    selectngroupreq: (f = msg.getSelectngroupreq()) && proto.SelectNGroupReq.toObject(includeInstance, f),
    alternativecostreq: (f = msg.getAlternativecostreq()) && proto.AlternativeCostReq.toObject(includeInstance, f),
    distributionreq: (f = msg.getDistributionreq()) && proto.DistributionReq.toObject(includeInstance, f),
    numericinputreq: (f = msg.getNumericinputreq()) && proto.NumericInputReq.toObject(includeInstance, f),
    searchreq: (f = msg.getSearchreq()) && proto.SearchReq.toObject(includeInstance, f),
    castingtimeoptionsreq: (f = msg.getCastingtimeoptionsreq()) && proto.CastingTimeOptionsReq.toObject(includeInstance, f),
    informationaluseonly: jspb.Message.getFieldWithDefault(msg, 45, false),
    selectmanatypereq: (f = msg.getSelectmanatypereq()) && proto.SelectManaTypeReq.toObject(includeInstance, f),
    selectfromgroupsreq: (f = msg.getSelectfromgroupsreq()) && proto.SelectFromGroupsReq.toObject(includeInstance, f),
    searchfromgroupsreq: (f = msg.getSearchfromgroupsreq()) && proto.SearchFromGroupsReq.toObject(includeInstance, f),
    gatherreq: (f = msg.getGatherreq()) && proto.GatherReq.toObject(includeInstance, f),
    allowcancel: jspb.Message.getFieldWithDefault(msg, 50, 0),
    uimessage: (f = msg.getUimessage()) && proto.UIMessage.toObject(includeInstance, f),
    submitdeckreq: (f = msg.getSubmitdeckreq()) && proto.SubmitDeckReq.toObject(includeInstance, f),
    edictalmessage: (f = msg.getEdictalmessage()) && proto.EdictalMessage.toObject(includeInstance, f),
    timeoutmessage: (f = msg.getTimeoutmessage()) && proto.TimeoutMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREToClientMessage}
 */
proto.GREToClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREToClientMessage;
  return proto.GREToClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREToClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREToClientMessage}
 */
proto.GREToClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSystemseatidsList(value);
      break;
    case 1:
      var value = /** @type {!proto.GREMessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGamestateid(value);
      break;
    case 5:
      var value = new proto.GameStateMessage;
      reader.readMessage(value,proto.GameStateMessage.deserializeBinaryFromReader);
      msg.setGamestatemessage(value);
      break;
    case 6:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    case 7:
      var value = new proto.ChooseStartingPlayerReq;
      reader.readMessage(value,proto.ChooseStartingPlayerReq.deserializeBinaryFromReader);
      msg.setChoosestartingplayerreq(value);
      break;
    case 8:
      var value = new proto.OptionalActionMessage;
      reader.readMessage(value,proto.OptionalActionMessage.deserializeBinaryFromReader);
      msg.setOptionalactionmessage(value);
      break;
    case 9:
      var value = new proto.ActionsAvailableReq;
      reader.readMessage(value,proto.ActionsAvailableReq.deserializeBinaryFromReader);
      msg.setActionsavailablereq(value);
      break;
    case 10:
      var value = new proto.OrderReq;
      reader.readMessage(value,proto.OrderReq.deserializeBinaryFromReader);
      msg.setOrderreq(value);
      break;
    case 11:
      var value = new proto.GroupReq;
      reader.readMessage(value,proto.GroupReq.deserializeBinaryFromReader);
      msg.setGroupreq(value);
      break;
    case 12:
      var value = new proto.SelectNReq;
      reader.readMessage(value,proto.SelectNReq.deserializeBinaryFromReader);
      msg.setSelectnreq(value);
      break;
    case 13:
      var value = new proto.ModalReq;
      reader.readMessage(value,proto.ModalReq.deserializeBinaryFromReader);
      msg.setModalreq(value);
      break;
    case 16:
      var value = new proto.GetSettingsResp;
      reader.readMessage(value,proto.GetSettingsResp.deserializeBinaryFromReader);
      msg.setGetsettingsresp(value);
      break;
    case 17:
      var value = new proto.SetSettingsResp;
      reader.readMessage(value,proto.SetSettingsResp.deserializeBinaryFromReader);
      msg.setSetsettingsresp(value);
      break;
    case 18:
      var value = new proto.ConnectResp;
      reader.readMessage(value,proto.ConnectResp.deserializeBinaryFromReader);
      msg.setConnectresp(value);
      break;
    case 19:
      var value = new proto.IllegalRequestMessage;
      reader.readMessage(value,proto.IllegalRequestMessage.deserializeBinaryFromReader);
      msg.setIllegalrequestmessage(value);
      break;
    case 23:
      var value = new proto.BinaryGameState;
      reader.readMessage(value,proto.BinaryGameState.deserializeBinaryFromReader);
      msg.setBinarygamestate(value);
      break;
    case 24:
      var value = new proto.DeclareAttackersReq;
      reader.readMessage(value,proto.DeclareAttackersReq.deserializeBinaryFromReader);
      msg.setDeclareattackersreq(value);
      break;
    case 25:
      var value = new proto.SubmitAttackersResp;
      reader.readMessage(value,proto.SubmitAttackersResp.deserializeBinaryFromReader);
      msg.setSubmitattackersresp(value);
      break;
    case 26:
      var value = new proto.DeclareBlockersReq;
      reader.readMessage(value,proto.DeclareBlockersReq.deserializeBinaryFromReader);
      msg.setDeclareblockersreq(value);
      break;
    case 27:
      var value = new proto.SubmitBlockersResp;
      reader.readMessage(value,proto.SubmitBlockersResp.deserializeBinaryFromReader);
      msg.setSubmitblockersresp(value);
      break;
    case 28:
      var value = new proto.AssignDamageReq;
      reader.readMessage(value,proto.AssignDamageReq.deserializeBinaryFromReader);
      msg.setAssigndamagereq(value);
      break;
    case 29:
      var value = new proto.AssignDamageConfirmation;
      reader.readMessage(value,proto.AssignDamageConfirmation.deserializeBinaryFromReader);
      msg.setAssigndamageconfirmation(value);
      break;
    case 30:
      var value = new proto.OrderCombatDamageReq;
      reader.readMessage(value,proto.OrderCombatDamageReq.deserializeBinaryFromReader);
      msg.setOrdercombatdamagereq(value);
      break;
    case 31:
      var value = new proto.OrderDamageConfirmation;
      reader.readMessage(value,proto.OrderDamageConfirmation.deserializeBinaryFromReader);
      msg.setOrderdamageconfirmation(value);
      break;
    case 32:
      var value = new proto.SelectTargetsReq;
      reader.readMessage(value,proto.SelectTargetsReq.deserializeBinaryFromReader);
      msg.setSelecttargetsreq(value);
      break;
    case 33:
      var value = new proto.SubmitTargetsResp;
      reader.readMessage(value,proto.SubmitTargetsResp.deserializeBinaryFromReader);
      msg.setSubmittargetsresp(value);
      break;
    case 34:
      var value = new proto.PayCostsReq;
      reader.readMessage(value,proto.PayCostsReq.deserializeBinaryFromReader);
      msg.setPaycostsreq(value);
      break;
    case 35:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setNondecisionplayerprompt(value);
      break;
    case 36:
      var value = new proto.IntermissionReq;
      reader.readMessage(value,proto.IntermissionReq.deserializeBinaryFromReader);
      msg.setIntermissionreq(value);
      break;
    case 37:
      var value = new proto.DieRollResultsResp;
      reader.readMessage(value,proto.DieRollResultsResp.deserializeBinaryFromReader);
      msg.setDierollresultsresp(value);
      break;
    case 38:
      var value = new proto.SelectReplacementReq;
      reader.readMessage(value,proto.SelectReplacementReq.deserializeBinaryFromReader);
      msg.setSelectreplacementreq(value);
      break;
    case 39:
      var value = new proto.SelectNGroupReq;
      reader.readMessage(value,proto.SelectNGroupReq.deserializeBinaryFromReader);
      msg.setSelectngroupreq(value);
      break;
    case 40:
      var value = new proto.AlternativeCostReq;
      reader.readMessage(value,proto.AlternativeCostReq.deserializeBinaryFromReader);
      msg.setAlternativecostreq(value);
      break;
    case 41:
      var value = new proto.DistributionReq;
      reader.readMessage(value,proto.DistributionReq.deserializeBinaryFromReader);
      msg.setDistributionreq(value);
      break;
    case 42:
      var value = new proto.NumericInputReq;
      reader.readMessage(value,proto.NumericInputReq.deserializeBinaryFromReader);
      msg.setNumericinputreq(value);
      break;
    case 43:
      var value = new proto.SearchReq;
      reader.readMessage(value,proto.SearchReq.deserializeBinaryFromReader);
      msg.setSearchreq(value);
      break;
    case 44:
      var value = new proto.CastingTimeOptionsReq;
      reader.readMessage(value,proto.CastingTimeOptionsReq.deserializeBinaryFromReader);
      msg.setCastingtimeoptionsreq(value);
      break;
    case 45:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInformationaluseonly(value);
      break;
    case 46:
      var value = new proto.SelectManaTypeReq;
      reader.readMessage(value,proto.SelectManaTypeReq.deserializeBinaryFromReader);
      msg.setSelectmanatypereq(value);
      break;
    case 47:
      var value = new proto.SelectFromGroupsReq;
      reader.readMessage(value,proto.SelectFromGroupsReq.deserializeBinaryFromReader);
      msg.setSelectfromgroupsreq(value);
      break;
    case 48:
      var value = new proto.SearchFromGroupsReq;
      reader.readMessage(value,proto.SearchFromGroupsReq.deserializeBinaryFromReader);
      msg.setSearchfromgroupsreq(value);
      break;
    case 49:
      var value = new proto.GatherReq;
      reader.readMessage(value,proto.GatherReq.deserializeBinaryFromReader);
      msg.setGatherreq(value);
      break;
    case 50:
      var value = /** @type {!proto.AllowCancel} */ (reader.readEnum());
      msg.setAllowcancel(value);
      break;
    case 51:
      var value = new proto.UIMessage;
      reader.readMessage(value,proto.UIMessage.deserializeBinaryFromReader);
      msg.setUimessage(value);
      break;
    case 52:
      var value = new proto.SubmitDeckReq;
      reader.readMessage(value,proto.SubmitDeckReq.deserializeBinaryFromReader);
      msg.setSubmitdeckreq(value);
      break;
    case 53:
      var value = new proto.EdictalMessage;
      reader.readMessage(value,proto.EdictalMessage.deserializeBinaryFromReader);
      msg.setEdictalmessage(value);
      break;
    case 54:
      var value = new proto.TimeoutMessage;
      reader.readMessage(value,proto.TimeoutMessage.deserializeBinaryFromReader);
      msg.setTimeoutmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREToClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREToClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREToClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREToClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemseatidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGamestateid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getGamestatemessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.GameStateMessage.serializeBinaryToWriter
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getChoosestartingplayerreq();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ChooseStartingPlayerReq.serializeBinaryToWriter
    );
  }
  f = message.getOptionalactionmessage();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.OptionalActionMessage.serializeBinaryToWriter
    );
  }
  f = message.getActionsavailablereq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ActionsAvailableReq.serializeBinaryToWriter
    );
  }
  f = message.getOrderreq();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.OrderReq.serializeBinaryToWriter
    );
  }
  f = message.getGroupreq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.GroupReq.serializeBinaryToWriter
    );
  }
  f = message.getSelectnreq();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.SelectNReq.serializeBinaryToWriter
    );
  }
  f = message.getModalreq();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ModalReq.serializeBinaryToWriter
    );
  }
  f = message.getGetsettingsresp();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.GetSettingsResp.serializeBinaryToWriter
    );
  }
  f = message.getSetsettingsresp();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.SetSettingsResp.serializeBinaryToWriter
    );
  }
  f = message.getConnectresp();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.ConnectResp.serializeBinaryToWriter
    );
  }
  f = message.getIllegalrequestmessage();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.IllegalRequestMessage.serializeBinaryToWriter
    );
  }
  f = message.getBinarygamestate();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.BinaryGameState.serializeBinaryToWriter
    );
  }
  f = message.getDeclareattackersreq();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.DeclareAttackersReq.serializeBinaryToWriter
    );
  }
  f = message.getSubmitattackersresp();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.SubmitAttackersResp.serializeBinaryToWriter
    );
  }
  f = message.getDeclareblockersreq();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.DeclareBlockersReq.serializeBinaryToWriter
    );
  }
  f = message.getSubmitblockersresp();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.SubmitBlockersResp.serializeBinaryToWriter
    );
  }
  f = message.getAssigndamagereq();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.AssignDamageReq.serializeBinaryToWriter
    );
  }
  f = message.getAssigndamageconfirmation();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.AssignDamageConfirmation.serializeBinaryToWriter
    );
  }
  f = message.getOrdercombatdamagereq();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.OrderCombatDamageReq.serializeBinaryToWriter
    );
  }
  f = message.getOrderdamageconfirmation();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.OrderDamageConfirmation.serializeBinaryToWriter
    );
  }
  f = message.getSelecttargetsreq();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.SelectTargetsReq.serializeBinaryToWriter
    );
  }
  f = message.getSubmittargetsresp();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.SubmitTargetsResp.serializeBinaryToWriter
    );
  }
  f = message.getPaycostsreq();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.PayCostsReq.serializeBinaryToWriter
    );
  }
  f = message.getNondecisionplayerprompt();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getIntermissionreq();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.IntermissionReq.serializeBinaryToWriter
    );
  }
  f = message.getDierollresultsresp();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.DieRollResultsResp.serializeBinaryToWriter
    );
  }
  f = message.getSelectreplacementreq();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.SelectReplacementReq.serializeBinaryToWriter
    );
  }
  f = message.getSelectngroupreq();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.SelectNGroupReq.serializeBinaryToWriter
    );
  }
  f = message.getAlternativecostreq();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.AlternativeCostReq.serializeBinaryToWriter
    );
  }
  f = message.getDistributionreq();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.DistributionReq.serializeBinaryToWriter
    );
  }
  f = message.getNumericinputreq();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.NumericInputReq.serializeBinaryToWriter
    );
  }
  f = message.getSearchreq();
  if (f != null) {
    writer.writeMessage(
      43,
      f,
      proto.SearchReq.serializeBinaryToWriter
    );
  }
  f = message.getCastingtimeoptionsreq();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      proto.CastingTimeOptionsReq.serializeBinaryToWriter
    );
  }
  f = message.getInformationaluseonly();
  if (f) {
    writer.writeBool(
      45,
      f
    );
  }
  f = message.getSelectmanatypereq();
  if (f != null) {
    writer.writeMessage(
      46,
      f,
      proto.SelectManaTypeReq.serializeBinaryToWriter
    );
  }
  f = message.getSelectfromgroupsreq();
  if (f != null) {
    writer.writeMessage(
      47,
      f,
      proto.SelectFromGroupsReq.serializeBinaryToWriter
    );
  }
  f = message.getSearchfromgroupsreq();
  if (f != null) {
    writer.writeMessage(
      48,
      f,
      proto.SearchFromGroupsReq.serializeBinaryToWriter
    );
  }
  f = message.getGatherreq();
  if (f != null) {
    writer.writeMessage(
      49,
      f,
      proto.GatherReq.serializeBinaryToWriter
    );
  }
  f = message.getAllowcancel();
  if (f !== 0.0) {
    writer.writeEnum(
      50,
      f
    );
  }
  f = message.getUimessage();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.UIMessage.serializeBinaryToWriter
    );
  }
  f = message.getSubmitdeckreq();
  if (f != null) {
    writer.writeMessage(
      52,
      f,
      proto.SubmitDeckReq.serializeBinaryToWriter
    );
  }
  f = message.getEdictalmessage();
  if (f != null) {
    writer.writeMessage(
      53,
      f,
      proto.EdictalMessage.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutmessage();
  if (f != null) {
    writer.writeMessage(
      54,
      f,
      proto.TimeoutMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 systemSeatIds = 2;
 * @return {!Array.<number>}
 */
proto.GREToClientMessage.prototype.getSystemseatidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.GREToClientMessage.prototype.setSystemseatidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GREToClientMessage.prototype.addSystemseatids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.GREToClientMessage.prototype.clearSystemseatidsList = function() {
  this.setSystemseatidsList([]);
};


/**
 * optional GREMessageType type = 1;
 * @return {!proto.GREMessageType}
 */
proto.GREToClientMessage.prototype.getType = function() {
  return /** @type {!proto.GREMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.GREMessageType} value */
proto.GREToClientMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 msgId = 3;
 * @return {number}
 */
proto.GREToClientMessage.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GREToClientMessage.prototype.setMsgid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 gameStateId = 4;
 * @return {number}
 */
proto.GREToClientMessage.prototype.getGamestateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GREToClientMessage.prototype.setGamestateid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional GameStateMessage gameStateMessage = 5;
 * @return {?proto.GameStateMessage}
 */
proto.GREToClientMessage.prototype.getGamestatemessage = function() {
  return /** @type{?proto.GameStateMessage} */ (
    jspb.Message.getWrapperField(this, proto.GameStateMessage, 5));
};


/** @param {?proto.GameStateMessage|undefined} value */
proto.GREToClientMessage.prototype.setGamestatemessage = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.GREToClientMessage.prototype.clearGamestatemessage = function() {
  this.setGamestatemessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasGamestatemessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Prompt prompt = 6;
 * @return {?proto.Prompt}
 */
proto.GREToClientMessage.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 6));
};


/** @param {?proto.Prompt|undefined} value */
proto.GREToClientMessage.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.GREToClientMessage.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ChooseStartingPlayerReq chooseStartingPlayerReq = 7;
 * @return {?proto.ChooseStartingPlayerReq}
 */
proto.GREToClientMessage.prototype.getChoosestartingplayerreq = function() {
  return /** @type{?proto.ChooseStartingPlayerReq} */ (
    jspb.Message.getWrapperField(this, proto.ChooseStartingPlayerReq, 7));
};


/** @param {?proto.ChooseStartingPlayerReq|undefined} value */
proto.GREToClientMessage.prototype.setChoosestartingplayerreq = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.GREToClientMessage.prototype.clearChoosestartingplayerreq = function() {
  this.setChoosestartingplayerreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasChoosestartingplayerreq = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OptionalActionMessage optionalActionMessage = 8;
 * @return {?proto.OptionalActionMessage}
 */
proto.GREToClientMessage.prototype.getOptionalactionmessage = function() {
  return /** @type{?proto.OptionalActionMessage} */ (
    jspb.Message.getWrapperField(this, proto.OptionalActionMessage, 8));
};


/** @param {?proto.OptionalActionMessage|undefined} value */
proto.GREToClientMessage.prototype.setOptionalactionmessage = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.GREToClientMessage.prototype.clearOptionalactionmessage = function() {
  this.setOptionalactionmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasOptionalactionmessage = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ActionsAvailableReq actionsAvailableReq = 9;
 * @return {?proto.ActionsAvailableReq}
 */
proto.GREToClientMessage.prototype.getActionsavailablereq = function() {
  return /** @type{?proto.ActionsAvailableReq} */ (
    jspb.Message.getWrapperField(this, proto.ActionsAvailableReq, 9));
};


/** @param {?proto.ActionsAvailableReq|undefined} value */
proto.GREToClientMessage.prototype.setActionsavailablereq = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GREToClientMessage.prototype.clearActionsavailablereq = function() {
  this.setActionsavailablereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasActionsavailablereq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OrderReq orderReq = 10;
 * @return {?proto.OrderReq}
 */
proto.GREToClientMessage.prototype.getOrderreq = function() {
  return /** @type{?proto.OrderReq} */ (
    jspb.Message.getWrapperField(this, proto.OrderReq, 10));
};


/** @param {?proto.OrderReq|undefined} value */
proto.GREToClientMessage.prototype.setOrderreq = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.GREToClientMessage.prototype.clearOrderreq = function() {
  this.setOrderreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasOrderreq = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional GroupReq groupReq = 11;
 * @return {?proto.GroupReq}
 */
proto.GREToClientMessage.prototype.getGroupreq = function() {
  return /** @type{?proto.GroupReq} */ (
    jspb.Message.getWrapperField(this, proto.GroupReq, 11));
};


/** @param {?proto.GroupReq|undefined} value */
proto.GREToClientMessage.prototype.setGroupreq = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.GREToClientMessage.prototype.clearGroupreq = function() {
  this.setGroupreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasGroupreq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SelectNReq selectNReq = 12;
 * @return {?proto.SelectNReq}
 */
proto.GREToClientMessage.prototype.getSelectnreq = function() {
  return /** @type{?proto.SelectNReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectNReq, 12));
};


/** @param {?proto.SelectNReq|undefined} value */
proto.GREToClientMessage.prototype.setSelectnreq = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.GREToClientMessage.prototype.clearSelectnreq = function() {
  this.setSelectnreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSelectnreq = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ModalReq modalReq = 13;
 * @return {?proto.ModalReq}
 */
proto.GREToClientMessage.prototype.getModalreq = function() {
  return /** @type{?proto.ModalReq} */ (
    jspb.Message.getWrapperField(this, proto.ModalReq, 13));
};


/** @param {?proto.ModalReq|undefined} value */
proto.GREToClientMessage.prototype.setModalreq = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.GREToClientMessage.prototype.clearModalreq = function() {
  this.setModalreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasModalreq = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional GetSettingsResp getSettingsResp = 16;
 * @return {?proto.GetSettingsResp}
 */
proto.GREToClientMessage.prototype.getGetsettingsresp = function() {
  return /** @type{?proto.GetSettingsResp} */ (
    jspb.Message.getWrapperField(this, proto.GetSettingsResp, 16));
};


/** @param {?proto.GetSettingsResp|undefined} value */
proto.GREToClientMessage.prototype.setGetsettingsresp = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.GREToClientMessage.prototype.clearGetsettingsresp = function() {
  this.setGetsettingsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasGetsettingsresp = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SetSettingsResp setSettingsResp = 17;
 * @return {?proto.SetSettingsResp}
 */
proto.GREToClientMessage.prototype.getSetsettingsresp = function() {
  return /** @type{?proto.SetSettingsResp} */ (
    jspb.Message.getWrapperField(this, proto.SetSettingsResp, 17));
};


/** @param {?proto.SetSettingsResp|undefined} value */
proto.GREToClientMessage.prototype.setSetsettingsresp = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.GREToClientMessage.prototype.clearSetsettingsresp = function() {
  this.setSetsettingsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSetsettingsresp = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ConnectResp connectResp = 18;
 * @return {?proto.ConnectResp}
 */
proto.GREToClientMessage.prototype.getConnectresp = function() {
  return /** @type{?proto.ConnectResp} */ (
    jspb.Message.getWrapperField(this, proto.ConnectResp, 18));
};


/** @param {?proto.ConnectResp|undefined} value */
proto.GREToClientMessage.prototype.setConnectresp = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.GREToClientMessage.prototype.clearConnectresp = function() {
  this.setConnectresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasConnectresp = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional IllegalRequestMessage illegalRequestMessage = 19;
 * @return {?proto.IllegalRequestMessage}
 */
proto.GREToClientMessage.prototype.getIllegalrequestmessage = function() {
  return /** @type{?proto.IllegalRequestMessage} */ (
    jspb.Message.getWrapperField(this, proto.IllegalRequestMessage, 19));
};


/** @param {?proto.IllegalRequestMessage|undefined} value */
proto.GREToClientMessage.prototype.setIllegalrequestmessage = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.GREToClientMessage.prototype.clearIllegalrequestmessage = function() {
  this.setIllegalrequestmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasIllegalrequestmessage = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional BinaryGameState binaryGameState = 23;
 * @return {?proto.BinaryGameState}
 */
proto.GREToClientMessage.prototype.getBinarygamestate = function() {
  return /** @type{?proto.BinaryGameState} */ (
    jspb.Message.getWrapperField(this, proto.BinaryGameState, 23));
};


/** @param {?proto.BinaryGameState|undefined} value */
proto.GREToClientMessage.prototype.setBinarygamestate = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.GREToClientMessage.prototype.clearBinarygamestate = function() {
  this.setBinarygamestate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasBinarygamestate = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional DeclareAttackersReq declareAttackersReq = 24;
 * @return {?proto.DeclareAttackersReq}
 */
proto.GREToClientMessage.prototype.getDeclareattackersreq = function() {
  return /** @type{?proto.DeclareAttackersReq} */ (
    jspb.Message.getWrapperField(this, proto.DeclareAttackersReq, 24));
};


/** @param {?proto.DeclareAttackersReq|undefined} value */
proto.GREToClientMessage.prototype.setDeclareattackersreq = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.GREToClientMessage.prototype.clearDeclareattackersreq = function() {
  this.setDeclareattackersreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasDeclareattackersreq = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional SubmitAttackersResp submitAttackersResp = 25;
 * @return {?proto.SubmitAttackersResp}
 */
proto.GREToClientMessage.prototype.getSubmitattackersresp = function() {
  return /** @type{?proto.SubmitAttackersResp} */ (
    jspb.Message.getWrapperField(this, proto.SubmitAttackersResp, 25));
};


/** @param {?proto.SubmitAttackersResp|undefined} value */
proto.GREToClientMessage.prototype.setSubmitattackersresp = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.GREToClientMessage.prototype.clearSubmitattackersresp = function() {
  this.setSubmitattackersresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSubmitattackersresp = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional DeclareBlockersReq declareBlockersReq = 26;
 * @return {?proto.DeclareBlockersReq}
 */
proto.GREToClientMessage.prototype.getDeclareblockersreq = function() {
  return /** @type{?proto.DeclareBlockersReq} */ (
    jspb.Message.getWrapperField(this, proto.DeclareBlockersReq, 26));
};


/** @param {?proto.DeclareBlockersReq|undefined} value */
proto.GREToClientMessage.prototype.setDeclareblockersreq = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.GREToClientMessage.prototype.clearDeclareblockersreq = function() {
  this.setDeclareblockersreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasDeclareblockersreq = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional SubmitBlockersResp submitBlockersResp = 27;
 * @return {?proto.SubmitBlockersResp}
 */
proto.GREToClientMessage.prototype.getSubmitblockersresp = function() {
  return /** @type{?proto.SubmitBlockersResp} */ (
    jspb.Message.getWrapperField(this, proto.SubmitBlockersResp, 27));
};


/** @param {?proto.SubmitBlockersResp|undefined} value */
proto.GREToClientMessage.prototype.setSubmitblockersresp = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.GREToClientMessage.prototype.clearSubmitblockersresp = function() {
  this.setSubmitblockersresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSubmitblockersresp = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional AssignDamageReq assignDamageReq = 28;
 * @return {?proto.AssignDamageReq}
 */
proto.GREToClientMessage.prototype.getAssigndamagereq = function() {
  return /** @type{?proto.AssignDamageReq} */ (
    jspb.Message.getWrapperField(this, proto.AssignDamageReq, 28));
};


/** @param {?proto.AssignDamageReq|undefined} value */
proto.GREToClientMessage.prototype.setAssigndamagereq = function(value) {
  jspb.Message.setWrapperField(this, 28, value);
};


proto.GREToClientMessage.prototype.clearAssigndamagereq = function() {
  this.setAssigndamagereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasAssigndamagereq = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional AssignDamageConfirmation assignDamageConfirmation = 29;
 * @return {?proto.AssignDamageConfirmation}
 */
proto.GREToClientMessage.prototype.getAssigndamageconfirmation = function() {
  return /** @type{?proto.AssignDamageConfirmation} */ (
    jspb.Message.getWrapperField(this, proto.AssignDamageConfirmation, 29));
};


/** @param {?proto.AssignDamageConfirmation|undefined} value */
proto.GREToClientMessage.prototype.setAssigndamageconfirmation = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.GREToClientMessage.prototype.clearAssigndamageconfirmation = function() {
  this.setAssigndamageconfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasAssigndamageconfirmation = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional OrderCombatDamageReq orderCombatDamageReq = 30;
 * @return {?proto.OrderCombatDamageReq}
 */
proto.GREToClientMessage.prototype.getOrdercombatdamagereq = function() {
  return /** @type{?proto.OrderCombatDamageReq} */ (
    jspb.Message.getWrapperField(this, proto.OrderCombatDamageReq, 30));
};


/** @param {?proto.OrderCombatDamageReq|undefined} value */
proto.GREToClientMessage.prototype.setOrdercombatdamagereq = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.GREToClientMessage.prototype.clearOrdercombatdamagereq = function() {
  this.setOrdercombatdamagereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasOrdercombatdamagereq = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional OrderDamageConfirmation orderDamageConfirmation = 31;
 * @return {?proto.OrderDamageConfirmation}
 */
proto.GREToClientMessage.prototype.getOrderdamageconfirmation = function() {
  return /** @type{?proto.OrderDamageConfirmation} */ (
    jspb.Message.getWrapperField(this, proto.OrderDamageConfirmation, 31));
};


/** @param {?proto.OrderDamageConfirmation|undefined} value */
proto.GREToClientMessage.prototype.setOrderdamageconfirmation = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.GREToClientMessage.prototype.clearOrderdamageconfirmation = function() {
  this.setOrderdamageconfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasOrderdamageconfirmation = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional SelectTargetsReq selectTargetsReq = 32;
 * @return {?proto.SelectTargetsReq}
 */
proto.GREToClientMessage.prototype.getSelecttargetsreq = function() {
  return /** @type{?proto.SelectTargetsReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectTargetsReq, 32));
};


/** @param {?proto.SelectTargetsReq|undefined} value */
proto.GREToClientMessage.prototype.setSelecttargetsreq = function(value) {
  jspb.Message.setWrapperField(this, 32, value);
};


proto.GREToClientMessage.prototype.clearSelecttargetsreq = function() {
  this.setSelecttargetsreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSelecttargetsreq = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional SubmitTargetsResp submitTargetsResp = 33;
 * @return {?proto.SubmitTargetsResp}
 */
proto.GREToClientMessage.prototype.getSubmittargetsresp = function() {
  return /** @type{?proto.SubmitTargetsResp} */ (
    jspb.Message.getWrapperField(this, proto.SubmitTargetsResp, 33));
};


/** @param {?proto.SubmitTargetsResp|undefined} value */
proto.GREToClientMessage.prototype.setSubmittargetsresp = function(value) {
  jspb.Message.setWrapperField(this, 33, value);
};


proto.GREToClientMessage.prototype.clearSubmittargetsresp = function() {
  this.setSubmittargetsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSubmittargetsresp = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional PayCostsReq payCostsReq = 34;
 * @return {?proto.PayCostsReq}
 */
proto.GREToClientMessage.prototype.getPaycostsreq = function() {
  return /** @type{?proto.PayCostsReq} */ (
    jspb.Message.getWrapperField(this, proto.PayCostsReq, 34));
};


/** @param {?proto.PayCostsReq|undefined} value */
proto.GREToClientMessage.prototype.setPaycostsreq = function(value) {
  jspb.Message.setWrapperField(this, 34, value);
};


proto.GREToClientMessage.prototype.clearPaycostsreq = function() {
  this.setPaycostsreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasPaycostsreq = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional Prompt nonDecisionPlayerPrompt = 35;
 * @return {?proto.Prompt}
 */
proto.GREToClientMessage.prototype.getNondecisionplayerprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 35));
};


/** @param {?proto.Prompt|undefined} value */
proto.GREToClientMessage.prototype.setNondecisionplayerprompt = function(value) {
  jspb.Message.setWrapperField(this, 35, value);
};


proto.GREToClientMessage.prototype.clearNondecisionplayerprompt = function() {
  this.setNondecisionplayerprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasNondecisionplayerprompt = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional IntermissionReq intermissionReq = 36;
 * @return {?proto.IntermissionReq}
 */
proto.GREToClientMessage.prototype.getIntermissionreq = function() {
  return /** @type{?proto.IntermissionReq} */ (
    jspb.Message.getWrapperField(this, proto.IntermissionReq, 36));
};


/** @param {?proto.IntermissionReq|undefined} value */
proto.GREToClientMessage.prototype.setIntermissionreq = function(value) {
  jspb.Message.setWrapperField(this, 36, value);
};


proto.GREToClientMessage.prototype.clearIntermissionreq = function() {
  this.setIntermissionreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasIntermissionreq = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional DieRollResultsResp dieRollResultsResp = 37;
 * @return {?proto.DieRollResultsResp}
 */
proto.GREToClientMessage.prototype.getDierollresultsresp = function() {
  return /** @type{?proto.DieRollResultsResp} */ (
    jspb.Message.getWrapperField(this, proto.DieRollResultsResp, 37));
};


/** @param {?proto.DieRollResultsResp|undefined} value */
proto.GREToClientMessage.prototype.setDierollresultsresp = function(value) {
  jspb.Message.setWrapperField(this, 37, value);
};


proto.GREToClientMessage.prototype.clearDierollresultsresp = function() {
  this.setDierollresultsresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasDierollresultsresp = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional SelectReplacementReq selectReplacementReq = 38;
 * @return {?proto.SelectReplacementReq}
 */
proto.GREToClientMessage.prototype.getSelectreplacementreq = function() {
  return /** @type{?proto.SelectReplacementReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectReplacementReq, 38));
};


/** @param {?proto.SelectReplacementReq|undefined} value */
proto.GREToClientMessage.prototype.setSelectreplacementreq = function(value) {
  jspb.Message.setWrapperField(this, 38, value);
};


proto.GREToClientMessage.prototype.clearSelectreplacementreq = function() {
  this.setSelectreplacementreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSelectreplacementreq = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional SelectNGroupReq selectNGroupReq = 39;
 * @return {?proto.SelectNGroupReq}
 */
proto.GREToClientMessage.prototype.getSelectngroupreq = function() {
  return /** @type{?proto.SelectNGroupReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectNGroupReq, 39));
};


/** @param {?proto.SelectNGroupReq|undefined} value */
proto.GREToClientMessage.prototype.setSelectngroupreq = function(value) {
  jspb.Message.setWrapperField(this, 39, value);
};


proto.GREToClientMessage.prototype.clearSelectngroupreq = function() {
  this.setSelectngroupreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSelectngroupreq = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional AlternativeCostReq alternativeCostReq = 40;
 * @return {?proto.AlternativeCostReq}
 */
proto.GREToClientMessage.prototype.getAlternativecostreq = function() {
  return /** @type{?proto.AlternativeCostReq} */ (
    jspb.Message.getWrapperField(this, proto.AlternativeCostReq, 40));
};


/** @param {?proto.AlternativeCostReq|undefined} value */
proto.GREToClientMessage.prototype.setAlternativecostreq = function(value) {
  jspb.Message.setWrapperField(this, 40, value);
};


proto.GREToClientMessage.prototype.clearAlternativecostreq = function() {
  this.setAlternativecostreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasAlternativecostreq = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional DistributionReq distributionReq = 41;
 * @return {?proto.DistributionReq}
 */
proto.GREToClientMessage.prototype.getDistributionreq = function() {
  return /** @type{?proto.DistributionReq} */ (
    jspb.Message.getWrapperField(this, proto.DistributionReq, 41));
};


/** @param {?proto.DistributionReq|undefined} value */
proto.GREToClientMessage.prototype.setDistributionreq = function(value) {
  jspb.Message.setWrapperField(this, 41, value);
};


proto.GREToClientMessage.prototype.clearDistributionreq = function() {
  this.setDistributionreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasDistributionreq = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional NumericInputReq numericInputReq = 42;
 * @return {?proto.NumericInputReq}
 */
proto.GREToClientMessage.prototype.getNumericinputreq = function() {
  return /** @type{?proto.NumericInputReq} */ (
    jspb.Message.getWrapperField(this, proto.NumericInputReq, 42));
};


/** @param {?proto.NumericInputReq|undefined} value */
proto.GREToClientMessage.prototype.setNumericinputreq = function(value) {
  jspb.Message.setWrapperField(this, 42, value);
};


proto.GREToClientMessage.prototype.clearNumericinputreq = function() {
  this.setNumericinputreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasNumericinputreq = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional SearchReq searchReq = 43;
 * @return {?proto.SearchReq}
 */
proto.GREToClientMessage.prototype.getSearchreq = function() {
  return /** @type{?proto.SearchReq} */ (
    jspb.Message.getWrapperField(this, proto.SearchReq, 43));
};


/** @param {?proto.SearchReq|undefined} value */
proto.GREToClientMessage.prototype.setSearchreq = function(value) {
  jspb.Message.setWrapperField(this, 43, value);
};


proto.GREToClientMessage.prototype.clearSearchreq = function() {
  this.setSearchreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSearchreq = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional CastingTimeOptionsReq castingTimeOptionsReq = 44;
 * @return {?proto.CastingTimeOptionsReq}
 */
proto.GREToClientMessage.prototype.getCastingtimeoptionsreq = function() {
  return /** @type{?proto.CastingTimeOptionsReq} */ (
    jspb.Message.getWrapperField(this, proto.CastingTimeOptionsReq, 44));
};


/** @param {?proto.CastingTimeOptionsReq|undefined} value */
proto.GREToClientMessage.prototype.setCastingtimeoptionsreq = function(value) {
  jspb.Message.setWrapperField(this, 44, value);
};


proto.GREToClientMessage.prototype.clearCastingtimeoptionsreq = function() {
  this.setCastingtimeoptionsreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasCastingtimeoptionsreq = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * optional bool informationalUseOnly = 45;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GREToClientMessage.prototype.getInformationaluseonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 45, false));
};


/** @param {boolean} value */
proto.GREToClientMessage.prototype.setInformationaluseonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 45, value);
};


/**
 * optional SelectManaTypeReq selectManaTypeReq = 46;
 * @return {?proto.SelectManaTypeReq}
 */
proto.GREToClientMessage.prototype.getSelectmanatypereq = function() {
  return /** @type{?proto.SelectManaTypeReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectManaTypeReq, 46));
};


/** @param {?proto.SelectManaTypeReq|undefined} value */
proto.GREToClientMessage.prototype.setSelectmanatypereq = function(value) {
  jspb.Message.setWrapperField(this, 46, value);
};


proto.GREToClientMessage.prototype.clearSelectmanatypereq = function() {
  this.setSelectmanatypereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSelectmanatypereq = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * optional SelectFromGroupsReq selectFromGroupsReq = 47;
 * @return {?proto.SelectFromGroupsReq}
 */
proto.GREToClientMessage.prototype.getSelectfromgroupsreq = function() {
  return /** @type{?proto.SelectFromGroupsReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectFromGroupsReq, 47));
};


/** @param {?proto.SelectFromGroupsReq|undefined} value */
proto.GREToClientMessage.prototype.setSelectfromgroupsreq = function(value) {
  jspb.Message.setWrapperField(this, 47, value);
};


proto.GREToClientMessage.prototype.clearSelectfromgroupsreq = function() {
  this.setSelectfromgroupsreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSelectfromgroupsreq = function() {
  return jspb.Message.getField(this, 47) != null;
};


/**
 * optional SearchFromGroupsReq searchFromGroupsReq = 48;
 * @return {?proto.SearchFromGroupsReq}
 */
proto.GREToClientMessage.prototype.getSearchfromgroupsreq = function() {
  return /** @type{?proto.SearchFromGroupsReq} */ (
    jspb.Message.getWrapperField(this, proto.SearchFromGroupsReq, 48));
};


/** @param {?proto.SearchFromGroupsReq|undefined} value */
proto.GREToClientMessage.prototype.setSearchfromgroupsreq = function(value) {
  jspb.Message.setWrapperField(this, 48, value);
};


proto.GREToClientMessage.prototype.clearSearchfromgroupsreq = function() {
  this.setSearchfromgroupsreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSearchfromgroupsreq = function() {
  return jspb.Message.getField(this, 48) != null;
};


/**
 * optional GatherReq gatherReq = 49;
 * @return {?proto.GatherReq}
 */
proto.GREToClientMessage.prototype.getGatherreq = function() {
  return /** @type{?proto.GatherReq} */ (
    jspb.Message.getWrapperField(this, proto.GatherReq, 49));
};


/** @param {?proto.GatherReq|undefined} value */
proto.GREToClientMessage.prototype.setGatherreq = function(value) {
  jspb.Message.setWrapperField(this, 49, value);
};


proto.GREToClientMessage.prototype.clearGatherreq = function() {
  this.setGatherreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasGatherreq = function() {
  return jspb.Message.getField(this, 49) != null;
};


/**
 * optional AllowCancel allowCancel = 50;
 * @return {!proto.AllowCancel}
 */
proto.GREToClientMessage.prototype.getAllowcancel = function() {
  return /** @type {!proto.AllowCancel} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/** @param {!proto.AllowCancel} value */
proto.GREToClientMessage.prototype.setAllowcancel = function(value) {
  jspb.Message.setProto3EnumField(this, 50, value);
};


/**
 * optional UIMessage uiMessage = 51;
 * @return {?proto.UIMessage}
 */
proto.GREToClientMessage.prototype.getUimessage = function() {
  return /** @type{?proto.UIMessage} */ (
    jspb.Message.getWrapperField(this, proto.UIMessage, 51));
};


/** @param {?proto.UIMessage|undefined} value */
proto.GREToClientMessage.prototype.setUimessage = function(value) {
  jspb.Message.setWrapperField(this, 51, value);
};


proto.GREToClientMessage.prototype.clearUimessage = function() {
  this.setUimessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasUimessage = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional SubmitDeckReq submitDeckReq = 52;
 * @return {?proto.SubmitDeckReq}
 */
proto.GREToClientMessage.prototype.getSubmitdeckreq = function() {
  return /** @type{?proto.SubmitDeckReq} */ (
    jspb.Message.getWrapperField(this, proto.SubmitDeckReq, 52));
};


/** @param {?proto.SubmitDeckReq|undefined} value */
proto.GREToClientMessage.prototype.setSubmitdeckreq = function(value) {
  jspb.Message.setWrapperField(this, 52, value);
};


proto.GREToClientMessage.prototype.clearSubmitdeckreq = function() {
  this.setSubmitdeckreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasSubmitdeckreq = function() {
  return jspb.Message.getField(this, 52) != null;
};


/**
 * optional EdictalMessage edictalMessage = 53;
 * @return {?proto.EdictalMessage}
 */
proto.GREToClientMessage.prototype.getEdictalmessage = function() {
  return /** @type{?proto.EdictalMessage} */ (
    jspb.Message.getWrapperField(this, proto.EdictalMessage, 53));
};


/** @param {?proto.EdictalMessage|undefined} value */
proto.GREToClientMessage.prototype.setEdictalmessage = function(value) {
  jspb.Message.setWrapperField(this, 53, value);
};


proto.GREToClientMessage.prototype.clearEdictalmessage = function() {
  this.setEdictalmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasEdictalmessage = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional TimeoutMessage timeoutMessage = 54;
 * @return {?proto.TimeoutMessage}
 */
proto.GREToClientMessage.prototype.getTimeoutmessage = function() {
  return /** @type{?proto.TimeoutMessage} */ (
    jspb.Message.getWrapperField(this, proto.TimeoutMessage, 54));
};


/** @param {?proto.TimeoutMessage|undefined} value */
proto.GREToClientMessage.prototype.setTimeoutmessage = function(value) {
  jspb.Message.setWrapperField(this, 54, value);
};


proto.GREToClientMessage.prototype.clearTimeoutmessage = function() {
  this.setTimeoutmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToClientMessage.prototype.hasTimeoutmessage = function() {
  return jspb.Message.getField(this, 54) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GREToServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GREToServerMessage.oneofGroups_);
};
goog.inherits(proto.GREToServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GREToServerMessage.displayName = 'proto.GREToServerMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GREToServerMessage.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.GREToServerMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  BINARYGAMESTATE: 2,
  REPORTRESULTMESSAGE: 3,
  SCHEDULEDMESSAGE: 4,
  CANCELSCHEDULEDMESSAGE: 5,
  GAMEMETRICS: 6
};

/**
 * @return {proto.GREToServerMessage.MessageCase}
 */
proto.GREToServerMessage.prototype.getMessageCase = function() {
  return /** @type {proto.GREToServerMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.GREToServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GREToServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GREToServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GREToServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREToServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    binarygamestate: (f = msg.getBinarygamestate()) && proto.BinaryGameState.toObject(includeInstance, f),
    reportresultmessage: (f = msg.getReportresultmessage()) && proto.ReportResultMessage.toObject(includeInstance, f),
    scheduledmessage: (f = msg.getScheduledmessage()) && proto.GREScheduledMessage.toObject(includeInstance, f),
    cancelscheduledmessage: (f = msg.getCancelscheduledmessage()) && proto.GRECancelScheduledMessage.toObject(includeInstance, f),
    gamemetrics: (f = msg.getGamemetrics()) && proto.GameMetrics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GREToServerMessage}
 */
proto.GREToServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GREToServerMessage;
  return proto.GREToServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GREToServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GREToServerMessage}
 */
proto.GREToServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgid(value);
      break;
    case 2:
      var value = new proto.BinaryGameState;
      reader.readMessage(value,proto.BinaryGameState.deserializeBinaryFromReader);
      msg.setBinarygamestate(value);
      break;
    case 3:
      var value = new proto.ReportResultMessage;
      reader.readMessage(value,proto.ReportResultMessage.deserializeBinaryFromReader);
      msg.setReportresultmessage(value);
      break;
    case 4:
      var value = new proto.GREScheduledMessage;
      reader.readMessage(value,proto.GREScheduledMessage.deserializeBinaryFromReader);
      msg.setScheduledmessage(value);
      break;
    case 5:
      var value = new proto.GRECancelScheduledMessage;
      reader.readMessage(value,proto.GRECancelScheduledMessage.deserializeBinaryFromReader);
      msg.setCancelscheduledmessage(value);
      break;
    case 6:
      var value = new proto.GameMetrics;
      reader.readMessage(value,proto.GameMetrics.deserializeBinaryFromReader);
      msg.setGamemetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GREToServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GREToServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GREToServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GREToServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBinarygamestate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BinaryGameState.serializeBinaryToWriter
    );
  }
  f = message.getReportresultmessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ReportResultMessage.serializeBinaryToWriter
    );
  }
  f = message.getScheduledmessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.GREScheduledMessage.serializeBinaryToWriter
    );
  }
  f = message.getCancelscheduledmessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.GRECancelScheduledMessage.serializeBinaryToWriter
    );
  }
  f = message.getGamemetrics();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.GameMetrics.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 msgId = 1;
 * @return {number}
 */
proto.GREToServerMessage.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GREToServerMessage.prototype.setMsgid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BinaryGameState binaryGameState = 2;
 * @return {?proto.BinaryGameState}
 */
proto.GREToServerMessage.prototype.getBinarygamestate = function() {
  return /** @type{?proto.BinaryGameState} */ (
    jspb.Message.getWrapperField(this, proto.BinaryGameState, 2));
};


/** @param {?proto.BinaryGameState|undefined} value */
proto.GREToServerMessage.prototype.setBinarygamestate = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.GREToServerMessage.oneofGroups_[0], value);
};


proto.GREToServerMessage.prototype.clearBinarygamestate = function() {
  this.setBinarygamestate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToServerMessage.prototype.hasBinarygamestate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReportResultMessage reportResultMessage = 3;
 * @return {?proto.ReportResultMessage}
 */
proto.GREToServerMessage.prototype.getReportresultmessage = function() {
  return /** @type{?proto.ReportResultMessage} */ (
    jspb.Message.getWrapperField(this, proto.ReportResultMessage, 3));
};


/** @param {?proto.ReportResultMessage|undefined} value */
proto.GREToServerMessage.prototype.setReportresultmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.GREToServerMessage.oneofGroups_[0], value);
};


proto.GREToServerMessage.prototype.clearReportresultmessage = function() {
  this.setReportresultmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToServerMessage.prototype.hasReportresultmessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GREScheduledMessage scheduledMessage = 4;
 * @return {?proto.GREScheduledMessage}
 */
proto.GREToServerMessage.prototype.getScheduledmessage = function() {
  return /** @type{?proto.GREScheduledMessage} */ (
    jspb.Message.getWrapperField(this, proto.GREScheduledMessage, 4));
};


/** @param {?proto.GREScheduledMessage|undefined} value */
proto.GREToServerMessage.prototype.setScheduledmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.GREToServerMessage.oneofGroups_[0], value);
};


proto.GREToServerMessage.prototype.clearScheduledmessage = function() {
  this.setScheduledmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToServerMessage.prototype.hasScheduledmessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GRECancelScheduledMessage cancelScheduledMessage = 5;
 * @return {?proto.GRECancelScheduledMessage}
 */
proto.GREToServerMessage.prototype.getCancelscheduledmessage = function() {
  return /** @type{?proto.GRECancelScheduledMessage} */ (
    jspb.Message.getWrapperField(this, proto.GRECancelScheduledMessage, 5));
};


/** @param {?proto.GRECancelScheduledMessage|undefined} value */
proto.GREToServerMessage.prototype.setCancelscheduledmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.GREToServerMessage.oneofGroups_[0], value);
};


proto.GREToServerMessage.prototype.clearCancelscheduledmessage = function() {
  this.setCancelscheduledmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToServerMessage.prototype.hasCancelscheduledmessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GameMetrics gameMetrics = 6;
 * @return {?proto.GameMetrics}
 */
proto.GREToServerMessage.prototype.getGamemetrics = function() {
  return /** @type{?proto.GameMetrics} */ (
    jspb.Message.getWrapperField(this, proto.GameMetrics, 6));
};


/** @param {?proto.GameMetrics|undefined} value */
proto.GREToServerMessage.prototype.setGamemetrics = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.GREToServerMessage.oneofGroups_[0], value);
};


proto.GREToServerMessage.prototype.clearGamemetrics = function() {
  this.setGamemetrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GREToServerMessage.prototype.hasGamemetrics = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameInfo.repeatedFields_, null);
};
goog.inherits(proto.GameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameInfo.displayName = 'proto.GameInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameInfo.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.ResultSpec.toObject, includeInstance),
    gamenumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    variant: jspb.Message.getFieldWithDefault(msg, 7, 0),
    matchstate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    matchwincondition: jspb.Message.getFieldWithDefault(msg, 9, 0),
    maxtimeoutcount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    maxpipcount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    timeoutdurationsec: jspb.Message.getFieldWithDefault(msg, 12, 0),
    superformat: jspb.Message.getFieldWithDefault(msg, 14, 0),
    mulligantype: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameInfo}
 */
proto.GameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameInfo;
  return proto.GameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameInfo}
 */
proto.GameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 13:
      var value = new proto.ResultSpec;
      reader.readMessage(value,proto.ResultSpec.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGamenumber(value);
      break;
    case 5:
      var value = /** @type {!proto.GameStage} */ (reader.readEnum());
      msg.setStage(value);
      break;
    case 6:
      var value = /** @type {!proto.GameType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!proto.GameVariant} */ (reader.readEnum());
      msg.setVariant(value);
      break;
    case 8:
      var value = /** @type {!proto.MatchState} */ (reader.readEnum());
      msg.setMatchstate(value);
      break;
    case 9:
      var value = /** @type {!proto.MatchWinCondition} */ (reader.readEnum());
      msg.setMatchwincondition(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxtimeoutcount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxpipcount(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutdurationsec(value);
      break;
    case 14:
      var value = /** @type {!proto.SuperFormat} */ (reader.readEnum());
      msg.setSuperformat(value);
      break;
    case 15:
      var value = /** @type {!proto.MulliganType} */ (reader.readEnum());
      msg.setMulligantype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.ResultSpec.serializeBinaryToWriter
    );
  }
  f = message.getGamenumber();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getStage();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getVariant();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getMatchstate();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getMatchwincondition();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getMaxtimeoutcount();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getMaxpipcount();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getTimeoutdurationsec();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getSuperformat();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getMulligantype();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional string matchID = 1;
 * @return {string}
 */
proto.GameInfo.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GameInfo.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ResultSpec results = 13;
 * @return {!Array.<!proto.ResultSpec>}
 */
proto.GameInfo.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.ResultSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ResultSpec, 13));
};


/** @param {!Array.<!proto.ResultSpec>} value */
proto.GameInfo.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.ResultSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ResultSpec}
 */
proto.GameInfo.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.ResultSpec, opt_index);
};


proto.GameInfo.prototype.clearResultsList = function() {
  this.setResultsList([]);
};


/**
 * optional uint32 gameNumber = 3;
 * @return {number}
 */
proto.GameInfo.prototype.getGamenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GameInfo.prototype.setGamenumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional GameStage stage = 5;
 * @return {!proto.GameStage}
 */
proto.GameInfo.prototype.getStage = function() {
  return /** @type {!proto.GameStage} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.GameStage} value */
proto.GameInfo.prototype.setStage = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional GameType type = 6;
 * @return {!proto.GameType}
 */
proto.GameInfo.prototype.getType = function() {
  return /** @type {!proto.GameType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.GameType} value */
proto.GameInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional GameVariant variant = 7;
 * @return {!proto.GameVariant}
 */
proto.GameInfo.prototype.getVariant = function() {
  return /** @type {!proto.GameVariant} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.GameVariant} value */
proto.GameInfo.prototype.setVariant = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional MatchState matchState = 8;
 * @return {!proto.MatchState}
 */
proto.GameInfo.prototype.getMatchstate = function() {
  return /** @type {!proto.MatchState} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.MatchState} value */
proto.GameInfo.prototype.setMatchstate = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional MatchWinCondition matchWinCondition = 9;
 * @return {!proto.MatchWinCondition}
 */
proto.GameInfo.prototype.getMatchwincondition = function() {
  return /** @type {!proto.MatchWinCondition} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.MatchWinCondition} value */
proto.GameInfo.prototype.setMatchwincondition = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint32 maxTimeoutCount = 10;
 * @return {number}
 */
proto.GameInfo.prototype.getMaxtimeoutcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.GameInfo.prototype.setMaxtimeoutcount = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 maxPipCount = 11;
 * @return {number}
 */
proto.GameInfo.prototype.getMaxpipcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.GameInfo.prototype.setMaxpipcount = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 timeoutDurationSec = 12;
 * @return {number}
 */
proto.GameInfo.prototype.getTimeoutdurationsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.GameInfo.prototype.setTimeoutdurationsec = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional SuperFormat superFormat = 14;
 * @return {!proto.SuperFormat}
 */
proto.GameInfo.prototype.getSuperformat = function() {
  return /** @type {!proto.SuperFormat} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.SuperFormat} value */
proto.GameInfo.prototype.setSuperformat = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional MulliganType mulliganType = 15;
 * @return {!proto.MulliganType}
 */
proto.GameInfo.prototype.getMulligantype = function() {
  return /** @type {!proto.MulliganType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.MulliganType} value */
proto.GameInfo.prototype.setMulligantype = function(value) {
  jspb.Message.setProto3EnumField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameMetrics.repeatedFields_, null);
};
goog.inherits(proto.GameMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameMetrics.displayName = 'proto.GameMetrics';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameMetrics.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.GameMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    playermetricsList: jspb.Message.toObjectList(msg.getPlayermetricsList(),
    proto.PlayerMetrics.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameMetrics}
 */
proto.GameMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameMetrics;
  return proto.GameMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameMetrics}
 */
proto.GameMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayerMetrics;
      reader.readMessage(value,proto.PlayerMetrics.deserializeBinaryFromReader);
      msg.addPlayermetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayermetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PlayerMetrics.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerMetrics playerMetrics = 1;
 * @return {!Array.<!proto.PlayerMetrics>}
 */
proto.GameMetrics.prototype.getPlayermetricsList = function() {
  return /** @type{!Array.<!proto.PlayerMetrics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerMetrics, 1));
};


/** @param {!Array.<!proto.PlayerMetrics>} value */
proto.GameMetrics.prototype.setPlayermetricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PlayerMetrics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerMetrics}
 */
proto.GameMetrics.prototype.addPlayermetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PlayerMetrics, opt_index);
};


proto.GameMetrics.prototype.clearPlayermetricsList = function() {
  this.setPlayermetricsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameObjectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameObjectInfo.repeatedFields_, null);
};
goog.inherits(proto.GameObjectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameObjectInfo.displayName = 'proto.GameObjectInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameObjectInfo.repeatedFields_ = [9,10,11,12,26,30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameObjectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GameObjectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameObjectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameObjectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    supertypesList: jspb.Message.getRepeatedField(msg, 9),
    cardtypesList: jspb.Message.getRepeatedField(msg, 10),
    subtypesList: jspb.Message.getRepeatedField(msg, 11),
    colorList: jspb.Message.getRepeatedField(msg, 12),
    viewersList: jspb.Message.getRepeatedField(msg, 26),
    abilitiesList: jspb.Message.getRepeatedField(msg, 30),
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    grpid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    zoneid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    visibility: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ownerseatid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    controllerseatid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    power: (f = msg.getPower()) && proto.Int32Value.toObject(includeInstance, f),
    toughness: (f = msg.getToughness()) && proto.Int32Value.toObject(includeInstance, f),
    iscopy: jspb.Message.getFieldWithDefault(msg, 16, false),
    istapped: jspb.Message.getFieldWithDefault(msg, 17, false),
    hassummoningsickness: jspb.Message.getFieldWithDefault(msg, 18, false),
    attackstate: jspb.Message.getFieldWithDefault(msg, 19, 0),
    blockstate: jspb.Message.getFieldWithDefault(msg, 20, 0),
    damage: jspb.Message.getFieldWithDefault(msg, 23, 0),
    attackinfo: (f = msg.getAttackinfo()) && proto.AttackInfo.toObject(includeInstance, f),
    blockinfo: (f = msg.getBlockinfo()) && proto.BlockInfo.toObject(includeInstance, f),
    loyalty: (f = msg.getLoyalty()) && proto.UInt32Value.toObject(includeInstance, f),
    objectsourcegrpid: jspb.Message.getFieldWithDefault(msg, 28, 0),
    name: jspb.Message.getFieldWithDefault(msg, 29, 0),
    parentid: jspb.Message.getFieldWithDefault(msg, 31, 0),
    overlaygrpid: jspb.Message.getFieldWithDefault(msg, 32, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameObjectInfo}
 */
proto.GameObjectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameObjectInfo;
  return proto.GameObjectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameObjectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameObjectInfo}
 */
proto.GameObjectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9:
      var value = /** @type {!Array.<!proto.SuperType>} */ (reader.readPackedEnum());
      msg.setSupertypesList(value);
      break;
    case 10:
      var value = /** @type {!Array.<!proto.CardType>} */ (reader.readPackedEnum());
      msg.setCardtypesList(value);
      break;
    case 11:
      var value = /** @type {!Array.<!proto.SubType>} */ (reader.readPackedEnum());
      msg.setSubtypesList(value);
      break;
    case 12:
      var value = /** @type {!Array.<!proto.CardColor>} */ (reader.readPackedEnum());
      msg.setColorList(value);
      break;
    case 26:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setViewersList(value);
      break;
    case 30:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAbilitiesList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrpid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupid(value);
      break;
    case 4:
      var value = /** @type {!proto.GameObjectType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setZoneid(value);
      break;
    case 6:
      var value = /** @type {!proto.Visibility} */ (reader.readEnum());
      msg.setVisibility(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOwnerseatid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setControllerseatid(value);
      break;
    case 13:
      var value = new proto.Int32Value;
      reader.readMessage(value,proto.Int32Value.deserializeBinaryFromReader);
      msg.setPower(value);
      break;
    case 14:
      var value = new proto.Int32Value;
      reader.readMessage(value,proto.Int32Value.deserializeBinaryFromReader);
      msg.setToughness(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscopy(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIstapped(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHassummoningsickness(value);
      break;
    case 19:
      var value = /** @type {!proto.AttackState} */ (reader.readEnum());
      msg.setAttackstate(value);
      break;
    case 20:
      var value = /** @type {!proto.BlockState} */ (reader.readEnum());
      msg.setBlockstate(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDamage(value);
      break;
    case 24:
      var value = new proto.AttackInfo;
      reader.readMessage(value,proto.AttackInfo.deserializeBinaryFromReader);
      msg.setAttackinfo(value);
      break;
    case 25:
      var value = new proto.BlockInfo;
      reader.readMessage(value,proto.BlockInfo.deserializeBinaryFromReader);
      msg.setBlockinfo(value);
      break;
    case 27:
      var value = new proto.UInt32Value;
      reader.readMessage(value,proto.UInt32Value.deserializeBinaryFromReader);
      msg.setLoyalty(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjectsourcegrpid(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setName(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParentid(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOverlaygrpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameObjectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameObjectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameObjectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameObjectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupertypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      9,
      f
    );
  }
  f = message.getCardtypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      10,
      f
    );
  }
  f = message.getSubtypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      11,
      f
    );
  }
  f = message.getColorList();
  if (f.length > 0) {
    writer.writePackedEnum(
      12,
      f
    );
  }
  f = message.getViewersList();
  if (f.length > 0) {
    writer.writePackedUint32(
      26,
      f
    );
  }
  f = message.getAbilitiesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      30,
      f
    );
  }
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGrpid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getZoneid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getVisibility();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getOwnerseatid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getControllerseatid();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getPower();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getToughness();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getIscopy();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getIstapped();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getHassummoningsickness();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getAttackstate();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getBlockstate();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getDamage();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getAttackinfo();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.AttackInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlockinfo();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.BlockInfo.serializeBinaryToWriter
    );
  }
  f = message.getLoyalty();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getObjectsourcegrpid();
  if (f !== 0) {
    writer.writeUint32(
      28,
      f
    );
  }
  f = message.getName();
  if (f !== 0) {
    writer.writeUint32(
      29,
      f
    );
  }
  f = message.getParentid();
  if (f !== 0) {
    writer.writeUint32(
      31,
      f
    );
  }
  f = message.getOverlaygrpid();
  if (f !== 0) {
    writer.writeUint32(
      32,
      f
    );
  }
};


/**
 * repeated SuperType superTypes = 9;
 * @return {!Array.<!proto.SuperType>}
 */
proto.GameObjectInfo.prototype.getSupertypesList = function() {
  return /** @type {!Array.<!proto.SuperType>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<!proto.SuperType>} value */
proto.GameObjectInfo.prototype.setSupertypesList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!proto.SuperType} value
 * @param {number=} opt_index
 */
proto.GameObjectInfo.prototype.addSupertypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.GameObjectInfo.prototype.clearSupertypesList = function() {
  this.setSupertypesList([]);
};


/**
 * repeated CardType cardTypes = 10;
 * @return {!Array.<!proto.CardType>}
 */
proto.GameObjectInfo.prototype.getCardtypesList = function() {
  return /** @type {!Array.<!proto.CardType>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<!proto.CardType>} value */
proto.GameObjectInfo.prototype.setCardtypesList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!proto.CardType} value
 * @param {number=} opt_index
 */
proto.GameObjectInfo.prototype.addCardtypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.GameObjectInfo.prototype.clearCardtypesList = function() {
  this.setCardtypesList([]);
};


/**
 * repeated SubType subtypes = 11;
 * @return {!Array.<!proto.SubType>}
 */
proto.GameObjectInfo.prototype.getSubtypesList = function() {
  return /** @type {!Array.<!proto.SubType>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array.<!proto.SubType>} value */
proto.GameObjectInfo.prototype.setSubtypesList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!proto.SubType} value
 * @param {number=} opt_index
 */
proto.GameObjectInfo.prototype.addSubtypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.GameObjectInfo.prototype.clearSubtypesList = function() {
  this.setSubtypesList([]);
};


/**
 * repeated CardColor color = 12;
 * @return {!Array.<!proto.CardColor>}
 */
proto.GameObjectInfo.prototype.getColorList = function() {
  return /** @type {!Array.<!proto.CardColor>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<!proto.CardColor>} value */
proto.GameObjectInfo.prototype.setColorList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!proto.CardColor} value
 * @param {number=} opt_index
 */
proto.GameObjectInfo.prototype.addColor = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.GameObjectInfo.prototype.clearColorList = function() {
  this.setColorList([]);
};


/**
 * repeated uint32 viewers = 26;
 * @return {!Array.<number>}
 */
proto.GameObjectInfo.prototype.getViewersList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 26));
};


/** @param {!Array.<number>} value */
proto.GameObjectInfo.prototype.setViewersList = function(value) {
  jspb.Message.setField(this, 26, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GameObjectInfo.prototype.addViewers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 26, value, opt_index);
};


proto.GameObjectInfo.prototype.clearViewersList = function() {
  this.setViewersList([]);
};


/**
 * repeated uint32 abilities = 30;
 * @return {!Array.<number>}
 */
proto.GameObjectInfo.prototype.getAbilitiesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 30));
};


/** @param {!Array.<number>} value */
proto.GameObjectInfo.prototype.setAbilitiesList = function(value) {
  jspb.Message.setField(this, 30, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GameObjectInfo.prototype.addAbilities = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 30, value, opt_index);
};


proto.GameObjectInfo.prototype.clearAbilitiesList = function() {
  this.setAbilitiesList([]);
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 grpId = 2;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getGrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setGrpid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 groupId = 3;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setGroupid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional GameObjectType type = 4;
 * @return {!proto.GameObjectType}
 */
proto.GameObjectInfo.prototype.getType = function() {
  return /** @type {!proto.GameObjectType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.GameObjectType} value */
proto.GameObjectInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 zoneId = 5;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setZoneid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Visibility visibility = 6;
 * @return {!proto.Visibility}
 */
proto.GameObjectInfo.prototype.getVisibility = function() {
  return /** @type {!proto.Visibility} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.Visibility} value */
proto.GameObjectInfo.prototype.setVisibility = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint32 ownerSeatId = 7;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getOwnerseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setOwnerseatid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 controllerSeatId = 8;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getControllerseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setControllerseatid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Int32Value power = 13;
 * @return {?proto.Int32Value}
 */
proto.GameObjectInfo.prototype.getPower = function() {
  return /** @type{?proto.Int32Value} */ (
    jspb.Message.getWrapperField(this, proto.Int32Value, 13));
};


/** @param {?proto.Int32Value|undefined} value */
proto.GameObjectInfo.prototype.setPower = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.GameObjectInfo.prototype.clearPower = function() {
  this.setPower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameObjectInfo.prototype.hasPower = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Int32Value toughness = 14;
 * @return {?proto.Int32Value}
 */
proto.GameObjectInfo.prototype.getToughness = function() {
  return /** @type{?proto.Int32Value} */ (
    jspb.Message.getWrapperField(this, proto.Int32Value, 14));
};


/** @param {?proto.Int32Value|undefined} value */
proto.GameObjectInfo.prototype.setToughness = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.GameObjectInfo.prototype.clearToughness = function() {
  this.setToughness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameObjectInfo.prototype.hasToughness = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool isCopy = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GameObjectInfo.prototype.getIscopy = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.GameObjectInfo.prototype.setIscopy = function(value) {
  jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool isTapped = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GameObjectInfo.prototype.getIstapped = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.GameObjectInfo.prototype.setIstapped = function(value) {
  jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool hasSummoningSickness = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GameObjectInfo.prototype.getHassummoningsickness = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.GameObjectInfo.prototype.setHassummoningsickness = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional AttackState attackState = 19;
 * @return {!proto.AttackState}
 */
proto.GameObjectInfo.prototype.getAttackstate = function() {
  return /** @type {!proto.AttackState} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.AttackState} value */
proto.GameObjectInfo.prototype.setAttackstate = function(value) {
  jspb.Message.setProto3EnumField(this, 19, value);
};


/**
 * optional BlockState blockState = 20;
 * @return {!proto.BlockState}
 */
proto.GameObjectInfo.prototype.getBlockstate = function() {
  return /** @type {!proto.BlockState} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {!proto.BlockState} value */
proto.GameObjectInfo.prototype.setBlockstate = function(value) {
  jspb.Message.setProto3EnumField(this, 20, value);
};


/**
 * optional uint32 damage = 23;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setDamage = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional AttackInfo attackInfo = 24;
 * @return {?proto.AttackInfo}
 */
proto.GameObjectInfo.prototype.getAttackinfo = function() {
  return /** @type{?proto.AttackInfo} */ (
    jspb.Message.getWrapperField(this, proto.AttackInfo, 24));
};


/** @param {?proto.AttackInfo|undefined} value */
proto.GameObjectInfo.prototype.setAttackinfo = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.GameObjectInfo.prototype.clearAttackinfo = function() {
  this.setAttackinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameObjectInfo.prototype.hasAttackinfo = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional BlockInfo blockInfo = 25;
 * @return {?proto.BlockInfo}
 */
proto.GameObjectInfo.prototype.getBlockinfo = function() {
  return /** @type{?proto.BlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.BlockInfo, 25));
};


/** @param {?proto.BlockInfo|undefined} value */
proto.GameObjectInfo.prototype.setBlockinfo = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.GameObjectInfo.prototype.clearBlockinfo = function() {
  this.setBlockinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameObjectInfo.prototype.hasBlockinfo = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional UInt32Value loyalty = 27;
 * @return {?proto.UInt32Value}
 */
proto.GameObjectInfo.prototype.getLoyalty = function() {
  return /** @type{?proto.UInt32Value} */ (
    jspb.Message.getWrapperField(this, proto.UInt32Value, 27));
};


/** @param {?proto.UInt32Value|undefined} value */
proto.GameObjectInfo.prototype.setLoyalty = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.GameObjectInfo.prototype.clearLoyalty = function() {
  this.setLoyalty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameObjectInfo.prototype.hasLoyalty = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional uint32 objectSourceGrpId = 28;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getObjectsourcegrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setObjectsourcegrpid = function(value) {
  jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional uint32 name = 29;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getName = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setName = function(value) {
  jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional uint32 parentId = 31;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getParentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setParentid = function(value) {
  jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional uint32 overlayGrpId = 32;
 * @return {number}
 */
proto.GameObjectInfo.prototype.getOverlaygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.GameObjectInfo.prototype.setOverlaygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 32, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameStateMessage.repeatedFields_, null);
};
goog.inherits(proto.GameStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameStateMessage.displayName = 'proto.GameStateMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameStateMessage.repeatedFields_ = [4,5,7,8,9,10,13,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GameStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamsList: jspb.Message.toObjectList(msg.getTeamsList(),
    proto.TeamInfo.toObject, includeInstance),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerInfo.toObject, includeInstance),
    zonesList: jspb.Message.toObjectList(msg.getZonesList(),
    proto.ZoneInfo.toObject, includeInstance),
    gameobjectsList: jspb.Message.toObjectList(msg.getGameobjectsList(),
    proto.GameObjectInfo.toObject, includeInstance),
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    proto.AnnotationInfo.toObject, includeInstance),
    diffdeletedinstanceidsList: jspb.Message.getRepeatedField(msg, 10),
    timersList: jspb.Message.toObjectList(msg.getTimersList(),
    proto.TimerInfo.toObject, includeInstance),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.ActionInfo.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamestateid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameinfo: (f = msg.getGameinfo()) && proto.GameInfo.toObject(includeInstance, f),
    turninfo: (f = msg.getTurninfo()) && proto.TurnInfo.toObject(includeInstance, f),
    pendingmessagecount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    prevgamestateid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    update: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameStateMessage}
 */
proto.GameStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameStateMessage;
  return proto.GameStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameStateMessage}
 */
proto.GameStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.TeamInfo;
      reader.readMessage(value,proto.TeamInfo.deserializeBinaryFromReader);
      msg.addTeams(value);
      break;
    case 5:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 7:
      var value = new proto.ZoneInfo;
      reader.readMessage(value,proto.ZoneInfo.deserializeBinaryFromReader);
      msg.addZones(value);
      break;
    case 8:
      var value = new proto.GameObjectInfo;
      reader.readMessage(value,proto.GameObjectInfo.deserializeBinaryFromReader);
      msg.addGameobjects(value);
      break;
    case 9:
      var value = new proto.AnnotationInfo;
      reader.readMessage(value,proto.AnnotationInfo.deserializeBinaryFromReader);
      msg.addAnnotations(value);
      break;
    case 10:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDiffdeletedinstanceidsList(value);
      break;
    case 13:
      var value = new proto.TimerInfo;
      reader.readMessage(value,proto.TimerInfo.deserializeBinaryFromReader);
      msg.addTimers(value);
      break;
    case 15:
      var value = new proto.ActionInfo;
      reader.readMessage(value,proto.ActionInfo.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 1:
      var value = /** @type {!proto.GameStateType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGamestateid(value);
      break;
    case 3:
      var value = new proto.GameInfo;
      reader.readMessage(value,proto.GameInfo.deserializeBinaryFromReader);
      msg.setGameinfo(value);
      break;
    case 6:
      var value = new proto.TurnInfo;
      reader.readMessage(value,proto.TurnInfo.deserializeBinaryFromReader);
      msg.setTurninfo(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPendingmessagecount(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrevgamestateid(value);
      break;
    case 14:
      var value = /** @type {!proto.GameStateUpdate} */ (reader.readEnum());
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.TeamInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getZonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ZoneInfo.serializeBinaryToWriter
    );
  }
  f = message.getGameobjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.GameObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.AnnotationInfo.serializeBinaryToWriter
    );
  }
  f = message.getDiffdeletedinstanceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      10,
      f
    );
  }
  f = message.getTimersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.TimerInfo.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.ActionInfo.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGamestateid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGameinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GameInfo.serializeBinaryToWriter
    );
  }
  f = message.getTurninfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TurnInfo.serializeBinaryToWriter
    );
  }
  f = message.getPendingmessagecount();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getPrevgamestateid();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getUpdate();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
};


/**
 * repeated TeamInfo teams = 4;
 * @return {!Array.<!proto.TeamInfo>}
 */
proto.GameStateMessage.prototype.getTeamsList = function() {
  return /** @type{!Array.<!proto.TeamInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TeamInfo, 4));
};


/** @param {!Array.<!proto.TeamInfo>} value */
proto.GameStateMessage.prototype.setTeamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.TeamInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TeamInfo}
 */
proto.GameStateMessage.prototype.addTeams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.TeamInfo, opt_index);
};


proto.GameStateMessage.prototype.clearTeamsList = function() {
  this.setTeamsList([]);
};


/**
 * repeated PlayerInfo players = 5;
 * @return {!Array.<!proto.PlayerInfo>}
 */
proto.GameStateMessage.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInfo, 5));
};


/** @param {!Array.<!proto.PlayerInfo>} value */
proto.GameStateMessage.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInfo}
 */
proto.GameStateMessage.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.PlayerInfo, opt_index);
};


proto.GameStateMessage.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * repeated ZoneInfo zones = 7;
 * @return {!Array.<!proto.ZoneInfo>}
 */
proto.GameStateMessage.prototype.getZonesList = function() {
  return /** @type{!Array.<!proto.ZoneInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ZoneInfo, 7));
};


/** @param {!Array.<!proto.ZoneInfo>} value */
proto.GameStateMessage.prototype.setZonesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ZoneInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ZoneInfo}
 */
proto.GameStateMessage.prototype.addZones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ZoneInfo, opt_index);
};


proto.GameStateMessage.prototype.clearZonesList = function() {
  this.setZonesList([]);
};


/**
 * repeated GameObjectInfo gameObjects = 8;
 * @return {!Array.<!proto.GameObjectInfo>}
 */
proto.GameStateMessage.prototype.getGameobjectsList = function() {
  return /** @type{!Array.<!proto.GameObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GameObjectInfo, 8));
};


/** @param {!Array.<!proto.GameObjectInfo>} value */
proto.GameStateMessage.prototype.setGameobjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.GameObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GameObjectInfo}
 */
proto.GameStateMessage.prototype.addGameobjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.GameObjectInfo, opt_index);
};


proto.GameStateMessage.prototype.clearGameobjectsList = function() {
  this.setGameobjectsList([]);
};


/**
 * repeated AnnotationInfo annotations = 9;
 * @return {!Array.<!proto.AnnotationInfo>}
 */
proto.GameStateMessage.prototype.getAnnotationsList = function() {
  return /** @type{!Array.<!proto.AnnotationInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AnnotationInfo, 9));
};


/** @param {!Array.<!proto.AnnotationInfo>} value */
proto.GameStateMessage.prototype.setAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.AnnotationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AnnotationInfo}
 */
proto.GameStateMessage.prototype.addAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.AnnotationInfo, opt_index);
};


proto.GameStateMessage.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};


/**
 * repeated uint32 diffDeletedInstanceIds = 10;
 * @return {!Array.<number>}
 */
proto.GameStateMessage.prototype.getDiffdeletedinstanceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<number>} value */
proto.GameStateMessage.prototype.setDiffdeletedinstanceidsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GameStateMessage.prototype.addDiffdeletedinstanceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.GameStateMessage.prototype.clearDiffdeletedinstanceidsList = function() {
  this.setDiffdeletedinstanceidsList([]);
};


/**
 * repeated TimerInfo timers = 13;
 * @return {!Array.<!proto.TimerInfo>}
 */
proto.GameStateMessage.prototype.getTimersList = function() {
  return /** @type{!Array.<!proto.TimerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimerInfo, 13));
};


/** @param {!Array.<!proto.TimerInfo>} value */
proto.GameStateMessage.prototype.setTimersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.TimerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimerInfo}
 */
proto.GameStateMessage.prototype.addTimers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.TimerInfo, opt_index);
};


proto.GameStateMessage.prototype.clearTimersList = function() {
  this.setTimersList([]);
};


/**
 * repeated ActionInfo actions = 15;
 * @return {!Array.<!proto.ActionInfo>}
 */
proto.GameStateMessage.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.ActionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ActionInfo, 15));
};


/** @param {!Array.<!proto.ActionInfo>} value */
proto.GameStateMessage.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.ActionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ActionInfo}
 */
proto.GameStateMessage.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.ActionInfo, opt_index);
};


proto.GameStateMessage.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * optional GameStateType type = 1;
 * @return {!proto.GameStateType}
 */
proto.GameStateMessage.prototype.getType = function() {
  return /** @type {!proto.GameStateType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.GameStateType} value */
proto.GameStateMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 gameStateId = 2;
 * @return {number}
 */
proto.GameStateMessage.prototype.getGamestateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameStateMessage.prototype.setGamestateid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional GameInfo gameInfo = 3;
 * @return {?proto.GameInfo}
 */
proto.GameStateMessage.prototype.getGameinfo = function() {
  return /** @type{?proto.GameInfo} */ (
    jspb.Message.getWrapperField(this, proto.GameInfo, 3));
};


/** @param {?proto.GameInfo|undefined} value */
proto.GameStateMessage.prototype.setGameinfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameStateMessage.prototype.clearGameinfo = function() {
  this.setGameinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameStateMessage.prototype.hasGameinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TurnInfo turnInfo = 6;
 * @return {?proto.TurnInfo}
 */
proto.GameStateMessage.prototype.getTurninfo = function() {
  return /** @type{?proto.TurnInfo} */ (
    jspb.Message.getWrapperField(this, proto.TurnInfo, 6));
};


/** @param {?proto.TurnInfo|undefined} value */
proto.GameStateMessage.prototype.setTurninfo = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.GameStateMessage.prototype.clearTurninfo = function() {
  this.setTurninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameStateMessage.prototype.hasTurninfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 pendingMessageCount = 11;
 * @return {number}
 */
proto.GameStateMessage.prototype.getPendingmessagecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.GameStateMessage.prototype.setPendingmessagecount = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 prevGameStateId = 12;
 * @return {number}
 */
proto.GameStateMessage.prototype.getPrevgamestateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.GameStateMessage.prototype.setPrevgamestateid = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional GameStateUpdate update = 14;
 * @return {!proto.GameStateUpdate}
 */
proto.GameStateMessage.prototype.getUpdate = function() {
  return /** @type {!proto.GameStateUpdate} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.GameStateUpdate} value */
proto.GameStateMessage.prototype.setUpdate = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameStateRedactorConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameStateRedactorConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameStateRedactorConfiguration.displayName = 'proto.GameStateRedactorConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameStateRedactorConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.GameStateRedactorConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameStateRedactorConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStateRedactorConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableredaction: jspb.Message.getFieldWithDefault(msg, 1, false),
    enableforcediff: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameStateRedactorConfiguration}
 */
proto.GameStateRedactorConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameStateRedactorConfiguration;
  return proto.GameStateRedactorConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameStateRedactorConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameStateRedactorConfiguration}
 */
proto.GameStateRedactorConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableredaction(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableforcediff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameStateRedactorConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameStateRedactorConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameStateRedactorConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStateRedactorConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableredaction();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEnableforcediff();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool enableRedaction = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GameStateRedactorConfiguration.prototype.getEnableredaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.GameStateRedactorConfiguration.prototype.setEnableredaction = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool enableForceDiff = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GameStateRedactorConfiguration.prototype.getEnableforcediff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.GameStateRedactorConfiguration.prototype.setEnableforcediff = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GatherReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GatherReq.repeatedFields_, null);
};
goog.inherits(proto.GatherReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GatherReq.displayName = 'proto.GatherReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GatherReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GatherReq.prototype.toObject = function(opt_includeInstance) {
  return proto.GatherReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GatherReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GatherReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcesList: jspb.Message.toObjectList(msg.getSourcesList(),
    proto.GatherSource.toObject, includeInstance),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    destinationid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GatherReq}
 */
proto.GatherReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GatherReq;
  return proto.GatherReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GatherReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GatherReq}
 */
proto.GatherReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.GatherSource;
      reader.readMessage(value,proto.GatherSource.deserializeBinaryFromReader);
      msg.addSources(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestinationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GatherReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GatherReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GatherReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GatherReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.GatherSource.serializeBinaryToWriter
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDestinationid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated GatherSource sources = 3;
 * @return {!Array.<!proto.GatherSource>}
 */
proto.GatherReq.prototype.getSourcesList = function() {
  return /** @type{!Array.<!proto.GatherSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GatherSource, 3));
};


/** @param {!Array.<!proto.GatherSource>} value */
proto.GatherReq.prototype.setSourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.GatherSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GatherSource}
 */
proto.GatherReq.prototype.addSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.GatherSource, opt_index);
};


proto.GatherReq.prototype.clearSourcesList = function() {
  this.setSourcesList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.GatherReq.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GatherReq.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 destinationId = 2;
 * @return {number}
 */
proto.GatherReq.prototype.getDestinationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GatherReq.prototype.setDestinationid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GatherResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GatherResp.repeatedFields_, null);
};
goog.inherits(proto.GatherResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GatherResp.displayName = 'proto.GatherResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GatherResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GatherResp.prototype.toObject = function(opt_includeInstance) {
  return proto.GatherResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GatherResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GatherResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatheringsList: jspb.Message.toObjectList(msg.getGatheringsList(),
    proto.Gathering.toObject, includeInstance),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GatherResp}
 */
proto.GatherResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GatherResp;
  return proto.GatherResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GatherResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GatherResp}
 */
proto.GatherResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.Gathering;
      reader.readMessage(value,proto.Gathering.deserializeBinaryFromReader);
      msg.addGatherings(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GatherResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GatherResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GatherResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GatherResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatheringsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Gathering.serializeBinaryToWriter
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated Gathering gatherings = 2;
 * @return {!Array.<!proto.Gathering>}
 */
proto.GatherResp.prototype.getGatheringsList = function() {
  return /** @type{!Array.<!proto.Gathering>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Gathering, 2));
};


/** @param {!Array.<!proto.Gathering>} value */
proto.GatherResp.prototype.setGatheringsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Gathering=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Gathering}
 */
proto.GatherResp.prototype.addGatherings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Gathering, opt_index);
};


proto.GatherResp.prototype.clearGatheringsList = function() {
  this.setGatheringsList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.GatherResp.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GatherResp.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GatherSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GatherSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GatherSource.displayName = 'proto.GatherSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GatherSource.prototype.toObject = function(opt_includeInstance) {
  return proto.GatherSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GatherSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GatherSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minamount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxamount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GatherSource}
 */
proto.GatherSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GatherSource;
  return proto.GatherSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GatherSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GatherSource}
 */
proto.GatherSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinamount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxamount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GatherSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GatherSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GatherSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GatherSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinamount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxamount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 sourceId = 1;
 * @return {number}
 */
proto.GatherSource.prototype.getSourceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GatherSource.prototype.setSourceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minAmount = 2;
 * @return {number}
 */
proto.GatherSource.prototype.getMinamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GatherSource.prototype.setMinamount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxAmount = 3;
 * @return {number}
 */
proto.GatherSource.prototype.getMaxamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GatherSource.prototype.setMaxamount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Gathering = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Gathering, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Gathering.displayName = 'proto.Gathering';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Gathering.prototype.toObject = function(opt_includeInstance) {
  return proto.Gathering.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Gathering} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Gathering.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Gathering}
 */
proto.Gathering.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Gathering;
  return proto.Gathering.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Gathering} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Gathering}
 */
proto.Gathering.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Gathering.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Gathering.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Gathering} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Gathering.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.Gathering.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Gathering.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 amount = 2;
 * @return {number}
 */
proto.Gathering.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Gathering.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GeneralConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GeneralConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GeneralConfiguration.displayName = 'proto.GeneralConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GeneralConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.GeneralConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GeneralConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GeneralConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationmode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxloglevel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GeneralConfiguration}
 */
proto.GeneralConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GeneralConfiguration;
  return proto.GeneralConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GeneralConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GeneralConfiguration}
 */
proto.GeneralConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.GRETHHostOperationMode} */ (reader.readEnum());
      msg.setOperationmode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxloglevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GeneralConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GeneralConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GeneralConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GeneralConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperationmode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMaxloglevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional GRETHHostOperationMode operationMode = 1;
 * @return {!proto.GRETHHostOperationMode}
 */
proto.GeneralConfiguration.prototype.getOperationmode = function() {
  return /** @type {!proto.GRETHHostOperationMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.GRETHHostOperationMode} value */
proto.GeneralConfiguration.prototype.setOperationmode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 maxLogLevel = 2;
 * @return {number}
 */
proto.GeneralConfiguration.prototype.getMaxloglevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GeneralConfiguration.prototype.setMaxloglevel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetGameRoomIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetGameRoomIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.GetGameRoomIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetGameRoomIdsRequest.displayName = 'proto.GetGameRoomIdsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetGameRoomIdsRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetGameRoomIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetGameRoomIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetGameRoomIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomstatetypefilterList: jspb.Message.getRepeatedField(msg, 5),
    gameroomtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    includeinvisiblerooms: jspb.Message.getFieldWithDefault(msg, 7, false),
    includereservedrooms: jspb.Message.getFieldWithDefault(msg, 8, false),
    sortfilterpagingoptions: (f = msg.getSortfilterpagingoptions()) && proto.SortFilterPagingOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetGameRoomIdsRequest}
 */
proto.GetGameRoomIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetGameRoomIdsRequest;
  return proto.GetGameRoomIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetGameRoomIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetGameRoomIdsRequest}
 */
proto.GetGameRoomIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 5:
      var value = /** @type {!Array.<!proto.MatchGameRoomStateType>} */ (reader.readPackedEnum());
      msg.setGameroomstatetypefilterList(value);
      break;
    case 2:
      var value = /** @type {!proto.GameRoomType} */ (reader.readEnum());
      msg.setGameroomtype(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeinvisiblerooms(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludereservedrooms(value);
      break;
    case 10:
      var value = new proto.SortFilterPagingOptions;
      reader.readMessage(value,proto.SortFilterPagingOptions.deserializeBinaryFromReader);
      msg.setSortfilterpagingoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetGameRoomIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetGameRoomIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetGameRoomIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomstatetypefilterList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getGameroomtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIncludeinvisiblerooms();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIncludereservedrooms();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getSortfilterpagingoptions();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.SortFilterPagingOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string eventId = 1;
 * @return {string}
 */
proto.GetGameRoomIdsRequest.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetGameRoomIdsRequest.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated MatchGameRoomStateType gameRoomStateTypeFilter = 5;
 * @return {!Array.<!proto.MatchGameRoomStateType>}
 */
proto.GetGameRoomIdsRequest.prototype.getGameroomstatetypefilterList = function() {
  return /** @type {!Array.<!proto.MatchGameRoomStateType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<!proto.MatchGameRoomStateType>} value */
proto.GetGameRoomIdsRequest.prototype.setGameroomstatetypefilterList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.MatchGameRoomStateType} value
 * @param {number=} opt_index
 */
proto.GetGameRoomIdsRequest.prototype.addGameroomstatetypefilter = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.GetGameRoomIdsRequest.prototype.clearGameroomstatetypefilterList = function() {
  this.setGameroomstatetypefilterList([]);
};


/**
 * optional GameRoomType gameRoomType = 2;
 * @return {!proto.GameRoomType}
 */
proto.GetGameRoomIdsRequest.prototype.getGameroomtype = function() {
  return /** @type {!proto.GameRoomType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GameRoomType} value */
proto.GetGameRoomIdsRequest.prototype.setGameroomtype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool includeInvisibleRooms = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GetGameRoomIdsRequest.prototype.getIncludeinvisiblerooms = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.GetGameRoomIdsRequest.prototype.setIncludeinvisiblerooms = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool includeReservedRooms = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GetGameRoomIdsRequest.prototype.getIncludereservedrooms = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.GetGameRoomIdsRequest.prototype.setIncludereservedrooms = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional SortFilterPagingOptions sortFilterPagingOptions = 10;
 * @return {?proto.SortFilterPagingOptions}
 */
proto.GetGameRoomIdsRequest.prototype.getSortfilterpagingoptions = function() {
  return /** @type{?proto.SortFilterPagingOptions} */ (
    jspb.Message.getWrapperField(this, proto.SortFilterPagingOptions, 10));
};


/** @param {?proto.SortFilterPagingOptions|undefined} value */
proto.GetGameRoomIdsRequest.prototype.setSortfilterpagingoptions = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.GetGameRoomIdsRequest.prototype.clearSortfilterpagingoptions = function() {
  this.setSortfilterpagingoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGameRoomIdsRequest.prototype.hasSortfilterpagingoptions = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetGameRoomIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetGameRoomIdsResponse.repeatedFields_, null);
};
goog.inherits(proto.GetGameRoomIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetGameRoomIdsResponse.displayName = 'proto.GetGameRoomIdsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetGameRoomIdsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetGameRoomIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetGameRoomIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetGameRoomIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroomidsList: jspb.Message.getRepeatedField(msg, 1),
    continuationtoken: (f = msg.getContinuationtoken()) && proto.ContinuationToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetGameRoomIdsResponse}
 */
proto.GetGameRoomIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetGameRoomIdsResponse;
  return proto.GetGameRoomIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetGameRoomIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetGameRoomIdsResponse}
 */
proto.GetGameRoomIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGameroomids(value);
      break;
    case 10:
      var value = new proto.ContinuationToken;
      reader.readMessage(value,proto.ContinuationToken.deserializeBinaryFromReader);
      msg.setContinuationtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetGameRoomIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetGameRoomIdsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetGameRoomIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomIdsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroomidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getContinuationtoken();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ContinuationToken.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string gameRoomIds = 1;
 * @return {!Array.<string>}
 */
proto.GetGameRoomIdsResponse.prototype.getGameroomidsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.GetGameRoomIdsResponse.prototype.setGameroomidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.GetGameRoomIdsResponse.prototype.addGameroomids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.GetGameRoomIdsResponse.prototype.clearGameroomidsList = function() {
  this.setGameroomidsList([]);
};


/**
 * optional ContinuationToken continuationToken = 10;
 * @return {?proto.ContinuationToken}
 */
proto.GetGameRoomIdsResponse.prototype.getContinuationtoken = function() {
  return /** @type{?proto.ContinuationToken} */ (
    jspb.Message.getWrapperField(this, proto.ContinuationToken, 10));
};


/** @param {?proto.ContinuationToken|undefined} value */
proto.GetGameRoomIdsResponse.prototype.setContinuationtoken = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.GetGameRoomIdsResponse.prototype.clearContinuationtoken = function() {
  this.setContinuationtoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGameRoomIdsResponse.prototype.hasContinuationtoken = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetGameRoomInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetGameRoomInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetGameRoomInfoRequest.displayName = 'proto.GetGameRoomInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetGameRoomInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetGameRoomInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetGameRoomInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroomid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetGameRoomInfoRequest}
 */
proto.GetGameRoomInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetGameRoomInfoRequest;
  return proto.GetGameRoomInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetGameRoomInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetGameRoomInfoRequest}
 */
proto.GetGameRoomInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetGameRoomInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetGameRoomInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetGameRoomInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string gameRoomId = 1;
 * @return {string}
 */
proto.GetGameRoomInfoRequest.prototype.getGameroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetGameRoomInfoRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetGameRoomInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GetGameRoomInfoResponse.oneofGroups_);
};
goog.inherits(proto.GetGameRoomInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetGameRoomInfoResponse.displayName = 'proto.GetGameRoomInfoResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GetGameRoomInfoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.GetGameRoomInfoResponse.MessageCase = {
  MESSAGE_NOT_SET: 0,
  MATCHROOMINFO: 1,
  DRAFTROOMINFO: 2
};

/**
 * @return {proto.GetGameRoomInfoResponse.MessageCase}
 */
proto.GetGameRoomInfoResponse.prototype.getMessageCase = function() {
  return /** @type {proto.GetGameRoomInfoResponse.MessageCase} */(jspb.Message.computeOneofCase(this, proto.GetGameRoomInfoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetGameRoomInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetGameRoomInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetGameRoomInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchroominfo: (f = msg.getMatchroominfo()) && proto.MatchGameRoomInfo.toObject(includeInstance, f),
    draftroominfo: (f = msg.getDraftroominfo()) && proto.DraftGameRoomInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetGameRoomInfoResponse}
 */
proto.GetGameRoomInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetGameRoomInfoResponse;
  return proto.GetGameRoomInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetGameRoomInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetGameRoomInfoResponse}
 */
proto.GetGameRoomInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchGameRoomInfo;
      reader.readMessage(value,proto.MatchGameRoomInfo.deserializeBinaryFromReader);
      msg.setMatchroominfo(value);
      break;
    case 2:
      var value = new proto.DraftGameRoomInfo;
      reader.readMessage(value,proto.DraftGameRoomInfo.deserializeBinaryFromReader);
      msg.setDraftroominfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetGameRoomInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetGameRoomInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetGameRoomInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetGameRoomInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchroominfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchGameRoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getDraftroominfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DraftGameRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchGameRoomInfo matchRoomInfo = 1;
 * @return {?proto.MatchGameRoomInfo}
 */
proto.GetGameRoomInfoResponse.prototype.getMatchroominfo = function() {
  return /** @type{?proto.MatchGameRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomInfo, 1));
};


/** @param {?proto.MatchGameRoomInfo|undefined} value */
proto.GetGameRoomInfoResponse.prototype.setMatchroominfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.GetGameRoomInfoResponse.oneofGroups_[0], value);
};


proto.GetGameRoomInfoResponse.prototype.clearMatchroominfo = function() {
  this.setMatchroominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGameRoomInfoResponse.prototype.hasMatchroominfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DraftGameRoomInfo draftRoomInfo = 2;
 * @return {?proto.DraftGameRoomInfo}
 */
proto.GetGameRoomInfoResponse.prototype.getDraftroominfo = function() {
  return /** @type{?proto.DraftGameRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.DraftGameRoomInfo, 2));
};


/** @param {?proto.DraftGameRoomInfo|undefined} value */
proto.GetGameRoomInfoResponse.prototype.setDraftroominfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.GetGameRoomInfoResponse.oneofGroups_[0], value);
};


proto.GetGameRoomInfoResponse.prototype.clearDraftroominfo = function() {
  this.setDraftroominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetGameRoomInfoResponse.prototype.hasDraftroominfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetLobbyUserIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetLobbyUserIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetLobbyUserIdsRequest.displayName = 'proto.GetLobbyUserIdsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetLobbyUserIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetLobbyUserIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetLobbyUserIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sortfilterpagingoptions: (f = msg.getSortfilterpagingoptions()) && proto.SortFilterPagingOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetLobbyUserIdsRequest}
 */
proto.GetLobbyUserIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetLobbyUserIdsRequest;
  return proto.GetLobbyUserIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetLobbyUserIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetLobbyUserIdsRequest}
 */
proto.GetLobbyUserIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.SortFilterPagingOptions;
      reader.readMessage(value,proto.SortFilterPagingOptions.deserializeBinaryFromReader);
      msg.setSortfilterpagingoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetLobbyUserIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetLobbyUserIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetLobbyUserIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSortfilterpagingoptions();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.SortFilterPagingOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional SortFilterPagingOptions sortFilterPagingOptions = 10;
 * @return {?proto.SortFilterPagingOptions}
 */
proto.GetLobbyUserIdsRequest.prototype.getSortfilterpagingoptions = function() {
  return /** @type{?proto.SortFilterPagingOptions} */ (
    jspb.Message.getWrapperField(this, proto.SortFilterPagingOptions, 10));
};


/** @param {?proto.SortFilterPagingOptions|undefined} value */
proto.GetLobbyUserIdsRequest.prototype.setSortfilterpagingoptions = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.GetLobbyUserIdsRequest.prototype.clearSortfilterpagingoptions = function() {
  this.setSortfilterpagingoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetLobbyUserIdsRequest.prototype.hasSortfilterpagingoptions = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetLobbyUserIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetLobbyUserIdsResponse.repeatedFields_, null);
};
goog.inherits(proto.GetLobbyUserIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetLobbyUserIdsResponse.displayName = 'proto.GetLobbyUserIdsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetLobbyUserIdsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetLobbyUserIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetLobbyUserIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetLobbyUserIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    useridsList: jspb.Message.getRepeatedField(msg, 2),
    continuationtoken: (f = msg.getContinuationtoken()) && proto.ContinuationToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetLobbyUserIdsResponse}
 */
proto.GetLobbyUserIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetLobbyUserIdsResponse;
  return proto.GetLobbyUserIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetLobbyUserIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetLobbyUserIdsResponse}
 */
proto.GetLobbyUserIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserids(value);
      break;
    case 10:
      var value = new proto.ContinuationToken;
      reader.readMessage(value,proto.ContinuationToken.deserializeBinaryFromReader);
      msg.setContinuationtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetLobbyUserIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetLobbyUserIdsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetLobbyUserIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserIdsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getContinuationtoken();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ContinuationToken.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string userIds = 2;
 * @return {!Array.<string>}
 */
proto.GetLobbyUserIdsResponse.prototype.getUseridsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.GetLobbyUserIdsResponse.prototype.setUseridsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.GetLobbyUserIdsResponse.prototype.addUserids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.GetLobbyUserIdsResponse.prototype.clearUseridsList = function() {
  this.setUseridsList([]);
};


/**
 * optional ContinuationToken continuationToken = 10;
 * @return {?proto.ContinuationToken}
 */
proto.GetLobbyUserIdsResponse.prototype.getContinuationtoken = function() {
  return /** @type{?proto.ContinuationToken} */ (
    jspb.Message.getWrapperField(this, proto.ContinuationToken, 10));
};


/** @param {?proto.ContinuationToken|undefined} value */
proto.GetLobbyUserIdsResponse.prototype.setContinuationtoken = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.GetLobbyUserIdsResponse.prototype.clearContinuationtoken = function() {
  this.setContinuationtoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetLobbyUserIdsResponse.prototype.hasContinuationtoken = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetLobbyUserInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetLobbyUserInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetLobbyUserInfoRequest.displayName = 'proto.GetLobbyUserInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetLobbyUserInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetLobbyUserInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetLobbyUserInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetLobbyUserInfoRequest}
 */
proto.GetLobbyUserInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetLobbyUserInfoRequest;
  return proto.GetLobbyUserInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetLobbyUserInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetLobbyUserInfoRequest}
 */
proto.GetLobbyUserInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetLobbyUserInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetLobbyUserInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetLobbyUserInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.GetLobbyUserInfoRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetLobbyUserInfoRequest.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetLobbyUserInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetLobbyUserInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetLobbyUserInfoResponse.displayName = 'proto.GetLobbyUserInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetLobbyUserInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetLobbyUserInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetLobbyUserInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userinfo: (f = msg.getUserinfo()) && proto.LobbyUserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetLobbyUserInfoResponse}
 */
proto.GetLobbyUserInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetLobbyUserInfoResponse;
  return proto.GetLobbyUserInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetLobbyUserInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetLobbyUserInfoResponse}
 */
proto.GetLobbyUserInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.LobbyUserInfo;
      reader.readMessage(value,proto.LobbyUserInfo.deserializeBinaryFromReader);
      msg.setUserinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetLobbyUserInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetLobbyUserInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetLobbyUserInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLobbyUserInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LobbyUserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LobbyUserInfo userInfo = 2;
 * @return {?proto.LobbyUserInfo}
 */
proto.GetLobbyUserInfoResponse.prototype.getUserinfo = function() {
  return /** @type{?proto.LobbyUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyUserInfo, 2));
};


/** @param {?proto.LobbyUserInfo|undefined} value */
proto.GetLobbyUserInfoResponse.prototype.setUserinfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetLobbyUserInfoResponse.prototype.clearUserinfo = function() {
  this.setUserinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetLobbyUserInfoResponse.prototype.hasUserinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetSettingsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetSettingsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetSettingsResp.displayName = 'proto.GetSettingsResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetSettingsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.GetSettingsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetSettingsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSettingsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    settings: (f = msg.getSettings()) && proto.SettingsMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetSettingsResp}
 */
proto.GetSettingsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetSettingsResp;
  return proto.GetSettingsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetSettingsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetSettingsResp}
 */
proto.GetSettingsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SettingsMessage;
      reader.readMessage(value,proto.SettingsMessage.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetSettingsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetSettingsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetSettingsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSettingsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SettingsMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional SettingsMessage settings = 1;
 * @return {?proto.SettingsMessage}
 */
proto.GetSettingsResp.prototype.getSettings = function() {
  return /** @type{?proto.SettingsMessage} */ (
    jspb.Message.getWrapperField(this, proto.SettingsMessage, 1));
};


/** @param {?proto.SettingsMessage|undefined} value */
proto.GetSettingsResp.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetSettingsResp.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetSettingsResp.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GreToClientEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GreToClientEvent.repeatedFields_, null);
};
goog.inherits(proto.GreToClientEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GreToClientEvent.displayName = 'proto.GreToClientEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GreToClientEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GreToClientEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.GreToClientEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GreToClientEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GreToClientEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    gretoclientmessagesList: jspb.Message.toObjectList(msg.getGretoclientmessagesList(),
    proto.GREToClientMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GreToClientEvent}
 */
proto.GreToClientEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GreToClientEvent;
  return proto.GreToClientEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GreToClientEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GreToClientEvent}
 */
proto.GreToClientEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GREToClientMessage;
      reader.readMessage(value,proto.GREToClientMessage.deserializeBinaryFromReader);
      msg.addGretoclientmessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GreToClientEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GreToClientEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GreToClientEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GreToClientEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGretoclientmessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GREToClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GREToClientMessage greToClientMessages = 1;
 * @return {!Array.<!proto.GREToClientMessage>}
 */
proto.GreToClientEvent.prototype.getGretoclientmessagesList = function() {
  return /** @type{!Array.<!proto.GREToClientMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GREToClientMessage, 1));
};


/** @param {!Array.<!proto.GREToClientMessage>} value */
proto.GreToClientEvent.prototype.setGretoclientmessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GREToClientMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GREToClientMessage}
 */
proto.GreToClientEvent.prototype.addGretoclientmessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GREToClientMessage, opt_index);
};


proto.GreToClientEvent.prototype.clearGretoclientmessagesList = function() {
  this.setGretoclientmessagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Group.repeatedFields_, null);
};
goog.inherits(proto.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Group.displayName = 'proto.Group';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Group.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1),
    groupid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    zonetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    subzonetype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minselect: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxselect: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Group}
 */
proto.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Group;
  return proto.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Group}
 */
proto.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIdsList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupid(value);
      break;
    case 3:
      var value = /** @type {!proto.ZoneType} */ (reader.readEnum());
      msg.setZonetype(value);
      break;
    case 4:
      var value = /** @type {!proto.SubZoneType} */ (reader.readEnum());
      msg.setSubzonetype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinselect(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxselect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZonetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSubzonetype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMinselect();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMaxselect();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * repeated uint32 ids = 1;
 * @return {!Array.<number>}
 */
proto.Group.prototype.getIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.Group.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Group.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Group.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


/**
 * optional int32 groupId = 2;
 * @return {number}
 */
proto.Group.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Group.prototype.setGroupid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ZoneType zoneType = 3;
 * @return {!proto.ZoneType}
 */
proto.Group.prototype.getZonetype = function() {
  return /** @type {!proto.ZoneType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ZoneType} value */
proto.Group.prototype.setZonetype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SubZoneType subZoneType = 4;
 * @return {!proto.SubZoneType}
 */
proto.Group.prototype.getSubzonetype = function() {
  return /** @type {!proto.SubZoneType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SubZoneType} value */
proto.Group.prototype.setSubzonetype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 minSelect = 5;
 * @return {number}
 */
proto.Group.prototype.getMinselect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Group.prototype.setMinselect = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 maxSelect = 6;
 * @return {number}
 */
proto.Group.prototype.getMaxselect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Group.prototype.setMaxselect = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupReq.repeatedFields_, null);
};
goog.inherits(proto.GroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GroupReq.displayName = 'proto.GroupReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupReq.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceidsList: jspb.Message.getRepeatedField(msg, 1),
    groupspecsList: jspb.Message.toObjectList(msg.getGroupspecsList(),
    proto.GroupSpecification.toObject, includeInstance),
    totalselected: jspb.Message.getFieldWithDefault(msg, 3, 0),
    idx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    grouptype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    context: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupReq}
 */
proto.GroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupReq;
  return proto.GroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupReq}
 */
proto.GroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setInstanceidsList(value);
      break;
    case 2:
      var value = new proto.GroupSpecification;
      reader.readMessage(value,proto.GroupSpecification.deserializeBinaryFromReader);
      msg.addGroupspecs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalselected(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    case 5:
      var value = /** @type {!proto.GroupType} */ (reader.readEnum());
      msg.setGrouptype(value);
      break;
    case 6:
      var value = /** @type {!proto.GroupingContext} */ (reader.readEnum());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getGroupspecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.GroupSpecification.serializeBinaryToWriter
    );
  }
  f = message.getTotalselected();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getGrouptype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * repeated uint32 instanceIds = 1;
 * @return {!Array.<number>}
 */
proto.GroupReq.prototype.getInstanceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.GroupReq.prototype.setInstanceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GroupReq.prototype.addInstanceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.GroupReq.prototype.clearInstanceidsList = function() {
  this.setInstanceidsList([]);
};


/**
 * repeated GroupSpecification groupSpecs = 2;
 * @return {!Array.<!proto.GroupSpecification>}
 */
proto.GroupReq.prototype.getGroupspecsList = function() {
  return /** @type{!Array.<!proto.GroupSpecification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupSpecification, 2));
};


/** @param {!Array.<!proto.GroupSpecification>} value */
proto.GroupReq.prototype.setGroupspecsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.GroupSpecification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupSpecification}
 */
proto.GroupReq.prototype.addGroupspecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.GroupSpecification, opt_index);
};


proto.GroupReq.prototype.clearGroupspecsList = function() {
  this.setGroupspecsList([]);
};


/**
 * optional uint32 totalSelected = 3;
 * @return {number}
 */
proto.GroupReq.prototype.getTotalselected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GroupReq.prototype.setTotalselected = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 idx = 4;
 * @return {number}
 */
proto.GroupReq.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GroupReq.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional GroupType groupType = 5;
 * @return {!proto.GroupType}
 */
proto.GroupReq.prototype.getGrouptype = function() {
  return /** @type {!proto.GroupType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.GroupType} value */
proto.GroupReq.prototype.setGrouptype = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional GroupingContext context = 6;
 * @return {!proto.GroupingContext}
 */
proto.GroupReq.prototype.getContext = function() {
  return /** @type {!proto.GroupingContext} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.GroupingContext} value */
proto.GroupReq.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupResp.repeatedFields_, null);
};
goog.inherits(proto.GroupResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GroupResp.displayName = 'proto.GroupResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupResp.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.Group.toObject, includeInstance),
    idx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    grouptype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupResp}
 */
proto.GroupResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupResp;
  return proto.GroupResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupResp}
 */
proto.GroupResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Group;
      reader.readMessage(value,proto.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    case 3:
      var value = /** @type {!proto.GroupType} */ (reader.readEnum());
      msg.setGrouptype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Group.serializeBinaryToWriter
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGrouptype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated Group groups = 1;
 * @return {!Array.<!proto.Group>}
 */
proto.GroupResp.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Group, 1));
};


/** @param {!Array.<!proto.Group>} value */
proto.GroupResp.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Group}
 */
proto.GroupResp.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Group, opt_index);
};


proto.GroupResp.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional uint32 idx = 2;
 * @return {number}
 */
proto.GroupResp.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GroupResp.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional GroupType groupType = 3;
 * @return {!proto.GroupType}
 */
proto.GroupResp.prototype.getGrouptype = function() {
  return /** @type {!proto.GroupType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.GroupType} value */
proto.GroupResp.prototype.setGrouptype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupSpecification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupSpecification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GroupSpecification.displayName = 'proto.GroupSpecification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupSpecification.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupSpecification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupSpecification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupSpecification.toObject = function(includeInstance, msg) {
  var f, obj = {
    lowerbound: jspb.Message.getFieldWithDefault(msg, 1, 0),
    upperbound: jspb.Message.getFieldWithDefault(msg, 2, 0),
    zonetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    subzonetype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupSpecification}
 */
proto.GroupSpecification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupSpecification;
  return proto.GroupSpecification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupSpecification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupSpecification}
 */
proto.GroupSpecification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLowerbound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpperbound(value);
      break;
    case 3:
      var value = /** @type {!proto.ZoneType} */ (reader.readEnum());
      msg.setZonetype(value);
      break;
    case 4:
      var value = /** @type {!proto.SubZoneType} */ (reader.readEnum());
      msg.setSubzonetype(value);
      break;
    case 5:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupSpecification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupSpecification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupSpecification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupSpecification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLowerbound();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUpperbound();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getZonetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSubzonetype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 lowerBound = 1;
 * @return {number}
 */
proto.GroupSpecification.prototype.getLowerbound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GroupSpecification.prototype.setLowerbound = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 upperBound = 2;
 * @return {number}
 */
proto.GroupSpecification.prototype.getUpperbound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GroupSpecification.prototype.setUpperbound = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ZoneType zoneType = 3;
 * @return {!proto.ZoneType}
 */
proto.GroupSpecification.prototype.getZonetype = function() {
  return /** @type {!proto.ZoneType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ZoneType} value */
proto.GroupSpecification.prototype.setZonetype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SubZoneType subZoneType = 4;
 * @return {!proto.SubZoneType}
 */
proto.GroupSpecification.prototype.getSubzonetype = function() {
  return /** @type {!proto.SubZoneType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SubZoneType} value */
proto.GroupSpecification.prototype.setSubzonetype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Prompt prompt = 5;
 * @return {?proto.Prompt}
 */
proto.GroupSpecification.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 5));
};


/** @param {?proto.Prompt|undefined} value */
proto.GroupSpecification.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.GroupSpecification.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GroupSpecification.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IRLoaderConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IRLoaderConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IRLoaderConfiguration.displayName = 'proto.IRLoaderConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IRLoaderConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.IRLoaderConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IRLoaderConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IRLoaderConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    enablelimitedirloading: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IRLoaderConfiguration}
 */
proto.IRLoaderConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IRLoaderConfiguration;
  return proto.IRLoaderConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IRLoaderConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IRLoaderConfiguration}
 */
proto.IRLoaderConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablelimitedirloading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IRLoaderConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IRLoaderConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IRLoaderConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IRLoaderConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnablelimitedirloading();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enableLimitedIRLoading = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.IRLoaderConfiguration.prototype.getEnablelimitedirloading = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.IRLoaderConfiguration.prototype.setEnablelimitedirloading = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IllegalRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IllegalRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IllegalRequestMessage.displayName = 'proto.IllegalRequestMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IllegalRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IllegalRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IllegalRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IllegalRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidmessage: (f = msg.getInvalidmessage()) && proto.ClientToGREMessage.toObject(includeInstance, f),
    reason: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IllegalRequestMessage}
 */
proto.IllegalRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IllegalRequestMessage;
  return proto.IllegalRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IllegalRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IllegalRequestMessage}
 */
proto.IllegalRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientToGREMessage;
      reader.readMessage(value,proto.ClientToGREMessage.deserializeBinaryFromReader);
      msg.setInvalidmessage(value);
      break;
    case 2:
      var value = /** @type {!proto.FailureReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IllegalRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IllegalRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IllegalRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IllegalRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvalidmessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ClientToGREMessage.serializeBinaryToWriter
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ClientToGREMessage invalidMessage = 1;
 * @return {?proto.ClientToGREMessage}
 */
proto.IllegalRequestMessage.prototype.getInvalidmessage = function() {
  return /** @type{?proto.ClientToGREMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToGREMessage, 1));
};


/** @param {?proto.ClientToGREMessage|undefined} value */
proto.IllegalRequestMessage.prototype.setInvalidmessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.IllegalRequestMessage.prototype.clearInvalidmessage = function() {
  this.setInvalidmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IllegalRequestMessage.prototype.hasInvalidmessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FailureReason reason = 2;
 * @return {!proto.FailureReason}
 */
proto.IllegalRequestMessage.prototype.getReason = function() {
  return /** @type {!proto.FailureReason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.FailureReason} value */
proto.IllegalRequestMessage.prototype.setReason = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Int32Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Int32Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Int32Value.displayName = 'proto.Int32Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Int32Value.prototype.toObject = function(opt_includeInstance) {
  return proto.Int32Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Int32Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int32Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Int32Value}
 */
proto.Int32Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Int32Value;
  return proto.Int32Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Int32Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Int32Value}
 */
proto.Int32Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Int32Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Int32Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Int32Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int32Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.Int32Value.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Int32Value.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IntermissionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IntermissionReq.repeatedFields_, null);
};
goog.inherits(proto.IntermissionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IntermissionReq.displayName = 'proto.IntermissionReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IntermissionReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IntermissionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IntermissionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IntermissionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntermissionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.UserOption.toObject, includeInstance),
    intermissionprompt: (f = msg.getIntermissionprompt()) && proto.Prompt.toObject(includeInstance, f),
    gameresulttype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    winningteamid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    result: (f = msg.getResult()) && proto.ResultSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IntermissionReq}
 */
proto.IntermissionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IntermissionReq;
  return proto.IntermissionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IntermissionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IntermissionReq}
 */
proto.IntermissionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UserOption;
      reader.readMessage(value,proto.UserOption.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    case 2:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setIntermissionprompt(value);
      break;
    case 3:
      var value = /** @type {!proto.ResultType} */ (reader.readEnum());
      msg.setGameresulttype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinningteamid(value);
      break;
    case 5:
      var value = new proto.ResultSpec;
      reader.readMessage(value,proto.ResultSpec.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IntermissionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IntermissionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IntermissionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntermissionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UserOption.serializeBinaryToWriter
    );
  }
  f = message.getIntermissionprompt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getGameresulttype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getWinningteamid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ResultSpec.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserOption options = 1;
 * @return {!Array.<!proto.UserOption>}
 */
proto.IntermissionReq.prototype.getOptionsList = function() {
  return /** @type{!Array.<!proto.UserOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UserOption, 1));
};


/** @param {!Array.<!proto.UserOption>} value */
proto.IntermissionReq.prototype.setOptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.UserOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UserOption}
 */
proto.IntermissionReq.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.UserOption, opt_index);
};


proto.IntermissionReq.prototype.clearOptionsList = function() {
  this.setOptionsList([]);
};


/**
 * optional Prompt intermissionPrompt = 2;
 * @return {?proto.Prompt}
 */
proto.IntermissionReq.prototype.getIntermissionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 2));
};


/** @param {?proto.Prompt|undefined} value */
proto.IntermissionReq.prototype.setIntermissionprompt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.IntermissionReq.prototype.clearIntermissionprompt = function() {
  this.setIntermissionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IntermissionReq.prototype.hasIntermissionprompt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResultType gameResultType = 3;
 * @return {!proto.ResultType}
 */
proto.IntermissionReq.prototype.getGameresulttype = function() {
  return /** @type {!proto.ResultType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ResultType} value */
proto.IntermissionReq.prototype.setGameresulttype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 winningTeamId = 4;
 * @return {number}
 */
proto.IntermissionReq.prototype.getWinningteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IntermissionReq.prototype.setWinningteamid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ResultSpec result = 5;
 * @return {?proto.ResultSpec}
 */
proto.IntermissionReq.prototype.getResult = function() {
  return /** @type{?proto.ResultSpec} */ (
    jspb.Message.getWrapperField(this, proto.ResultSpec, 5));
};


/** @param {?proto.ResultSpec|undefined} value */
proto.IntermissionReq.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.IntermissionReq.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IntermissionReq.prototype.hasResult = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvalidAttacker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvalidAttacker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvalidAttacker.displayName = 'proto.InvalidAttacker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvalidAttacker.prototype.toObject = function(opt_includeInstance) {
  return proto.InvalidAttacker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvalidAttacker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidAttacker.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attack: (f = msg.getAttack()) && proto.Attacker.toObject(includeInstance, f),
    decisionprompt: (f = msg.getDecisionprompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvalidAttacker}
 */
proto.InvalidAttacker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvalidAttacker;
  return proto.InvalidAttacker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvalidAttacker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvalidAttacker}
 */
proto.InvalidAttacker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.Attacker;
      reader.readMessage(value,proto.Attacker.deserializeBinaryFromReader);
      msg.setAttack(value);
      break;
    case 3:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setDecisionprompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvalidAttacker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvalidAttacker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvalidAttacker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidAttacker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAttack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Attacker.serializeBinaryToWriter
    );
  }
  f = message.getDecisionprompt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.InvalidAttacker.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.InvalidAttacker.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Attacker attack = 2;
 * @return {?proto.Attacker}
 */
proto.InvalidAttacker.prototype.getAttack = function() {
  return /** @type{?proto.Attacker} */ (
    jspb.Message.getWrapperField(this, proto.Attacker, 2));
};


/** @param {?proto.Attacker|undefined} value */
proto.InvalidAttacker.prototype.setAttack = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.InvalidAttacker.prototype.clearAttack = function() {
  this.setAttack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidAttacker.prototype.hasAttack = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Prompt decisionPrompt = 3;
 * @return {?proto.Prompt}
 */
proto.InvalidAttacker.prototype.getDecisionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 3));
};


/** @param {?proto.Prompt|undefined} value */
proto.InvalidAttacker.prototype.setDecisionprompt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.InvalidAttacker.prototype.clearDecisionprompt = function() {
  this.setDecisionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidAttacker.prototype.hasDecisionprompt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvalidBlocker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvalidBlocker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvalidBlocker.displayName = 'proto.InvalidBlocker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvalidBlocker.prototype.toObject = function(opt_includeInstance) {
  return proto.InvalidBlocker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvalidBlocker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidBlocker.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: (f = msg.getBlock()) && proto.Blocker.toObject(includeInstance, f),
    decisionprompt: (f = msg.getDecisionprompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvalidBlocker}
 */
proto.InvalidBlocker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvalidBlocker;
  return proto.InvalidBlocker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvalidBlocker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvalidBlocker}
 */
proto.InvalidBlocker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.Blocker;
      reader.readMessage(value,proto.Blocker.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 3:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setDecisionprompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvalidBlocker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvalidBlocker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvalidBlocker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidBlocker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Blocker.serializeBinaryToWriter
    );
  }
  f = message.getDecisionprompt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.InvalidBlocker.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.InvalidBlocker.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Blocker block = 2;
 * @return {?proto.Blocker}
 */
proto.InvalidBlocker.prototype.getBlock = function() {
  return /** @type{?proto.Blocker} */ (
    jspb.Message.getWrapperField(this, proto.Blocker, 2));
};


/** @param {?proto.Blocker|undefined} value */
proto.InvalidBlocker.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.InvalidBlocker.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidBlocker.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Prompt decisionPrompt = 3;
 * @return {?proto.Prompt}
 */
proto.InvalidBlocker.prototype.getDecisionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 3));
};


/** @param {?proto.Prompt|undefined} value */
proto.InvalidBlocker.prototype.setDecisionprompt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.InvalidBlocker.prototype.clearDecisionprompt = function() {
  this.setDecisionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidBlocker.prototype.hasDecisionprompt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvalidCombatDamageOrderAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvalidCombatDamageOrderAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvalidCombatDamageOrderAssignment.displayName = 'proto.InvalidCombatDamageOrderAssignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvalidCombatDamageOrderAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.InvalidCombatDamageOrderAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvalidCombatDamageOrderAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidCombatDamageOrderAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    order: (f = msg.getOrder()) && proto.CombatDamageOrderAssignment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvalidCombatDamageOrderAssignment}
 */
proto.InvalidCombatDamageOrderAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvalidCombatDamageOrderAssignment;
  return proto.InvalidCombatDamageOrderAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvalidCombatDamageOrderAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvalidCombatDamageOrderAssignment}
 */
proto.InvalidCombatDamageOrderAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.CombatDamageOrderAssignment;
      reader.readMessage(value,proto.CombatDamageOrderAssignment.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvalidCombatDamageOrderAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvalidCombatDamageOrderAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvalidCombatDamageOrderAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidCombatDamageOrderAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CombatDamageOrderAssignment.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.InvalidCombatDamageOrderAssignment.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.InvalidCombatDamageOrderAssignment.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CombatDamageOrderAssignment order = 2;
 * @return {?proto.CombatDamageOrderAssignment}
 */
proto.InvalidCombatDamageOrderAssignment.prototype.getOrder = function() {
  return /** @type{?proto.CombatDamageOrderAssignment} */ (
    jspb.Message.getWrapperField(this, proto.CombatDamageOrderAssignment, 2));
};


/** @param {?proto.CombatDamageOrderAssignment|undefined} value */
proto.InvalidCombatDamageOrderAssignment.prototype.setOrder = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.InvalidCombatDamageOrderAssignment.prototype.clearOrder = function() {
  this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidCombatDamageOrderAssignment.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvalidDamageAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvalidDamageAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvalidDamageAssignment.displayName = 'proto.InvalidDamageAssignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvalidDamageAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.InvalidDamageAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvalidDamageAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidDamageAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assignment: (f = msg.getAssignment()) && proto.DamageAssigner.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvalidDamageAssignment}
 */
proto.InvalidDamageAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvalidDamageAssignment;
  return proto.InvalidDamageAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvalidDamageAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvalidDamageAssignment}
 */
proto.InvalidDamageAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.DamageAssigner;
      reader.readMessage(value,proto.DamageAssigner.deserializeBinaryFromReader);
      msg.setAssignment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvalidDamageAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvalidDamageAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvalidDamageAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidDamageAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAssignment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DamageAssigner.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.InvalidDamageAssignment.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.InvalidDamageAssignment.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DamageAssigner assignment = 2;
 * @return {?proto.DamageAssigner}
 */
proto.InvalidDamageAssignment.prototype.getAssignment = function() {
  return /** @type{?proto.DamageAssigner} */ (
    jspb.Message.getWrapperField(this, proto.DamageAssigner, 2));
};


/** @param {?proto.DamageAssigner|undefined} value */
proto.InvalidDamageAssignment.prototype.setAssignment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.InvalidDamageAssignment.prototype.clearAssignment = function() {
  this.setAssignment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidDamageAssignment.prototype.hasAssignment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvalidTargetSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvalidTargetSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvalidTargetSelection.displayName = 'proto.InvalidTargetSelection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvalidTargetSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.InvalidTargetSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvalidTargetSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidTargetSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.TargetSelection.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0),
    decisionprompt: (f = msg.getDecisionprompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvalidTargetSelection}
 */
proto.InvalidTargetSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvalidTargetSelection;
  return proto.InvalidTargetSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvalidTargetSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvalidTargetSelection}
 */
proto.InvalidTargetSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TargetSelection;
      reader.readMessage(value,proto.TargetSelection.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 3:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setDecisionprompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvalidTargetSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvalidTargetSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvalidTargetSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvalidTargetSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TargetSelection.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDecisionprompt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * optional TargetSelection target = 1;
 * @return {?proto.TargetSelection}
 */
proto.InvalidTargetSelection.prototype.getTarget = function() {
  return /** @type{?proto.TargetSelection} */ (
    jspb.Message.getWrapperField(this, proto.TargetSelection, 1));
};


/** @param {?proto.TargetSelection|undefined} value */
proto.InvalidTargetSelection.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.InvalidTargetSelection.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidTargetSelection.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResultCode result = 2;
 * @return {!proto.ResultCode}
 */
proto.InvalidTargetSelection.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ResultCode} value */
proto.InvalidTargetSelection.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Prompt decisionPrompt = 3;
 * @return {?proto.Prompt}
 */
proto.InvalidTargetSelection.prototype.getDecisionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 3));
};


/** @param {?proto.Prompt|undefined} value */
proto.InvalidTargetSelection.prototype.setDecisionprompt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.InvalidTargetSelection.prototype.clearDecisionprompt = function() {
  this.setDecisionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InvalidTargetSelection.prototype.hasDecisionprompt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Inverter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Inverter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Inverter.displayName = 'proto.Inverter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Inverter.prototype.toObject = function(opt_includeInstance) {
  return proto.Inverter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Inverter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Inverter.toObject = function(includeInstance, msg) {
  var f, obj = {
    child: (f = msg.getChild()) && proto.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Inverter}
 */
proto.Inverter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Inverter;
  return proto.Inverter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Inverter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Inverter}
 */
proto.Inverter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.setChild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Inverter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Inverter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Inverter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Inverter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChild();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node child = 1;
 * @return {?proto.Node}
 */
proto.Inverter.prototype.getChild = function() {
  return /** @type{?proto.Node} */ (
    jspb.Message.getWrapperField(this, proto.Node, 1));
};


/** @param {?proto.Node|undefined} value */
proto.Inverter.prototype.setChild = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Inverter.prototype.clearChild = function() {
  this.setChild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Inverter.prototype.hasChild = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinConstructedMatchmakingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinConstructedMatchmakingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinConstructedMatchmakingRequest.displayName = 'proto.JoinConstructedMatchmakingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinConstructedMatchmakingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinConstructedMatchmakingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinConstructedMatchmakingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinConstructedMatchmakingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    matchtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numberofgames: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinConstructedMatchmakingRequest}
 */
proto.JoinConstructedMatchmakingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinConstructedMatchmakingRequest;
  return proto.JoinConstructedMatchmakingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinConstructedMatchmakingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinConstructedMatchmakingRequest}
 */
proto.JoinConstructedMatchmakingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeckid(value);
      break;
    case 1:
      var value = /** @type {!proto.ConstructedMatchType} */ (reader.readEnum());
      msg.setMatchtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberofgames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinConstructedMatchmakingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinConstructedMatchmakingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinConstructedMatchmakingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinConstructedMatchmakingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMatchtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNumberofgames();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string deckId = 3;
 * @return {string}
 */
proto.JoinConstructedMatchmakingRequest.prototype.getDeckid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.JoinConstructedMatchmakingRequest.prototype.setDeckid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ConstructedMatchType matchType = 1;
 * @return {!proto.ConstructedMatchType}
 */
proto.JoinConstructedMatchmakingRequest.prototype.getMatchtype = function() {
  return /** @type {!proto.ConstructedMatchType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ConstructedMatchType} value */
proto.JoinConstructedMatchmakingRequest.prototype.setMatchtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 numberOfGames = 2;
 * @return {number}
 */
proto.JoinConstructedMatchmakingRequest.prototype.getNumberofgames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.JoinConstructedMatchmakingRequest.prototype.setNumberofgames = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinMatchGameRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinMatchGameRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinMatchGameRoomRequest.displayName = 'proto.JoinMatchGameRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinMatchGameRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinMatchGameRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinMatchGameRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchGameRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroompassword: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinMatchGameRoomRequest}
 */
proto.JoinMatchGameRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinMatchGameRoomRequest;
  return proto.JoinMatchGameRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinMatchGameRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinMatchGameRoomRequest}
 */
proto.JoinMatchGameRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameroomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameroompassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinMatchGameRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinMatchGameRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinMatchGameRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchGameRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroompassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string gameRoomId = 1;
 * @return {string}
 */
proto.JoinMatchGameRoomRequest.prototype.getGameroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JoinMatchGameRoomRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gameRoomPassword = 2;
 * @return {string}
 */
proto.JoinMatchGameRoomRequest.prototype.getGameroompassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.JoinMatchGameRoomRequest.prototype.setGameroompassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinMatchGameRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinMatchGameRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinMatchGameRoomResponse.displayName = 'proto.JoinMatchGameRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinMatchGameRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinMatchGameRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinMatchGameRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchGameRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroominfo: (f = msg.getGameroominfo()) && proto.MatchGameRoomInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinMatchGameRoomResponse}
 */
proto.JoinMatchGameRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinMatchGameRoomResponse;
  return proto.JoinMatchGameRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinMatchGameRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinMatchGameRoomResponse}
 */
proto.JoinMatchGameRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchGameRoomInfo;
      reader.readMessage(value,proto.MatchGameRoomInfo.deserializeBinaryFromReader);
      msg.setGameroominfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinMatchGameRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinMatchGameRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinMatchGameRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchGameRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroominfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchGameRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchGameRoomInfo gameRoomInfo = 1;
 * @return {?proto.MatchGameRoomInfo}
 */
proto.JoinMatchGameRoomResponse.prototype.getGameroominfo = function() {
  return /** @type{?proto.MatchGameRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomInfo, 1));
};


/** @param {?proto.MatchGameRoomInfo|undefined} value */
proto.JoinMatchGameRoomResponse.prototype.setGameroominfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.JoinMatchGameRoomResponse.prototype.clearGameroominfo = function() {
  this.setGameroominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.JoinMatchGameRoomResponse.prototype.hasGameroominfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinMatchGameRoomResponseV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinMatchGameRoomResponseV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinMatchGameRoomResponseV2.displayName = 'proto.JoinMatchGameRoomResponseV2';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinMatchGameRoomResponseV2.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinMatchGameRoomResponseV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinMatchGameRoomResponseV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchGameRoomResponseV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinMatchGameRoomResponseV2}
 */
proto.JoinMatchGameRoomResponseV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinMatchGameRoomResponseV2;
  return proto.JoinMatchGameRoomResponseV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinMatchGameRoomResponseV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinMatchGameRoomResponseV2}
 */
proto.JoinMatchGameRoomResponseV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinMatchGameRoomResponseV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinMatchGameRoomResponseV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinMatchGameRoomResponseV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchGameRoomResponseV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 seatId = 1;
 * @return {number}
 */
proto.JoinMatchGameRoomResponseV2.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.JoinMatchGameRoomResponseV2.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinMatchmakingRequestV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinMatchmakingRequestV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinMatchmakingRequestV2.displayName = 'proto.JoinMatchmakingRequestV2';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinMatchmakingRequestV2.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinMatchmakingRequestV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinMatchmakingRequestV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchmakingRequestV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    courseid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinMatchmakingRequestV2}
 */
proto.JoinMatchmakingRequestV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinMatchmakingRequestV2;
  return proto.JoinMatchmakingRequestV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinMatchmakingRequestV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinMatchmakingRequestV2}
 */
proto.JoinMatchmakingRequestV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCourseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinMatchmakingRequestV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinMatchmakingRequestV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinMatchmakingRequestV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchmakingRequestV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCourseid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string eventId = 1;
 * @return {string}
 */
proto.JoinMatchmakingRequestV2.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JoinMatchmakingRequestV2.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string courseId = 2;
 * @return {string}
 */
proto.JoinMatchmakingRequestV2.prototype.getCourseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.JoinMatchmakingRequestV2.prototype.setCourseid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinMatchmakingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinMatchmakingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinMatchmakingResponse.displayName = 'proto.JoinMatchmakingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinMatchmakingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinMatchmakingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinMatchmakingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchmakingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinMatchmakingResponse}
 */
proto.JoinMatchmakingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinMatchmakingResponse;
  return proto.JoinMatchmakingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinMatchmakingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinMatchmakingResponse}
 */
proto.JoinMatchmakingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.JoinMatchmakingResponseCode} */ (reader.readEnum());
      msg.setResponsecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinMatchmakingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinMatchmakingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinMatchmakingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchmakingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsecode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional JoinMatchmakingResponseCode responseCode = 1;
 * @return {!proto.JoinMatchmakingResponseCode}
 */
proto.JoinMatchmakingResponse.prototype.getResponsecode = function() {
  return /** @type {!proto.JoinMatchmakingResponseCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.JoinMatchmakingResponseCode} value */
proto.JoinMatchmakingResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinMatchmakingResponseV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinMatchmakingResponseV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinMatchmakingResponseV2.displayName = 'proto.JoinMatchmakingResponseV2';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinMatchmakingResponseV2.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinMatchmakingResponseV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinMatchmakingResponseV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchmakingResponseV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinMatchmakingResponseV2}
 */
proto.JoinMatchmakingResponseV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinMatchmakingResponseV2;
  return proto.JoinMatchmakingResponseV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinMatchmakingResponseV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinMatchmakingResponseV2}
 */
proto.JoinMatchmakingResponseV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.JoinMatchmakingResponseCode} */ (reader.readEnum());
      msg.setResponsecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinMatchmakingResponseV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinMatchmakingResponseV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinMatchmakingResponseV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinMatchmakingResponseV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsecode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional JoinMatchmakingResponseCode responseCode = 1;
 * @return {!proto.JoinMatchmakingResponseCode}
 */
proto.JoinMatchmakingResponseV2.prototype.getResponsecode = function() {
  return /** @type {!proto.JoinMatchmakingResponseCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.JoinMatchmakingResponseCode} value */
proto.JoinMatchmakingResponseV2.prototype.setResponsecode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinQueueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinQueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinQueueRequest.displayName = 'proto.JoinQueueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinQueueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinQueueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinQueueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinQueueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deckid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    courseid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    matchmakingfilter: jspb.Message.getFieldWithDefault(msg, 4, ""),
    queuetype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinQueueRequest}
 */
proto.JoinQueueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinQueueRequest;
  return proto.JoinQueueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinQueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinQueueRequest}
 */
proto.JoinQueueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeckid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCourseid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchmakingfilter(value);
      break;
    case 1:
      var value = /** @type {!proto.QueueType} */ (reader.readEnum());
      msg.setQueuetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinQueueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinQueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinQueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinQueueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeckid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCourseid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMatchmakingfilter();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQueuetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.JoinQueueRequest.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.JoinQueueRequest.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string deckId = 3;
 * @return {string}
 */
proto.JoinQueueRequest.prototype.getDeckid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.JoinQueueRequest.prototype.setDeckid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string courseId = 5;
 * @return {string}
 */
proto.JoinQueueRequest.prototype.getCourseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.JoinQueueRequest.prototype.setCourseid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string matchmakingFilter = 4;
 * @return {string}
 */
proto.JoinQueueRequest.prototype.getMatchmakingfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.JoinQueueRequest.prototype.setMatchmakingfilter = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional QueueType queueType = 1;
 * @return {!proto.QueueType}
 */
proto.JoinQueueRequest.prototype.getQueuetype = function() {
  return /** @type {!proto.QueueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.QueueType} value */
proto.JoinQueueRequest.prototype.setQueuetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinQueueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinQueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinQueueResponse.displayName = 'proto.JoinQueueResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinQueueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinQueueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinQueueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinQueueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queueinfo: (f = msg.getQueueinfo()) && proto.LobbyUserQueueInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinQueueResponse}
 */
proto.JoinQueueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinQueueResponse;
  return proto.JoinQueueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinQueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinQueueResponse}
 */
proto.JoinQueueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = new proto.LobbyUserQueueInfo;
      reader.readMessage(value,proto.LobbyUserQueueInfo.deserializeBinaryFromReader);
      msg.setQueueinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinQueueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinQueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinQueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinQueueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueueinfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.LobbyUserQueueInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LobbyUserQueueInfo queueInfo = 5;
 * @return {?proto.LobbyUserQueueInfo}
 */
proto.JoinQueueResponse.prototype.getQueueinfo = function() {
  return /** @type{?proto.LobbyUserQueueInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyUserQueueInfo, 5));
};


/** @param {?proto.LobbyUserQueueInfo|undefined} value */
proto.JoinQueueResponse.prototype.setQueueinfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.JoinQueueResponse.prototype.clearQueueinfo = function() {
  this.setQueueinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.JoinQueueResponse.prototype.hasQueueinfo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KeyValuePairInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.KeyValuePairInfo.repeatedFields_, null);
};
goog.inherits(proto.KeyValuePairInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.KeyValuePairInfo.displayName = 'proto.KeyValuePairInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.KeyValuePairInfo.repeatedFields_ = [3,4,5,6,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KeyValuePairInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.KeyValuePairInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KeyValuePairInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeyValuePairInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueuint32List: jspb.Message.getRepeatedField(msg, 3),
    valueint32List: jspb.Message.getRepeatedField(msg, 4),
    valueuint64List: jspb.Message.getRepeatedField(msg, 5),
    valueint64List: jspb.Message.getRepeatedField(msg, 6),
    valueboolList: jspb.Message.getRepeatedField(msg, 7),
    valuestringList: jspb.Message.getRepeatedField(msg, 8),
    valuefloatList: jspb.Message.getRepeatedFloatingPointField(msg, 9),
    valuedoubleList: jspb.Message.getRepeatedFloatingPointField(msg, 10),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KeyValuePairInfo}
 */
proto.KeyValuePairInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KeyValuePairInfo;
  return proto.KeyValuePairInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KeyValuePairInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KeyValuePairInfo}
 */
proto.KeyValuePairInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setValueuint32List(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setValueint32List(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setValueuint64List(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setValueint64List(value);
      break;
    case 7:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setValueboolList(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addValuestring(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setValuefloatList(value);
      break;
    case 10:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setValuedoubleList(value);
      break;
    case 2:
      var value = /** @type {!proto.KeyValuePairValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KeyValuePairInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KeyValuePairInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KeyValuePairInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeyValuePairInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueuint32List();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getValueint32List();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getValueuint64List();
  if (f.length > 0) {
    writer.writePackedUint64(
      5,
      f
    );
  }
  f = message.getValueint64List();
  if (f.length > 0) {
    writer.writePackedInt64(
      6,
      f
    );
  }
  f = message.getValueboolList();
  if (f.length > 0) {
    writer.writePackedBool(
      7,
      f
    );
  }
  f = message.getValuestringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getValuefloatList();
  if (f.length > 0) {
    writer.writePackedFloat(
      9,
      f
    );
  }
  f = message.getValuedoubleList();
  if (f.length > 0) {
    writer.writePackedDouble(
      10,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.KeyValuePairInfo.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.KeyValuePairInfo.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated uint32 valueUint32 = 3;
 * @return {!Array.<number>}
 */
proto.KeyValuePairInfo.prototype.getValueuint32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.KeyValuePairInfo.prototype.setValueuint32List = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValueuint32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValueuint32List = function() {
  this.setValueuint32List([]);
};


/**
 * repeated int32 valueInt32 = 4;
 * @return {!Array.<number>}
 */
proto.KeyValuePairInfo.prototype.getValueint32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.KeyValuePairInfo.prototype.setValueint32List = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValueint32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValueint32List = function() {
  this.setValueint32List([]);
};


/**
 * repeated uint64 valueUint64 = 5;
 * @return {!Array.<number>}
 */
proto.KeyValuePairInfo.prototype.getValueuint64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.KeyValuePairInfo.prototype.setValueuint64List = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValueuint64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValueuint64List = function() {
  this.setValueuint64List([]);
};


/**
 * repeated int64 valueInt64 = 6;
 * @return {!Array.<number>}
 */
proto.KeyValuePairInfo.prototype.getValueint64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.KeyValuePairInfo.prototype.setValueint64List = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValueint64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValueint64List = function() {
  this.setValueint64List([]);
};


/**
 * repeated bool valueBool = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array.<boolean>}
 */
proto.KeyValuePairInfo.prototype.getValueboolList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<boolean>} value */
proto.KeyValuePairInfo.prototype.setValueboolList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValuebool = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValueboolList = function() {
  this.setValueboolList([]);
};


/**
 * repeated string valueString = 8;
 * @return {!Array.<string>}
 */
proto.KeyValuePairInfo.prototype.getValuestringList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<string>} value */
proto.KeyValuePairInfo.prototype.setValuestringList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValuestring = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValuestringList = function() {
  this.setValuestringList([]);
};


/**
 * repeated float valueFloat = 9;
 * @return {!Array.<number>}
 */
proto.KeyValuePairInfo.prototype.getValuefloatList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/** @param {!Array.<number>} value */
proto.KeyValuePairInfo.prototype.setValuefloatList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValuefloat = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValuefloatList = function() {
  this.setValuefloatList([]);
};


/**
 * repeated double valueDouble = 10;
 * @return {!Array.<number>}
 */
proto.KeyValuePairInfo.prototype.getValuedoubleList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/** @param {!Array.<number>} value */
proto.KeyValuePairInfo.prototype.setValuedoubleList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.KeyValuePairInfo.prototype.addValuedouble = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.KeyValuePairInfo.prototype.clearValuedoubleList = function() {
  this.setValuedoubleList([]);
};


/**
 * optional KeyValuePairValueType type = 2;
 * @return {!proto.KeyValuePairValueType}
 */
proto.KeyValuePairInfo.prototype.getType = function() {
  return /** @type {!proto.KeyValuePairValueType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.KeyValuePairValueType} value */
proto.KeyValuePairInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyDraftInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyDraftInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyDraftInfo.displayName = 'proto.LobbyDraftInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyDraftInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyDraftInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyDraftInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyDraftInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    draftid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    draftstartedtimestamp: jspb.Message.getFieldWithDefault(msg, 20, 0),
    draftcompletedtimestamp: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyDraftInfo}
 */
proto.LobbyDraftInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyDraftInfo;
  return proto.LobbyDraftInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyDraftInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyDraftInfo}
 */
proto.LobbyDraftInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDraftid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDraftstartedtimestamp(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDraftcompletedtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyDraftInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyDraftInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyDraftInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyDraftInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDraftid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDraftstartedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = message.getDraftcompletedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.LobbyDraftInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LobbyDraftInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.LobbyDraftInfo.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LobbyDraftInfo.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string draftId = 3;
 * @return {string}
 */
proto.LobbyDraftInfo.prototype.getDraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LobbyDraftInfo.prototype.setDraftid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 draftStartedTimestamp = 20;
 * @return {number}
 */
proto.LobbyDraftInfo.prototype.getDraftstartedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.LobbyDraftInfo.prototype.setDraftstartedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int64 draftCompletedTimestamp = 21;
 * @return {number}
 */
proto.LobbyDraftInfo.prototype.getDraftcompletedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.LobbyDraftInfo.prototype.setDraftcompletedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyError.displayName = 'proto.LobbyError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyError.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lobbyerrorcode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyError}
 */
proto.LobbyError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyError;
  return proto.LobbyError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyError}
 */
proto.LobbyError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 2:
      var value = /** @type {!proto.LobbyErrorCode} */ (reader.readEnum());
      msg.setLobbyerrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLobbyerrorcode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.LobbyError.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LobbyError.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional LobbyErrorCode lobbyErrorCode = 2;
 * @return {!proto.LobbyErrorCode}
 */
proto.LobbyError.prototype.getLobbyerrorcode = function() {
  return /** @type {!proto.LobbyErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.LobbyErrorCode} value */
proto.LobbyError.prototype.setLobbyerrorcode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyMatchCompletedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyMatchCompletedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyMatchCompletedEvent.displayName = 'proto.LobbyMatchCompletedEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyMatchCompletedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyMatchCompletedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyMatchCompletedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchCompletedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchinfo: (f = msg.getMatchinfo()) && proto.LobbyMatchInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyMatchCompletedEvent}
 */
proto.LobbyMatchCompletedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyMatchCompletedEvent;
  return proto.LobbyMatchCompletedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyMatchCompletedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyMatchCompletedEvent}
 */
proto.LobbyMatchCompletedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LobbyMatchInfo;
      reader.readMessage(value,proto.LobbyMatchInfo.deserializeBinaryFromReader);
      msg.setMatchinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyMatchCompletedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyMatchCompletedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyMatchCompletedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchCompletedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LobbyMatchInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LobbyMatchInfo matchInfo = 1;
 * @return {?proto.LobbyMatchInfo}
 */
proto.LobbyMatchCompletedEvent.prototype.getMatchinfo = function() {
  return /** @type{?proto.LobbyMatchInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyMatchInfo, 1));
};


/** @param {?proto.LobbyMatchInfo|undefined} value */
proto.LobbyMatchCompletedEvent.prototype.setMatchinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LobbyMatchCompletedEvent.prototype.clearMatchinfo = function() {
  this.setMatchinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyMatchCompletedEvent.prototype.hasMatchinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyMatchConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LobbyMatchConfig.repeatedFields_, null);
};
goog.inherits(proto.LobbyMatchConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyMatchConfig.displayName = 'proto.LobbyMatchConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LobbyMatchConfig.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyMatchConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyMatchConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyMatchConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    matchgatewayurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mcfabricuri: jspb.Message.getFieldWithDefault(msg, 4, ""),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.LobbyMatchPlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyMatchConfig}
 */
proto.LobbyMatchConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyMatchConfig;
  return proto.LobbyMatchConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyMatchConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyMatchConfig}
 */
proto.LobbyMatchConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchgatewayurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcfabricuri(value);
      break;
    case 10:
      var value = new proto.LobbyMatchPlayerInfo;
      reader.readMessage(value,proto.LobbyMatchPlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyMatchConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyMatchConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyMatchConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMatchgatewayurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMcfabricuri();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.LobbyMatchPlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string matchId = 1;
 * @return {string}
 */
proto.LobbyMatchConfig.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LobbyMatchConfig.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.LobbyMatchConfig.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LobbyMatchConfig.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string matchGatewayUrl = 3;
 * @return {string}
 */
proto.LobbyMatchConfig.prototype.getMatchgatewayurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LobbyMatchConfig.prototype.setMatchgatewayurl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string mcFabricUri = 4;
 * @return {string}
 */
proto.LobbyMatchConfig.prototype.getMcfabricuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.LobbyMatchConfig.prototype.setMcfabricuri = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated LobbyMatchPlayerInfo players = 10;
 * @return {!Array.<!proto.LobbyMatchPlayerInfo>}
 */
proto.LobbyMatchConfig.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.LobbyMatchPlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LobbyMatchPlayerInfo, 10));
};


/** @param {!Array.<!proto.LobbyMatchPlayerInfo>} value */
proto.LobbyMatchConfig.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.LobbyMatchPlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LobbyMatchPlayerInfo}
 */
proto.LobbyMatchConfig.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.LobbyMatchPlayerInfo, opt_index);
};


proto.LobbyMatchConfig.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyMatchCreatePendingEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyMatchCreatePendingEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyMatchCreatePendingEvent.displayName = 'proto.LobbyMatchCreatePendingEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyMatchCreatePendingEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyMatchCreatePendingEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyMatchCreatePendingEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchCreatePendingEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchcreatependingtimestamp: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyMatchCreatePendingEvent}
 */
proto.LobbyMatchCreatePendingEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyMatchCreatePendingEvent;
  return proto.LobbyMatchCreatePendingEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyMatchCreatePendingEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyMatchCreatePendingEvent}
 */
proto.LobbyMatchCreatePendingEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchcreatependingtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyMatchCreatePendingEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyMatchCreatePendingEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyMatchCreatePendingEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchCreatePendingEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchcreatependingtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional int64 matchCreatePendingTimestamp = 10;
 * @return {number}
 */
proto.LobbyMatchCreatePendingEvent.prototype.getMatchcreatependingtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.LobbyMatchCreatePendingEvent.prototype.setMatchcreatependingtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyMatchCreatedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyMatchCreatedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyMatchCreatedEvent.displayName = 'proto.LobbyMatchCreatedEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyMatchCreatedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyMatchCreatedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyMatchCreatedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchCreatedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchconfig: (f = msg.getMatchconfig()) && proto.LobbyMatchConfig.toObject(includeInstance, f),
    matchcreatedtimestamp: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyMatchCreatedEvent}
 */
proto.LobbyMatchCreatedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyMatchCreatedEvent;
  return proto.LobbyMatchCreatedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyMatchCreatedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyMatchCreatedEvent}
 */
proto.LobbyMatchCreatedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LobbyMatchConfig;
      reader.readMessage(value,proto.LobbyMatchConfig.deserializeBinaryFromReader);
      msg.setMatchconfig(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchcreatedtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyMatchCreatedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyMatchCreatedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyMatchCreatedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchCreatedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LobbyMatchConfig.serializeBinaryToWriter
    );
  }
  f = message.getMatchcreatedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional LobbyMatchConfig matchConfig = 1;
 * @return {?proto.LobbyMatchConfig}
 */
proto.LobbyMatchCreatedEvent.prototype.getMatchconfig = function() {
  return /** @type{?proto.LobbyMatchConfig} */ (
    jspb.Message.getWrapperField(this, proto.LobbyMatchConfig, 1));
};


/** @param {?proto.LobbyMatchConfig|undefined} value */
proto.LobbyMatchCreatedEvent.prototype.setMatchconfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LobbyMatchCreatedEvent.prototype.clearMatchconfig = function() {
  this.setMatchconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyMatchCreatedEvent.prototype.hasMatchconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 matchCreatedTimestamp = 10;
 * @return {number}
 */
proto.LobbyMatchCreatedEvent.prototype.getMatchcreatedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.LobbyMatchCreatedEvent.prototype.setMatchcreatedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyMatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyMatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyMatchInfo.displayName = 'proto.LobbyMatchInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyMatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyMatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyMatchInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.LobbyMatchConfig.toObject(includeInstance, f),
    matchgameroominfo: (f = msg.getMatchgameroominfo()) && proto.MatchGameRoomInfo.toObject(includeInstance, f),
    matchcreatedtimestamp: jspb.Message.getFieldWithDefault(msg, 10, 0),
    matchstartedtimestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    matchcompletedtimestamp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    matchresultssavedtimestamp: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyMatchInfo}
 */
proto.LobbyMatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyMatchInfo;
  return proto.LobbyMatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyMatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyMatchInfo}
 */
proto.LobbyMatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LobbyMatchConfig;
      reader.readMessage(value,proto.LobbyMatchConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.MatchGameRoomInfo;
      reader.readMessage(value,proto.MatchGameRoomInfo.deserializeBinaryFromReader);
      msg.setMatchgameroominfo(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchcreatedtimestamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchstartedtimestamp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchcompletedtimestamp(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchresultssavedtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyMatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyMatchInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyMatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LobbyMatchConfig.serializeBinaryToWriter
    );
  }
  f = message.getMatchgameroominfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MatchGameRoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getMatchcreatedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getMatchstartedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getMatchcompletedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getMatchresultssavedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
};


/**
 * optional LobbyMatchConfig config = 1;
 * @return {?proto.LobbyMatchConfig}
 */
proto.LobbyMatchInfo.prototype.getConfig = function() {
  return /** @type{?proto.LobbyMatchConfig} */ (
    jspb.Message.getWrapperField(this, proto.LobbyMatchConfig, 1));
};


/** @param {?proto.LobbyMatchConfig|undefined} value */
proto.LobbyMatchInfo.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LobbyMatchInfo.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyMatchInfo.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchGameRoomInfo matchGameRoomInfo = 2;
 * @return {?proto.MatchGameRoomInfo}
 */
proto.LobbyMatchInfo.prototype.getMatchgameroominfo = function() {
  return /** @type{?proto.MatchGameRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomInfo, 2));
};


/** @param {?proto.MatchGameRoomInfo|undefined} value */
proto.LobbyMatchInfo.prototype.setMatchgameroominfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LobbyMatchInfo.prototype.clearMatchgameroominfo = function() {
  this.setMatchgameroominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyMatchInfo.prototype.hasMatchgameroominfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 matchCreatedTimestamp = 10;
 * @return {number}
 */
proto.LobbyMatchInfo.prototype.getMatchcreatedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.LobbyMatchInfo.prototype.setMatchcreatedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 matchStartedTimestamp = 11;
 * @return {number}
 */
proto.LobbyMatchInfo.prototype.getMatchstartedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.LobbyMatchInfo.prototype.setMatchstartedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 matchCompletedTimestamp = 12;
 * @return {number}
 */
proto.LobbyMatchInfo.prototype.getMatchcompletedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.LobbyMatchInfo.prototype.setMatchcompletedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 matchResultsSavedTimestamp = 13;
 * @return {number}
 */
proto.LobbyMatchInfo.prototype.getMatchresultssavedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.LobbyMatchInfo.prototype.setMatchresultssavedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyMatchPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyMatchPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyMatchPlayerInfo.displayName = 'proto.LobbyMatchPlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyMatchPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyMatchPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyMatchPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    iswotc: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyMatchPlayerInfo}
 */
proto.LobbyMatchPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyMatchPlayerInfo;
  return proto.LobbyMatchPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyMatchPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyMatchPlayerInfo}
 */
proto.LobbyMatchPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSystemseatid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswotc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyMatchPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyMatchPlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyMatchPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyMatchPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIswotc();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.LobbyMatchPlayerInfo.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LobbyMatchPlayerInfo.prototype.setPlayername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 systemSeatId = 2;
 * @return {number}
 */
proto.LobbyMatchPlayerInfo.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LobbyMatchPlayerInfo.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 teamId = 3;
 * @return {number}
 */
proto.LobbyMatchPlayerInfo.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LobbyMatchPlayerInfo.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isWotc = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LobbyMatchPlayerInfo.prototype.getIswotc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.LobbyMatchPlayerInfo.prototype.setIswotc = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyServiceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyServiceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyServiceInfo.displayName = 'proto.LobbyServiceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyServiceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyServiceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyServiceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyServiceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    servicefabricserviceinfo: (f = msg.getServicefabricserviceinfo()) && proto.ServiceFabricServiceInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyServiceInfo}
 */
proto.LobbyServiceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyServiceInfo;
  return proto.LobbyServiceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyServiceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyServiceInfo}
 */
proto.LobbyServiceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentid(value);
      break;
    case 1:
      var value = new proto.ServiceFabricServiceInfo;
      reader.readMessage(value,proto.ServiceFabricServiceInfo.deserializeBinaryFromReader);
      msg.setServicefabricserviceinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyServiceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyServiceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyServiceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyServiceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServicefabricserviceinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ServiceFabricServiceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string environmentId = 2;
 * @return {string}
 */
proto.LobbyServiceInfo.prototype.getEnvironmentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LobbyServiceInfo.prototype.setEnvironmentid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ServiceFabricServiceInfo serviceFabricServiceInfo = 1;
 * @return {?proto.ServiceFabricServiceInfo}
 */
proto.LobbyServiceInfo.prototype.getServicefabricserviceinfo = function() {
  return /** @type{?proto.ServiceFabricServiceInfo} */ (
    jspb.Message.getWrapperField(this, proto.ServiceFabricServiceInfo, 1));
};


/** @param {?proto.ServiceFabricServiceInfo|undefined} value */
proto.LobbyServiceInfo.prototype.setServicefabricserviceinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LobbyServiceInfo.prototype.clearServicefabricserviceinfo = function() {
  this.setServicefabricserviceinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyServiceInfo.prototype.hasServicefabricserviceinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyToClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.LobbyToClientMessage.oneofGroups_);
};
goog.inherits(proto.LobbyToClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyToClientMessage.displayName = 'proto.LobbyToClientMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.LobbyToClientMessage.oneofGroups_ = [[100,101,110,111,112,200,201,202,203,204,205,206,400,500,501,502,1000]];

/**
 * @enum {number}
 */
proto.LobbyToClientMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  AUTHENTICATERESPONSE: 100,
  SERVICEINFORESPONSE: 101,
  GETUSERIDSRESPONSE: 110,
  GETUSERINFORESPONSE: 111,
  CLEARLOBBYUSERSTATUSRESPONSE: 112,
  JOINQUEUERESPONSE: 200,
  DROPQUEUERESPONSE: 201,
  DELETEQUEUERESPONSE: 202,
  JOINMATCHMAKINGRESPONSEV2: 203,
  DROPMATCHMAKINGRESPONSEV2: 204,
  JOINMATCHMAKINGRESPONSE: 205,
  DROPMATCHMAKINGRESPONSE: 206,
  CLIENTTOMATCHSERVICEMESSAGE: 400,
  MATCHCREATEDEVENT: 500,
  MATCHCOMPLETEDEVENT: 501,
  MATCHCREATEPENDINGEVENT: 502,
  ECHORESPONSE: 1000
};

/**
 * @return {proto.LobbyToClientMessage.MessageCase}
 */
proto.LobbyToClientMessage.prototype.getMessageCase = function() {
  return /** @type {proto.LobbyToClientMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.LobbyToClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyToClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyToClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyToClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyToClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.LobbyError.toObject(includeInstance, f),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    correlationinfo: (f = msg.getCorrelationinfo()) && proto.CorrelationInfo.toObject(includeInstance, f),
    authenticateresponse: (f = msg.getAuthenticateresponse()) && proto.AuthenticateResponse.toObject(includeInstance, f),
    serviceinforesponse: (f = msg.getServiceinforesponse()) && proto.LobbyServiceInfo.toObject(includeInstance, f),
    getuseridsresponse: (f = msg.getGetuseridsresponse()) && proto.GetLobbyUserIdsResponse.toObject(includeInstance, f),
    getuserinforesponse: (f = msg.getGetuserinforesponse()) && proto.GetLobbyUserInfoResponse.toObject(includeInstance, f),
    clearlobbyuserstatusresponse: (f = msg.getClearlobbyuserstatusresponse()) && proto.ClearLobbyUserStatusResponse.toObject(includeInstance, f),
    joinqueueresponse: (f = msg.getJoinqueueresponse()) && proto.JoinQueueResponse.toObject(includeInstance, f),
    dropqueueresponse: (f = msg.getDropqueueresponse()) && proto.DropQueueResponse.toObject(includeInstance, f),
    deletequeueresponse: (f = msg.getDeletequeueresponse()) && proto.DeleteQueueResponse.toObject(includeInstance, f),
    joinmatchmakingresponsev2: (f = msg.getJoinmatchmakingresponsev2()) && proto.JoinMatchmakingResponseV2.toObject(includeInstance, f),
    dropmatchmakingresponsev2: (f = msg.getDropmatchmakingresponsev2()) && proto.DropMatchmakingResponseV2.toObject(includeInstance, f),
    joinmatchmakingresponse: (f = msg.getJoinmatchmakingresponse()) && proto.JoinMatchmakingResponse.toObject(includeInstance, f),
    dropmatchmakingresponse: (f = msg.getDropmatchmakingresponse()) && proto.DropMatchmakingResponse.toObject(includeInstance, f),
    clienttomatchservicemessage: (f = msg.getClienttomatchservicemessage()) && proto.ClientToMatchServiceMessage.toObject(includeInstance, f),
    matchcreatedevent: (f = msg.getMatchcreatedevent()) && proto.LobbyMatchCreatedEvent.toObject(includeInstance, f),
    matchcompletedevent: (f = msg.getMatchcompletedevent()) && proto.LobbyMatchCompletedEvent.toObject(includeInstance, f),
    matchcreatependingevent: (f = msg.getMatchcreatependingevent()) && proto.LobbyMatchCreatePendingEvent.toObject(includeInstance, f),
    echoresponse: (f = msg.getEchoresponse()) && proto.EchoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyToClientMessage}
 */
proto.LobbyToClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyToClientMessage;
  return proto.LobbyToClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyToClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyToClientMessage}
 */
proto.LobbyToClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.LobbyError;
      reader.readMessage(value,proto.LobbyError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = new proto.CorrelationInfo;
      reader.readMessage(value,proto.CorrelationInfo.deserializeBinaryFromReader);
      msg.setCorrelationinfo(value);
      break;
    case 100:
      var value = new proto.AuthenticateResponse;
      reader.readMessage(value,proto.AuthenticateResponse.deserializeBinaryFromReader);
      msg.setAuthenticateresponse(value);
      break;
    case 101:
      var value = new proto.LobbyServiceInfo;
      reader.readMessage(value,proto.LobbyServiceInfo.deserializeBinaryFromReader);
      msg.setServiceinforesponse(value);
      break;
    case 110:
      var value = new proto.GetLobbyUserIdsResponse;
      reader.readMessage(value,proto.GetLobbyUserIdsResponse.deserializeBinaryFromReader);
      msg.setGetuseridsresponse(value);
      break;
    case 111:
      var value = new proto.GetLobbyUserInfoResponse;
      reader.readMessage(value,proto.GetLobbyUserInfoResponse.deserializeBinaryFromReader);
      msg.setGetuserinforesponse(value);
      break;
    case 112:
      var value = new proto.ClearLobbyUserStatusResponse;
      reader.readMessage(value,proto.ClearLobbyUserStatusResponse.deserializeBinaryFromReader);
      msg.setClearlobbyuserstatusresponse(value);
      break;
    case 200:
      var value = new proto.JoinQueueResponse;
      reader.readMessage(value,proto.JoinQueueResponse.deserializeBinaryFromReader);
      msg.setJoinqueueresponse(value);
      break;
    case 201:
      var value = new proto.DropQueueResponse;
      reader.readMessage(value,proto.DropQueueResponse.deserializeBinaryFromReader);
      msg.setDropqueueresponse(value);
      break;
    case 202:
      var value = new proto.DeleteQueueResponse;
      reader.readMessage(value,proto.DeleteQueueResponse.deserializeBinaryFromReader);
      msg.setDeletequeueresponse(value);
      break;
    case 203:
      var value = new proto.JoinMatchmakingResponseV2;
      reader.readMessage(value,proto.JoinMatchmakingResponseV2.deserializeBinaryFromReader);
      msg.setJoinmatchmakingresponsev2(value);
      break;
    case 204:
      var value = new proto.DropMatchmakingResponseV2;
      reader.readMessage(value,proto.DropMatchmakingResponseV2.deserializeBinaryFromReader);
      msg.setDropmatchmakingresponsev2(value);
      break;
    case 205:
      var value = new proto.JoinMatchmakingResponse;
      reader.readMessage(value,proto.JoinMatchmakingResponse.deserializeBinaryFromReader);
      msg.setJoinmatchmakingresponse(value);
      break;
    case 206:
      var value = new proto.DropMatchmakingResponse;
      reader.readMessage(value,proto.DropMatchmakingResponse.deserializeBinaryFromReader);
      msg.setDropmatchmakingresponse(value);
      break;
    case 400:
      var value = new proto.ClientToMatchServiceMessage;
      reader.readMessage(value,proto.ClientToMatchServiceMessage.deserializeBinaryFromReader);
      msg.setClienttomatchservicemessage(value);
      break;
    case 500:
      var value = new proto.LobbyMatchCreatedEvent;
      reader.readMessage(value,proto.LobbyMatchCreatedEvent.deserializeBinaryFromReader);
      msg.setMatchcreatedevent(value);
      break;
    case 501:
      var value = new proto.LobbyMatchCompletedEvent;
      reader.readMessage(value,proto.LobbyMatchCompletedEvent.deserializeBinaryFromReader);
      msg.setMatchcompletedevent(value);
      break;
    case 502:
      var value = new proto.LobbyMatchCreatePendingEvent;
      reader.readMessage(value,proto.LobbyMatchCreatePendingEvent.deserializeBinaryFromReader);
      msg.setMatchcreatependingevent(value);
      break;
    case 1000:
      var value = new proto.EchoResponse;
      reader.readMessage(value,proto.EchoResponse.deserializeBinaryFromReader);
      msg.setEchoresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyToClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyToClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyToClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyToClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LobbyError.serializeBinaryToWriter
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCorrelationinfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.CorrelationInfo.serializeBinaryToWriter
    );
  }
  f = message.getAuthenticateresponse();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.AuthenticateResponse.serializeBinaryToWriter
    );
  }
  f = message.getServiceinforesponse();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.LobbyServiceInfo.serializeBinaryToWriter
    );
  }
  f = message.getGetuseridsresponse();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.GetLobbyUserIdsResponse.serializeBinaryToWriter
    );
  }
  f = message.getGetuserinforesponse();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.GetLobbyUserInfoResponse.serializeBinaryToWriter
    );
  }
  f = message.getClearlobbyuserstatusresponse();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.ClearLobbyUserStatusResponse.serializeBinaryToWriter
    );
  }
  f = message.getJoinqueueresponse();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.JoinQueueResponse.serializeBinaryToWriter
    );
  }
  f = message.getDropqueueresponse();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.DropQueueResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeletequeueresponse();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.DeleteQueueResponse.serializeBinaryToWriter
    );
  }
  f = message.getJoinmatchmakingresponsev2();
  if (f != null) {
    writer.writeMessage(
      203,
      f,
      proto.JoinMatchmakingResponseV2.serializeBinaryToWriter
    );
  }
  f = message.getDropmatchmakingresponsev2();
  if (f != null) {
    writer.writeMessage(
      204,
      f,
      proto.DropMatchmakingResponseV2.serializeBinaryToWriter
    );
  }
  f = message.getJoinmatchmakingresponse();
  if (f != null) {
    writer.writeMessage(
      205,
      f,
      proto.JoinMatchmakingResponse.serializeBinaryToWriter
    );
  }
  f = message.getDropmatchmakingresponse();
  if (f != null) {
    writer.writeMessage(
      206,
      f,
      proto.DropMatchmakingResponse.serializeBinaryToWriter
    );
  }
  f = message.getClienttomatchservicemessage();
  if (f != null) {
    writer.writeMessage(
      400,
      f,
      proto.ClientToMatchServiceMessage.serializeBinaryToWriter
    );
  }
  f = message.getMatchcreatedevent();
  if (f != null) {
    writer.writeMessage(
      500,
      f,
      proto.LobbyMatchCreatedEvent.serializeBinaryToWriter
    );
  }
  f = message.getMatchcompletedevent();
  if (f != null) {
    writer.writeMessage(
      501,
      f,
      proto.LobbyMatchCompletedEvent.serializeBinaryToWriter
    );
  }
  f = message.getMatchcreatependingevent();
  if (f != null) {
    writer.writeMessage(
      502,
      f,
      proto.LobbyMatchCreatePendingEvent.serializeBinaryToWriter
    );
  }
  f = message.getEchoresponse();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.EchoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional LobbyError error = 2;
 * @return {?proto.LobbyError}
 */
proto.LobbyToClientMessage.prototype.getError = function() {
  return /** @type{?proto.LobbyError} */ (
    jspb.Message.getWrapperField(this, proto.LobbyError, 2));
};


/** @param {?proto.LobbyError|undefined} value */
proto.LobbyToClientMessage.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LobbyToClientMessage.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 requestId = 3;
 * @return {number}
 */
proto.LobbyToClientMessage.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LobbyToClientMessage.prototype.setRequestid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.LobbyToClientMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.LobbyToClientMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional CorrelationInfo correlationInfo = 5;
 * @return {?proto.CorrelationInfo}
 */
proto.LobbyToClientMessage.prototype.getCorrelationinfo = function() {
  return /** @type{?proto.CorrelationInfo} */ (
    jspb.Message.getWrapperField(this, proto.CorrelationInfo, 5));
};


/** @param {?proto.CorrelationInfo|undefined} value */
proto.LobbyToClientMessage.prototype.setCorrelationinfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.LobbyToClientMessage.prototype.clearCorrelationinfo = function() {
  this.setCorrelationinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasCorrelationinfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AuthenticateResponse authenticateResponse = 100;
 * @return {?proto.AuthenticateResponse}
 */
proto.LobbyToClientMessage.prototype.getAuthenticateresponse = function() {
  return /** @type{?proto.AuthenticateResponse} */ (
    jspb.Message.getWrapperField(this, proto.AuthenticateResponse, 100));
};


/** @param {?proto.AuthenticateResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setAuthenticateresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearAuthenticateresponse = function() {
  this.setAuthenticateresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasAuthenticateresponse = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional LobbyServiceInfo serviceInfoResponse = 101;
 * @return {?proto.LobbyServiceInfo}
 */
proto.LobbyToClientMessage.prototype.getServiceinforesponse = function() {
  return /** @type{?proto.LobbyServiceInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyServiceInfo, 101));
};


/** @param {?proto.LobbyServiceInfo|undefined} value */
proto.LobbyToClientMessage.prototype.setServiceinforesponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearServiceinforesponse = function() {
  this.setServiceinforesponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasServiceinforesponse = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional GetLobbyUserIdsResponse getUserIdsResponse = 110;
 * @return {?proto.GetLobbyUserIdsResponse}
 */
proto.LobbyToClientMessage.prototype.getGetuseridsresponse = function() {
  return /** @type{?proto.GetLobbyUserIdsResponse} */ (
    jspb.Message.getWrapperField(this, proto.GetLobbyUserIdsResponse, 110));
};


/** @param {?proto.GetLobbyUserIdsResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setGetuseridsresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 110, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearGetuseridsresponse = function() {
  this.setGetuseridsresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasGetuseridsresponse = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional GetLobbyUserInfoResponse getUserInfoResponse = 111;
 * @return {?proto.GetLobbyUserInfoResponse}
 */
proto.LobbyToClientMessage.prototype.getGetuserinforesponse = function() {
  return /** @type{?proto.GetLobbyUserInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.GetLobbyUserInfoResponse, 111));
};


/** @param {?proto.GetLobbyUserInfoResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setGetuserinforesponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 111, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearGetuserinforesponse = function() {
  this.setGetuserinforesponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasGetuserinforesponse = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional ClearLobbyUserStatusResponse clearLobbyUserStatusResponse = 112;
 * @return {?proto.ClearLobbyUserStatusResponse}
 */
proto.LobbyToClientMessage.prototype.getClearlobbyuserstatusresponse = function() {
  return /** @type{?proto.ClearLobbyUserStatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.ClearLobbyUserStatusResponse, 112));
};


/** @param {?proto.ClearLobbyUserStatusResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setClearlobbyuserstatusresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 112, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearClearlobbyuserstatusresponse = function() {
  this.setClearlobbyuserstatusresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasClearlobbyuserstatusresponse = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional JoinQueueResponse joinQueueResponse = 200;
 * @return {?proto.JoinQueueResponse}
 */
proto.LobbyToClientMessage.prototype.getJoinqueueresponse = function() {
  return /** @type{?proto.JoinQueueResponse} */ (
    jspb.Message.getWrapperField(this, proto.JoinQueueResponse, 200));
};


/** @param {?proto.JoinQueueResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setJoinqueueresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 200, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearJoinqueueresponse = function() {
  this.setJoinqueueresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasJoinqueueresponse = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional DropQueueResponse dropQueueResponse = 201;
 * @return {?proto.DropQueueResponse}
 */
proto.LobbyToClientMessage.prototype.getDropqueueresponse = function() {
  return /** @type{?proto.DropQueueResponse} */ (
    jspb.Message.getWrapperField(this, proto.DropQueueResponse, 201));
};


/** @param {?proto.DropQueueResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setDropqueueresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearDropqueueresponse = function() {
  this.setDropqueueresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasDropqueueresponse = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional DeleteQueueResponse deleteQueueResponse = 202;
 * @return {?proto.DeleteQueueResponse}
 */
proto.LobbyToClientMessage.prototype.getDeletequeueresponse = function() {
  return /** @type{?proto.DeleteQueueResponse} */ (
    jspb.Message.getWrapperField(this, proto.DeleteQueueResponse, 202));
};


/** @param {?proto.DeleteQueueResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setDeletequeueresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 202, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearDeletequeueresponse = function() {
  this.setDeletequeueresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasDeletequeueresponse = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional JoinMatchmakingResponseV2 joinMatchmakingResponseV2 = 203;
 * @return {?proto.JoinMatchmakingResponseV2}
 */
proto.LobbyToClientMessage.prototype.getJoinmatchmakingresponsev2 = function() {
  return /** @type{?proto.JoinMatchmakingResponseV2} */ (
    jspb.Message.getWrapperField(this, proto.JoinMatchmakingResponseV2, 203));
};


/** @param {?proto.JoinMatchmakingResponseV2|undefined} value */
proto.LobbyToClientMessage.prototype.setJoinmatchmakingresponsev2 = function(value) {
  jspb.Message.setOneofWrapperField(this, 203, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearJoinmatchmakingresponsev2 = function() {
  this.setJoinmatchmakingresponsev2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasJoinmatchmakingresponsev2 = function() {
  return jspb.Message.getField(this, 203) != null;
};


/**
 * optional DropMatchmakingResponseV2 dropMatchmakingResponseV2 = 204;
 * @return {?proto.DropMatchmakingResponseV2}
 */
proto.LobbyToClientMessage.prototype.getDropmatchmakingresponsev2 = function() {
  return /** @type{?proto.DropMatchmakingResponseV2} */ (
    jspb.Message.getWrapperField(this, proto.DropMatchmakingResponseV2, 204));
};


/** @param {?proto.DropMatchmakingResponseV2|undefined} value */
proto.LobbyToClientMessage.prototype.setDropmatchmakingresponsev2 = function(value) {
  jspb.Message.setOneofWrapperField(this, 204, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearDropmatchmakingresponsev2 = function() {
  this.setDropmatchmakingresponsev2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasDropmatchmakingresponsev2 = function() {
  return jspb.Message.getField(this, 204) != null;
};


/**
 * optional JoinMatchmakingResponse joinMatchmakingResponse = 205;
 * @return {?proto.JoinMatchmakingResponse}
 */
proto.LobbyToClientMessage.prototype.getJoinmatchmakingresponse = function() {
  return /** @type{?proto.JoinMatchmakingResponse} */ (
    jspb.Message.getWrapperField(this, proto.JoinMatchmakingResponse, 205));
};


/** @param {?proto.JoinMatchmakingResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setJoinmatchmakingresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 205, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearJoinmatchmakingresponse = function() {
  this.setJoinmatchmakingresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasJoinmatchmakingresponse = function() {
  return jspb.Message.getField(this, 205) != null;
};


/**
 * optional DropMatchmakingResponse dropMatchmakingResponse = 206;
 * @return {?proto.DropMatchmakingResponse}
 */
proto.LobbyToClientMessage.prototype.getDropmatchmakingresponse = function() {
  return /** @type{?proto.DropMatchmakingResponse} */ (
    jspb.Message.getWrapperField(this, proto.DropMatchmakingResponse, 206));
};


/** @param {?proto.DropMatchmakingResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setDropmatchmakingresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 206, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearDropmatchmakingresponse = function() {
  this.setDropmatchmakingresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasDropmatchmakingresponse = function() {
  return jspb.Message.getField(this, 206) != null;
};


/**
 * optional ClientToMatchServiceMessage clientToMatchServiceMessage = 400;
 * @return {?proto.ClientToMatchServiceMessage}
 */
proto.LobbyToClientMessage.prototype.getClienttomatchservicemessage = function() {
  return /** @type{?proto.ClientToMatchServiceMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToMatchServiceMessage, 400));
};


/** @param {?proto.ClientToMatchServiceMessage|undefined} value */
proto.LobbyToClientMessage.prototype.setClienttomatchservicemessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 400, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearClienttomatchservicemessage = function() {
  this.setClienttomatchservicemessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasClienttomatchservicemessage = function() {
  return jspb.Message.getField(this, 400) != null;
};


/**
 * optional LobbyMatchCreatedEvent matchCreatedEvent = 500;
 * @return {?proto.LobbyMatchCreatedEvent}
 */
proto.LobbyToClientMessage.prototype.getMatchcreatedevent = function() {
  return /** @type{?proto.LobbyMatchCreatedEvent} */ (
    jspb.Message.getWrapperField(this, proto.LobbyMatchCreatedEvent, 500));
};


/** @param {?proto.LobbyMatchCreatedEvent|undefined} value */
proto.LobbyToClientMessage.prototype.setMatchcreatedevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 500, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearMatchcreatedevent = function() {
  this.setMatchcreatedevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasMatchcreatedevent = function() {
  return jspb.Message.getField(this, 500) != null;
};


/**
 * optional LobbyMatchCompletedEvent matchCompletedEvent = 501;
 * @return {?proto.LobbyMatchCompletedEvent}
 */
proto.LobbyToClientMessage.prototype.getMatchcompletedevent = function() {
  return /** @type{?proto.LobbyMatchCompletedEvent} */ (
    jspb.Message.getWrapperField(this, proto.LobbyMatchCompletedEvent, 501));
};


/** @param {?proto.LobbyMatchCompletedEvent|undefined} value */
proto.LobbyToClientMessage.prototype.setMatchcompletedevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 501, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearMatchcompletedevent = function() {
  this.setMatchcompletedevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasMatchcompletedevent = function() {
  return jspb.Message.getField(this, 501) != null;
};


/**
 * optional LobbyMatchCreatePendingEvent matchCreatePendingEvent = 502;
 * @return {?proto.LobbyMatchCreatePendingEvent}
 */
proto.LobbyToClientMessage.prototype.getMatchcreatependingevent = function() {
  return /** @type{?proto.LobbyMatchCreatePendingEvent} */ (
    jspb.Message.getWrapperField(this, proto.LobbyMatchCreatePendingEvent, 502));
};


/** @param {?proto.LobbyMatchCreatePendingEvent|undefined} value */
proto.LobbyToClientMessage.prototype.setMatchcreatependingevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 502, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearMatchcreatependingevent = function() {
  this.setMatchcreatependingevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasMatchcreatependingevent = function() {
  return jspb.Message.getField(this, 502) != null;
};


/**
 * optional EchoResponse echoResponse = 1000;
 * @return {?proto.EchoResponse}
 */
proto.LobbyToClientMessage.prototype.getEchoresponse = function() {
  return /** @type{?proto.EchoResponse} */ (
    jspb.Message.getWrapperField(this, proto.EchoResponse, 1000));
};


/** @param {?proto.EchoResponse|undefined} value */
proto.LobbyToClientMessage.prototype.setEchoresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1000, proto.LobbyToClientMessage.oneofGroups_[0], value);
};


proto.LobbyToClientMessage.prototype.clearEchoresponse = function() {
  this.setEchoresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyToClientMessage.prototype.hasEchoresponse = function() {
  return jspb.Message.getField(this, 1000) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyUserInfo.displayName = 'proto.LobbyUserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    statetype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stateupdatedtimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userconnectioninfo: (f = msg.getUserconnectioninfo()) && proto.UserConnectionInfo.toObject(includeInstance, f),
    presencestate: jspb.Message.getFieldWithDefault(msg, 11, 0),
    queueinfo: (f = msg.getQueueinfo()) && proto.LobbyUserQueueInfo.toObject(includeInstance, f),
    draftinfo: (f = msg.getDraftinfo()) && proto.LobbyDraftInfo.toObject(includeInstance, f),
    matchinfo: (f = msg.getMatchinfo()) && proto.LobbyMatchInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyUserInfo}
 */
proto.LobbyUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyUserInfo;
  return proto.LobbyUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyUserInfo}
 */
proto.LobbyUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!proto.LobbyUserStateType} */ (reader.readEnum());
      msg.setStatetype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStateupdatedtimestamp(value);
      break;
    case 10:
      var value = new proto.UserConnectionInfo;
      reader.readMessage(value,proto.UserConnectionInfo.deserializeBinaryFromReader);
      msg.setUserconnectioninfo(value);
      break;
    case 11:
      var value = /** @type {!proto.PresenceState} */ (reader.readEnum());
      msg.setPresencestate(value);
      break;
    case 15:
      var value = new proto.LobbyUserQueueInfo;
      reader.readMessage(value,proto.LobbyUserQueueInfo.deserializeBinaryFromReader);
      msg.setQueueinfo(value);
      break;
    case 20:
      var value = new proto.LobbyDraftInfo;
      reader.readMessage(value,proto.LobbyDraftInfo.deserializeBinaryFromReader);
      msg.setDraftinfo(value);
      break;
    case 25:
      var value = new proto.LobbyMatchInfo;
      reader.readMessage(value,proto.LobbyMatchInfo.deserializeBinaryFromReader);
      msg.setMatchinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatetype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStateupdatedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUserconnectioninfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.UserConnectionInfo.serializeBinaryToWriter
    );
  }
  f = message.getPresencestate();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getQueueinfo();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.LobbyUserQueueInfo.serializeBinaryToWriter
    );
  }
  f = message.getDraftinfo();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.LobbyDraftInfo.serializeBinaryToWriter
    );
  }
  f = message.getMatchinfo();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.LobbyMatchInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.LobbyUserInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LobbyUserInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LobbyUserStateType stateType = 2;
 * @return {!proto.LobbyUserStateType}
 */
proto.LobbyUserInfo.prototype.getStatetype = function() {
  return /** @type {!proto.LobbyUserStateType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.LobbyUserStateType} value */
proto.LobbyUserInfo.prototype.setStatetype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 stateUpdatedTimestamp = 3;
 * @return {number}
 */
proto.LobbyUserInfo.prototype.getStateupdatedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LobbyUserInfo.prototype.setStateupdatedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UserConnectionInfo userConnectionInfo = 10;
 * @return {?proto.UserConnectionInfo}
 */
proto.LobbyUserInfo.prototype.getUserconnectioninfo = function() {
  return /** @type{?proto.UserConnectionInfo} */ (
    jspb.Message.getWrapperField(this, proto.UserConnectionInfo, 10));
};


/** @param {?proto.UserConnectionInfo|undefined} value */
proto.LobbyUserInfo.prototype.setUserconnectioninfo = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.LobbyUserInfo.prototype.clearUserconnectioninfo = function() {
  this.setUserconnectioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyUserInfo.prototype.hasUserconnectioninfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PresenceState presenceState = 11;
 * @return {!proto.PresenceState}
 */
proto.LobbyUserInfo.prototype.getPresencestate = function() {
  return /** @type {!proto.PresenceState} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.PresenceState} value */
proto.LobbyUserInfo.prototype.setPresencestate = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional LobbyUserQueueInfo queueInfo = 15;
 * @return {?proto.LobbyUserQueueInfo}
 */
proto.LobbyUserInfo.prototype.getQueueinfo = function() {
  return /** @type{?proto.LobbyUserQueueInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyUserQueueInfo, 15));
};


/** @param {?proto.LobbyUserQueueInfo|undefined} value */
proto.LobbyUserInfo.prototype.setQueueinfo = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.LobbyUserInfo.prototype.clearQueueinfo = function() {
  this.setQueueinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyUserInfo.prototype.hasQueueinfo = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional LobbyDraftInfo draftInfo = 20;
 * @return {?proto.LobbyDraftInfo}
 */
proto.LobbyUserInfo.prototype.getDraftinfo = function() {
  return /** @type{?proto.LobbyDraftInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyDraftInfo, 20));
};


/** @param {?proto.LobbyDraftInfo|undefined} value */
proto.LobbyUserInfo.prototype.setDraftinfo = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.LobbyUserInfo.prototype.clearDraftinfo = function() {
  this.setDraftinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyUserInfo.prototype.hasDraftinfo = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional LobbyMatchInfo matchInfo = 25;
 * @return {?proto.LobbyMatchInfo}
 */
proto.LobbyUserInfo.prototype.getMatchinfo = function() {
  return /** @type{?proto.LobbyMatchInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyMatchInfo, 25));
};


/** @param {?proto.LobbyMatchInfo|undefined} value */
proto.LobbyUserInfo.prototype.setMatchinfo = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.LobbyUserInfo.prototype.clearMatchinfo = function() {
  this.setMatchinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyUserInfo.prototype.hasMatchinfo = function() {
  return jspb.Message.getField(this, 25) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyUserQueueInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LobbyUserQueueInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyUserQueueInfo.displayName = 'proto.LobbyUserQueueInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyUserQueueInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyUserQueueInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyUserQueueInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyUserQueueInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    joinqueuerequest: (f = msg.getJoinqueuerequest()) && proto.ClientToLobbyMessage.toObject(includeInstance, f),
    joinqueueresponse: (f = msg.getJoinqueueresponse()) && proto.LobbyToClientMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyUserQueueInfo}
 */
proto.LobbyUserQueueInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyUserQueueInfo;
  return proto.LobbyUserQueueInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyUserQueueInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyUserQueueInfo}
 */
proto.LobbyUserQueueInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 11:
      var value = new proto.ClientToLobbyMessage;
      reader.readMessage(value,proto.ClientToLobbyMessage.deserializeBinaryFromReader);
      msg.setJoinqueuerequest(value);
      break;
    case 12:
      var value = new proto.LobbyToClientMessage;
      reader.readMessage(value,proto.LobbyToClientMessage.deserializeBinaryFromReader);
      msg.setJoinqueueresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyUserQueueInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyUserQueueInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyUserQueueInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyUserQueueInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJoinqueuerequest();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ClientToLobbyMessage.serializeBinaryToWriter
    );
  }
  f = message.getJoinqueueresponse();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.LobbyToClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.LobbyUserQueueInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LobbyUserQueueInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.LobbyUserQueueInfo.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LobbyUserQueueInfo.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ClientToLobbyMessage joinQueueRequest = 11;
 * @return {?proto.ClientToLobbyMessage}
 */
proto.LobbyUserQueueInfo.prototype.getJoinqueuerequest = function() {
  return /** @type{?proto.ClientToLobbyMessage} */ (
    jspb.Message.getWrapperField(this, proto.ClientToLobbyMessage, 11));
};


/** @param {?proto.ClientToLobbyMessage|undefined} value */
proto.LobbyUserQueueInfo.prototype.setJoinqueuerequest = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.LobbyUserQueueInfo.prototype.clearJoinqueuerequest = function() {
  this.setJoinqueuerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyUserQueueInfo.prototype.hasJoinqueuerequest = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional LobbyToClientMessage joinQueueResponse = 12;
 * @return {?proto.LobbyToClientMessage}
 */
proto.LobbyUserQueueInfo.prototype.getJoinqueueresponse = function() {
  return /** @type{?proto.LobbyToClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.LobbyToClientMessage, 12));
};


/** @param {?proto.LobbyToClientMessage|undefined} value */
proto.LobbyUserQueueInfo.prototype.setJoinqueueresponse = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.LobbyUserQueueInfo.prototype.clearJoinqueueresponse = function() {
  this.setJoinqueueresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LobbyUserQueueInfo.prototype.hasJoinqueueresponse = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Loop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Loop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Loop.displayName = 'proto.Loop';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Loop.prototype.toObject = function(opt_includeInstance) {
  return proto.Loop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Loop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Loop.toObject = function(includeInstance, msg) {
  var f, obj = {
    child: (f = msg.getChild()) && proto.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Loop}
 */
proto.Loop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Loop;
  return proto.Loop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Loop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Loop}
 */
proto.Loop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.setChild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Loop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Loop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Loop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Loop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChild();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node child = 1;
 * @return {?proto.Node}
 */
proto.Loop.prototype.getChild = function() {
  return /** @type{?proto.Node} */ (
    jspb.Message.getWrapperField(this, proto.Node, 1));
};


/** @param {?proto.Node|undefined} value */
proto.Loop.prototype.setChild = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Loop.prototype.clearChild = function() {
  this.setChild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Loop.prototype.hasChild = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoopbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoopbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoopbackRequest.displayName = 'proto.LoopbackRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoopbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LoopbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoopbackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoopbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoopbackRequest}
 */
proto.LoopbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoopbackRequest;
  return proto.LoopbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoopbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoopbackRequest}
 */
proto.LoopbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoopbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoopbackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoopbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoopbackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string contents = 1;
 * @return {string}
 */
proto.LoopbackRequest.prototype.getContents = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LoopbackRequest.prototype.setContents = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoopbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoopbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoopbackResponse.displayName = 'proto.LoopbackResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoopbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LoopbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoopbackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoopbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoopbackResponse}
 */
proto.LoopbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoopbackResponse;
  return proto.LoopbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoopbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoopbackResponse}
 */
proto.LoopbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContents(value);
      break;
    case 2:
      var value = /** @type {!proto.GRETHHostErrorCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoopbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoopbackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoopbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoopbackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string contents = 1;
 * @return {string}
 */
proto.LoopbackResponse.prototype.getContents = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LoopbackResponse.prototype.setContents = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GRETHHostErrorCode result = 2;
 * @return {!proto.GRETHHostErrorCode}
 */
proto.LoopbackResponse.prototype.getResult = function() {
  return /** @type {!proto.GRETHHostErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GRETHHostErrorCode} value */
proto.LoopbackResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ManaInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ManaInfo.repeatedFields_, null);
};
goog.inherits(proto.ManaInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ManaInfo.displayName = 'proto.ManaInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ManaInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ManaInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ManaInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ManaInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    specsList: jspb.Message.toObjectList(msg.getSpecsList(),
    proto.ManaInfoTypesSpec.toObject, includeInstance),
    manaid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    color: jspb.Message.getFieldWithDefault(msg, 2, 0),
    srcinstanceid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ManaInfo}
 */
proto.ManaInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ManaInfo;
  return proto.ManaInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ManaInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ManaInfo}
 */
proto.ManaInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.ManaInfoTypesSpec;
      reader.readMessage(value,proto.ManaInfoTypesSpec.deserializeBinaryFromReader);
      msg.addSpecs(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setManaid(value);
      break;
    case 2:
      var value = /** @type {!proto.ManaColor} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcinstanceid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ManaInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ManaInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ManaInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ManaInfoTypesSpec.serializeBinaryToWriter
    );
  }
  f = message.getManaid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getColor();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSrcinstanceid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated ManaInfoTypesSpec specs = 4;
 * @return {!Array.<!proto.ManaInfoTypesSpec>}
 */
proto.ManaInfo.prototype.getSpecsList = function() {
  return /** @type{!Array.<!proto.ManaInfoTypesSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaInfoTypesSpec, 4));
};


/** @param {!Array.<!proto.ManaInfoTypesSpec>} value */
proto.ManaInfo.prototype.setSpecsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ManaInfoTypesSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaInfoTypesSpec}
 */
proto.ManaInfo.prototype.addSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ManaInfoTypesSpec, opt_index);
};


proto.ManaInfo.prototype.clearSpecsList = function() {
  this.setSpecsList([]);
};


/**
 * optional uint32 manaId = 1;
 * @return {number}
 */
proto.ManaInfo.prototype.getManaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ManaInfo.prototype.setManaid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ManaColor color = 2;
 * @return {!proto.ManaColor}
 */
proto.ManaInfo.prototype.getColor = function() {
  return /** @type {!proto.ManaColor} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ManaColor} value */
proto.ManaInfo.prototype.setColor = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 srcInstanceId = 3;
 * @return {number}
 */
proto.ManaInfo.prototype.getSrcinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ManaInfo.prototype.setSrcinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 abilityGrpId = 5;
 * @return {number}
 */
proto.ManaInfo.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ManaInfo.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ManaInfoTypesSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ManaInfoTypesSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ManaInfoTypesSpec.displayName = 'proto.ManaInfoTypesSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ManaInfoTypesSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.ManaInfoTypesSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ManaInfoTypesSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaInfoTypesSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ManaInfoTypesSpec}
 */
proto.ManaInfoTypesSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ManaInfoTypesSpec;
  return proto.ManaInfoTypesSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ManaInfoTypesSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ManaInfoTypesSpec}
 */
proto.ManaInfoTypesSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ManaSpecType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ManaInfoTypesSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ManaInfoTypesSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ManaInfoTypesSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaInfoTypesSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ManaSpecType type = 1;
 * @return {!proto.ManaSpecType}
 */
proto.ManaInfoTypesSpec.prototype.getType = function() {
  return /** @type {!proto.ManaSpecType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ManaSpecType} value */
proto.ManaInfoTypesSpec.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ManaPayment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ManaPayment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ManaPayment.displayName = 'proto.ManaPayment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ManaPayment.prototype.toObject = function(opt_includeInstance) {
  return proto.ManaPayment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ManaPayment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaPayment.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ManaPayment}
 */
proto.ManaPayment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ManaPayment;
  return proto.ManaPayment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ManaPayment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ManaPayment}
 */
proto.ManaPayment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ManaColor} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ManaPayment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ManaPayment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ManaPayment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaPayment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ManaColor color = 1;
 * @return {!proto.ManaColor}
 */
proto.ManaPayment.prototype.getColor = function() {
  return /** @type {!proto.ManaColor} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ManaColor} value */
proto.ManaPayment.prototype.setColor = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.ManaPayment.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ManaPayment.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ManaPaymentOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ManaPaymentOption.repeatedFields_, null);
};
goog.inherits(proto.ManaPaymentOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ManaPaymentOption.displayName = 'proto.ManaPaymentOption';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ManaPaymentOption.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ManaPaymentOption.prototype.toObject = function(opt_includeInstance) {
  return proto.ManaPaymentOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ManaPaymentOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaPaymentOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentsList: jspb.Message.toObjectList(msg.getPaymentsList(),
    proto.ManaPayment.toObject, includeInstance),
    manaList: jspb.Message.toObjectList(msg.getManaList(),
    proto.ManaInfo.toObject, includeInstance),
    maxactivations: jspb.Message.getFieldWithDefault(msg, 3, 0),
    optionindex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ManaPaymentOption}
 */
proto.ManaPaymentOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ManaPaymentOption;
  return proto.ManaPaymentOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ManaPaymentOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ManaPaymentOption}
 */
proto.ManaPaymentOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ManaPayment;
      reader.readMessage(value,proto.ManaPayment.deserializeBinaryFromReader);
      msg.addPayments(value);
      break;
    case 2:
      var value = new proto.ManaInfo;
      reader.readMessage(value,proto.ManaInfo.deserializeBinaryFromReader);
      msg.addMana(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxactivations(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ManaPaymentOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ManaPaymentOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ManaPaymentOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaPaymentOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ManaPayment.serializeBinaryToWriter
    );
  }
  f = message.getManaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ManaInfo.serializeBinaryToWriter
    );
  }
  f = message.getMaxactivations();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated ManaPayment payments = 1;
 * @return {!Array.<!proto.ManaPayment>}
 */
proto.ManaPaymentOption.prototype.getPaymentsList = function() {
  return /** @type{!Array.<!proto.ManaPayment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaPayment, 1));
};


/** @param {!Array.<!proto.ManaPayment>} value */
proto.ManaPaymentOption.prototype.setPaymentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ManaPayment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaPayment}
 */
proto.ManaPaymentOption.prototype.addPayments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ManaPayment, opt_index);
};


proto.ManaPaymentOption.prototype.clearPaymentsList = function() {
  this.setPaymentsList([]);
};


/**
 * repeated ManaInfo mana = 2;
 * @return {!Array.<!proto.ManaInfo>}
 */
proto.ManaPaymentOption.prototype.getManaList = function() {
  return /** @type{!Array.<!proto.ManaInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaInfo, 2));
};


/** @param {!Array.<!proto.ManaInfo>} value */
proto.ManaPaymentOption.prototype.setManaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ManaInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaInfo}
 */
proto.ManaPaymentOption.prototype.addMana = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ManaInfo, opt_index);
};


proto.ManaPaymentOption.prototype.clearManaList = function() {
  this.setManaList([]);
};


/**
 * optional uint32 maxActivations = 3;
 * @return {number}
 */
proto.ManaPaymentOption.prototype.getMaxactivations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ManaPaymentOption.prototype.setMaxactivations = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 optionIndex = 4;
 * @return {number}
 */
proto.ManaPaymentOption.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ManaPaymentOption.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ManaRequirement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ManaRequirement.repeatedFields_, null);
};
goog.inherits(proto.ManaRequirement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ManaRequirement.displayName = 'proto.ManaRequirement';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ManaRequirement.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ManaRequirement.prototype.toObject = function(opt_includeInstance) {
  return proto.ManaRequirement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ManaRequirement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaRequirement.toObject = function(includeInstance, msg) {
  var f, obj = {
    colorList: jspb.Message.getRepeatedField(msg, 1),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    costid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    objectid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ManaRequirement}
 */
proto.ManaRequirement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ManaRequirement;
  return proto.ManaRequirement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ManaRequirement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ManaRequirement}
 */
proto.ManaRequirement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<!proto.ManaColor>} */ (reader.readPackedEnum());
      msg.setColorList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCostid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjectid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ManaRequirement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ManaRequirement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ManaRequirement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ManaRequirement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColorList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCostid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getObjectid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated ManaColor color = 1;
 * @return {!Array.<!proto.ManaColor>}
 */
proto.ManaRequirement.prototype.getColorList = function() {
  return /** @type {!Array.<!proto.ManaColor>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<!proto.ManaColor>} value */
proto.ManaRequirement.prototype.setColorList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.ManaColor} value
 * @param {number=} opt_index
 */
proto.ManaRequirement.prototype.addColor = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.ManaRequirement.prototype.clearColorList = function() {
  this.setColorList([]);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.ManaRequirement.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ManaRequirement.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 costId = 3;
 * @return {number}
 */
proto.ManaRequirement.prototype.getCostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ManaRequirement.prototype.setCostid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 objectId = 4;
 * @return {number}
 */
proto.ManaRequirement.prototype.getObjectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ManaRequirement.prototype.setObjectid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 abilityGrpId = 5;
 * @return {number}
 */
proto.ManaRequirement.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ManaRequirement.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MatchConfig.repeatedFields_, null);
};
goog.inherits(proto.MatchConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchConfig.displayName = 'proto.MatchConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MatchConfig.repeatedFields_ = [6,11,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamsList: jspb.Message.toObjectList(msg.getTeamsList(),
    proto.TeamConfig.toObject, includeInstance),
    timerconfigsList: jspb.Message.toObjectList(msg.getTimerconfigsList(),
    proto.TimerConfig.toObject, includeInstance),
    cosmeticconfigsList: jspb.Message.toObjectList(msg.getCosmeticconfigsList(),
    proto.CosmeticConfig.toObject, includeInstance),
    gametype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamevariant: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wincondition: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matchoptionbitmask: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxplayerhandsize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    matchtimelimitsec: jspb.Message.getFieldWithDefault(msg, 7, 0),
    inactivitytimelimitsec: jspb.Message.getFieldWithDefault(msg, 8, 0),
    testconfig: (f = msg.getTestconfig()) && proto.TestConfig.toObject(includeInstance, f),
    mulligantype: jspb.Message.getFieldWithDefault(msg, 10, 0),
    timerpackage: jspb.Message.getFieldWithDefault(msg, 12, 0),
    timeoutconfig: (f = msg.getTimeoutconfig()) && proto.TimeoutConfig.toObject(includeInstance, f),
    superformat: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchConfig}
 */
proto.MatchConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchConfig;
  return proto.MatchConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchConfig}
 */
proto.MatchConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.TeamConfig;
      reader.readMessage(value,proto.TeamConfig.deserializeBinaryFromReader);
      msg.addTeams(value);
      break;
    case 11:
      var value = new proto.TimerConfig;
      reader.readMessage(value,proto.TimerConfig.deserializeBinaryFromReader);
      msg.addTimerconfigs(value);
      break;
    case 14:
      var value = new proto.CosmeticConfig;
      reader.readMessage(value,proto.CosmeticConfig.deserializeBinaryFromReader);
      msg.addCosmeticconfigs(value);
      break;
    case 1:
      var value = /** @type {!proto.GameType} */ (reader.readEnum());
      msg.setGametype(value);
      break;
    case 2:
      var value = /** @type {!proto.GameVariant} */ (reader.readEnum());
      msg.setGamevariant(value);
      break;
    case 3:
      var value = /** @type {!proto.MatchWinCondition} */ (reader.readEnum());
      msg.setWincondition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatchoptionbitmask(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxplayerhandsize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatchtimelimitsec(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInactivitytimelimitsec(value);
      break;
    case 9:
      var value = new proto.TestConfig;
      reader.readMessage(value,proto.TestConfig.deserializeBinaryFromReader);
      msg.setTestconfig(value);
      break;
    case 10:
      var value = /** @type {!proto.MulliganType} */ (reader.readEnum());
      msg.setMulligantype(value);
      break;
    case 12:
      var value = /** @type {!proto.TimerPackage} */ (reader.readEnum());
      msg.setTimerpackage(value);
      break;
    case 13:
      var value = new proto.TimeoutConfig;
      reader.readMessage(value,proto.TimeoutConfig.deserializeBinaryFromReader);
      msg.setTimeoutconfig(value);
      break;
    case 15:
      var value = /** @type {!proto.SuperFormat} */ (reader.readEnum());
      msg.setSuperformat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.TeamConfig.serializeBinaryToWriter
    );
  }
  f = message.getTimerconfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.TimerConfig.serializeBinaryToWriter
    );
  }
  f = message.getCosmeticconfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.CosmeticConfig.serializeBinaryToWriter
    );
  }
  f = message.getGametype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGamevariant();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWincondition();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMatchoptionbitmask();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxplayerhandsize();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMatchtimelimitsec();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getInactivitytimelimitsec();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTestconfig();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.TestConfig.serializeBinaryToWriter
    );
  }
  f = message.getMulligantype();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getTimerpackage();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getTimeoutconfig();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.TimeoutConfig.serializeBinaryToWriter
    );
  }
  f = message.getSuperformat();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * repeated TeamConfig teams = 6;
 * @return {!Array.<!proto.TeamConfig>}
 */
proto.MatchConfig.prototype.getTeamsList = function() {
  return /** @type{!Array.<!proto.TeamConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TeamConfig, 6));
};


/** @param {!Array.<!proto.TeamConfig>} value */
proto.MatchConfig.prototype.setTeamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.TeamConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TeamConfig}
 */
proto.MatchConfig.prototype.addTeams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.TeamConfig, opt_index);
};


proto.MatchConfig.prototype.clearTeamsList = function() {
  this.setTeamsList([]);
};


/**
 * repeated TimerConfig timerConfigs = 11;
 * @return {!Array.<!proto.TimerConfig>}
 */
proto.MatchConfig.prototype.getTimerconfigsList = function() {
  return /** @type{!Array.<!proto.TimerConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimerConfig, 11));
};


/** @param {!Array.<!proto.TimerConfig>} value */
proto.MatchConfig.prototype.setTimerconfigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.TimerConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimerConfig}
 */
proto.MatchConfig.prototype.addTimerconfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.TimerConfig, opt_index);
};


proto.MatchConfig.prototype.clearTimerconfigsList = function() {
  this.setTimerconfigsList([]);
};


/**
 * repeated CosmeticConfig cosmeticConfigs = 14;
 * @return {!Array.<!proto.CosmeticConfig>}
 */
proto.MatchConfig.prototype.getCosmeticconfigsList = function() {
  return /** @type{!Array.<!proto.CosmeticConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CosmeticConfig, 14));
};


/** @param {!Array.<!proto.CosmeticConfig>} value */
proto.MatchConfig.prototype.setCosmeticconfigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.CosmeticConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CosmeticConfig}
 */
proto.MatchConfig.prototype.addCosmeticconfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.CosmeticConfig, opt_index);
};


proto.MatchConfig.prototype.clearCosmeticconfigsList = function() {
  this.setCosmeticconfigsList([]);
};


/**
 * optional GameType gameType = 1;
 * @return {!proto.GameType}
 */
proto.MatchConfig.prototype.getGametype = function() {
  return /** @type {!proto.GameType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.GameType} value */
proto.MatchConfig.prototype.setGametype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional GameVariant gameVariant = 2;
 * @return {!proto.GameVariant}
 */
proto.MatchConfig.prototype.getGamevariant = function() {
  return /** @type {!proto.GameVariant} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.GameVariant} value */
proto.MatchConfig.prototype.setGamevariant = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional MatchWinCondition winCondition = 3;
 * @return {!proto.MatchWinCondition}
 */
proto.MatchConfig.prototype.getWincondition = function() {
  return /** @type {!proto.MatchWinCondition} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.MatchWinCondition} value */
proto.MatchConfig.prototype.setWincondition = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 matchOptionBitmask = 4;
 * @return {number}
 */
proto.MatchConfig.prototype.getMatchoptionbitmask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MatchConfig.prototype.setMatchoptionbitmask = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 maxPlayerHandSize = 5;
 * @return {number}
 */
proto.MatchConfig.prototype.getMaxplayerhandsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MatchConfig.prototype.setMaxplayerhandsize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 matchTimeLimitSec = 7;
 * @return {number}
 */
proto.MatchConfig.prototype.getMatchtimelimitsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MatchConfig.prototype.setMatchtimelimitsec = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 inactivityTimeLimitSec = 8;
 * @return {number}
 */
proto.MatchConfig.prototype.getInactivitytimelimitsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MatchConfig.prototype.setInactivitytimelimitsec = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional TestConfig testConfig = 9;
 * @return {?proto.TestConfig}
 */
proto.MatchConfig.prototype.getTestconfig = function() {
  return /** @type{?proto.TestConfig} */ (
    jspb.Message.getWrapperField(this, proto.TestConfig, 9));
};


/** @param {?proto.TestConfig|undefined} value */
proto.MatchConfig.prototype.setTestconfig = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.MatchConfig.prototype.clearTestconfig = function() {
  this.setTestconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchConfig.prototype.hasTestconfig = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MulliganType mulliganType = 10;
 * @return {!proto.MulliganType}
 */
proto.MatchConfig.prototype.getMulligantype = function() {
  return /** @type {!proto.MulliganType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.MulliganType} value */
proto.MatchConfig.prototype.setMulligantype = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional TimerPackage timerPackage = 12;
 * @return {!proto.TimerPackage}
 */
proto.MatchConfig.prototype.getTimerpackage = function() {
  return /** @type {!proto.TimerPackage} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.TimerPackage} value */
proto.MatchConfig.prototype.setTimerpackage = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional TimeoutConfig timeoutConfig = 13;
 * @return {?proto.TimeoutConfig}
 */
proto.MatchConfig.prototype.getTimeoutconfig = function() {
  return /** @type{?proto.TimeoutConfig} */ (
    jspb.Message.getWrapperField(this, proto.TimeoutConfig, 13));
};


/** @param {?proto.TimeoutConfig|undefined} value */
proto.MatchConfig.prototype.setTimeoutconfig = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.MatchConfig.prototype.clearTimeoutconfig = function() {
  this.setTimeoutconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchConfig.prototype.hasTimeoutconfig = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SuperFormat superFormat = 15;
 * @return {!proto.SuperFormat}
 */
proto.MatchConfig.prototype.getSuperformat = function() {
  return /** @type {!proto.SuperFormat} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.SuperFormat} value */
proto.MatchConfig.prototype.setSuperformat = function(value) {
  jspb.Message.setProto3EnumField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerClientSessionSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MatchControllerClientSessionSettings.repeatedFields_, null);
};
goog.inherits(proto.MatchControllerClientSessionSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerClientSessionSettings.displayName = 'proto.MatchControllerClientSessionSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MatchControllerClientSessionSettings.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerClientSessionSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerClientSessionSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerClientSessionSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerClientSessionSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribedeventtypesList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerClientSessionSettings}
 */
proto.MatchControllerClientSessionSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerClientSessionSettings;
  return proto.MatchControllerClientSessionSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerClientSessionSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerClientSessionSettings}
 */
proto.MatchControllerClientSessionSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {!Array.<!proto.MatchControllerEventType>} */ (reader.readPackedEnum());
      msg.setSubscribedeventtypesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerClientSessionSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerClientSessionSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerClientSessionSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerClientSessionSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribedeventtypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      10,
      f
    );
  }
};


/**
 * repeated MatchControllerEventType subscribedEventTypes = 10;
 * @return {!Array.<!proto.MatchControllerEventType>}
 */
proto.MatchControllerClientSessionSettings.prototype.getSubscribedeventtypesList = function() {
  return /** @type {!Array.<!proto.MatchControllerEventType>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<!proto.MatchControllerEventType>} value */
proto.MatchControllerClientSessionSettings.prototype.setSubscribedeventtypesList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!proto.MatchControllerEventType} value
 * @param {number=} opt_index
 */
proto.MatchControllerClientSessionSettings.prototype.addSubscribedeventtypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.MatchControllerClientSessionSettings.prototype.clearSubscribedeventtypesList = function() {
  this.setSubscribedeventtypesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerGetSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MatchControllerGetSettingsRequest.repeatedFields_, null);
};
goog.inherits(proto.MatchControllerGetSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerGetSettingsRequest.displayName = 'proto.MatchControllerGetSettingsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MatchControllerGetSettingsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerGetSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerGetSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerGetSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerGetSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertynamesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerGetSettingsRequest}
 */
proto.MatchControllerGetSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerGetSettingsRequest;
  return proto.MatchControllerGetSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerGetSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerGetSettingsRequest}
 */
proto.MatchControllerGetSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPropertynames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerGetSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerGetSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerGetSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerGetSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertynamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string propertyNames = 1;
 * @return {!Array.<string>}
 */
proto.MatchControllerGetSettingsRequest.prototype.getPropertynamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.MatchControllerGetSettingsRequest.prototype.setPropertynamesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.MatchControllerGetSettingsRequest.prototype.addPropertynames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.MatchControllerGetSettingsRequest.prototype.clearPropertynamesList = function() {
  this.setPropertynamesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerGetSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchControllerGetSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerGetSettingsResponse.displayName = 'proto.MatchControllerGetSettingsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerGetSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerGetSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerGetSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerGetSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchcontrollersettings: (f = msg.getMatchcontrollersettings()) && proto.MatchControllerSettings.toObject(includeInstance, f),
    clientsessionsettings: (f = msg.getClientsessionsettings()) && proto.MatchControllerClientSessionSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerGetSettingsResponse}
 */
proto.MatchControllerGetSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerGetSettingsResponse;
  return proto.MatchControllerGetSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerGetSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerGetSettingsResponse}
 */
proto.MatchControllerGetSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchControllerSettings;
      reader.readMessage(value,proto.MatchControllerSettings.deserializeBinaryFromReader);
      msg.setMatchcontrollersettings(value);
      break;
    case 2:
      var value = new proto.MatchControllerClientSessionSettings;
      reader.readMessage(value,proto.MatchControllerClientSessionSettings.deserializeBinaryFromReader);
      msg.setClientsessionsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerGetSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerGetSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerGetSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerGetSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchcontrollersettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchControllerSettings.serializeBinaryToWriter
    );
  }
  f = message.getClientsessionsettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MatchControllerClientSessionSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchControllerSettings matchControllerSettings = 1;
 * @return {?proto.MatchControllerSettings}
 */
proto.MatchControllerGetSettingsResponse.prototype.getMatchcontrollersettings = function() {
  return /** @type{?proto.MatchControllerSettings} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerSettings, 1));
};


/** @param {?proto.MatchControllerSettings|undefined} value */
proto.MatchControllerGetSettingsResponse.prototype.setMatchcontrollersettings = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MatchControllerGetSettingsResponse.prototype.clearMatchcontrollersettings = function() {
  this.setMatchcontrollersettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerGetSettingsResponse.prototype.hasMatchcontrollersettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchControllerClientSessionSettings clientSessionSettings = 2;
 * @return {?proto.MatchControllerClientSessionSettings}
 */
proto.MatchControllerGetSettingsResponse.prototype.getClientsessionsettings = function() {
  return /** @type{?proto.MatchControllerClientSessionSettings} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerClientSessionSettings, 2));
};


/** @param {?proto.MatchControllerClientSessionSettings|undefined} value */
proto.MatchControllerGetSettingsResponse.prototype.setClientsessionsettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MatchControllerGetSettingsResponse.prototype.clearClientsessionsettings = function() {
  this.setClientsessionsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerGetSettingsResponse.prototype.hasClientsessionsettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerHealthReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchControllerHealthReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerHealthReport.displayName = 'proto.MatchControllerHealthReport';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerHealthReport.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerHealthReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerHealthReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerHealthReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceinfo: (f = msg.getServiceinfo()) && proto.MatchControllerServiceInfo.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerHealthReport}
 */
proto.MatchControllerHealthReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerHealthReport;
  return proto.MatchControllerHealthReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerHealthReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerHealthReport}
 */
proto.MatchControllerHealthReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchControllerServiceInfo;
      reader.readMessage(value,proto.MatchControllerServiceInfo.deserializeBinaryFromReader);
      msg.setServiceinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerHealthReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerHealthReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerHealthReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerHealthReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchControllerServiceInfo.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional MatchControllerServiceInfo serviceInfo = 1;
 * @return {?proto.MatchControllerServiceInfo}
 */
proto.MatchControllerHealthReport.prototype.getServiceinfo = function() {
  return /** @type{?proto.MatchControllerServiceInfo} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerServiceInfo, 1));
};


/** @param {?proto.MatchControllerServiceInfo|undefined} value */
proto.MatchControllerHealthReport.prototype.setServiceinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MatchControllerHealthReport.prototype.clearServiceinfo = function() {
  this.setServiceinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerHealthReport.prototype.hasServiceinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.MatchControllerHealthReport.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MatchControllerHealthReport.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerServiceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchControllerServiceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerServiceInfo.displayName = 'proto.MatchControllerServiceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerServiceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerServiceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerServiceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerServiceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    servicefabricserviceinfo: (f = msg.getServicefabricserviceinfo()) && proto.ServiceFabricServiceInfo.toObject(includeInstance, f),
    matchcontrollerstate: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerServiceInfo}
 */
proto.MatchControllerServiceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerServiceInfo;
  return proto.MatchControllerServiceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerServiceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerServiceInfo}
 */
proto.MatchControllerServiceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentid(value);
      break;
    case 1:
      var value = new proto.ServiceFabricServiceInfo;
      reader.readMessage(value,proto.ServiceFabricServiceInfo.deserializeBinaryFromReader);
      msg.setServicefabricserviceinfo(value);
      break;
    case 3:
      var value = /** @type {!proto.MatchControllerState} */ (reader.readEnum());
      msg.setMatchcontrollerstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerServiceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerServiceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerServiceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerServiceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServicefabricserviceinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ServiceFabricServiceInfo.serializeBinaryToWriter
    );
  }
  f = message.getMatchcontrollerstate();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string environmentId = 2;
 * @return {string}
 */
proto.MatchControllerServiceInfo.prototype.getEnvironmentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MatchControllerServiceInfo.prototype.setEnvironmentid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ServiceFabricServiceInfo serviceFabricServiceInfo = 1;
 * @return {?proto.ServiceFabricServiceInfo}
 */
proto.MatchControllerServiceInfo.prototype.getServicefabricserviceinfo = function() {
  return /** @type{?proto.ServiceFabricServiceInfo} */ (
    jspb.Message.getWrapperField(this, proto.ServiceFabricServiceInfo, 1));
};


/** @param {?proto.ServiceFabricServiceInfo|undefined} value */
proto.MatchControllerServiceInfo.prototype.setServicefabricserviceinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MatchControllerServiceInfo.prototype.clearServicefabricserviceinfo = function() {
  this.setServicefabricserviceinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerServiceInfo.prototype.hasServicefabricserviceinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchControllerState matchControllerState = 3;
 * @return {!proto.MatchControllerState}
 */
proto.MatchControllerServiceInfo.prototype.getMatchcontrollerstate = function() {
  return /** @type {!proto.MatchControllerState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.MatchControllerState} value */
proto.MatchControllerServiceInfo.prototype.setMatchcontrollerstate = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerSetSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchControllerSetSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerSetSettingsRequest.displayName = 'proto.MatchControllerSetSettingsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerSetSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerSetSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerSetSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerSetSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    settings: (f = msg.getSettings()) && proto.MatchControllerSettings.toObject(includeInstance, f),
    clientsessionsettings: (f = msg.getClientsessionsettings()) && proto.MatchControllerClientSessionSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerSetSettingsRequest}
 */
proto.MatchControllerSetSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerSetSettingsRequest;
  return proto.MatchControllerSetSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerSetSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerSetSettingsRequest}
 */
proto.MatchControllerSetSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchControllerSettings;
      reader.readMessage(value,proto.MatchControllerSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    case 2:
      var value = new proto.MatchControllerClientSessionSettings;
      reader.readMessage(value,proto.MatchControllerClientSessionSettings.deserializeBinaryFromReader);
      msg.setClientsessionsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerSetSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerSetSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerSetSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerSetSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchControllerSettings.serializeBinaryToWriter
    );
  }
  f = message.getClientsessionsettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MatchControllerClientSessionSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchControllerSettings settings = 1;
 * @return {?proto.MatchControllerSettings}
 */
proto.MatchControllerSetSettingsRequest.prototype.getSettings = function() {
  return /** @type{?proto.MatchControllerSettings} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerSettings, 1));
};


/** @param {?proto.MatchControllerSettings|undefined} value */
proto.MatchControllerSetSettingsRequest.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MatchControllerSetSettingsRequest.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerSetSettingsRequest.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchControllerClientSessionSettings clientSessionSettings = 2;
 * @return {?proto.MatchControllerClientSessionSettings}
 */
proto.MatchControllerSetSettingsRequest.prototype.getClientsessionsettings = function() {
  return /** @type{?proto.MatchControllerClientSessionSettings} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerClientSessionSettings, 2));
};


/** @param {?proto.MatchControllerClientSessionSettings|undefined} value */
proto.MatchControllerSetSettingsRequest.prototype.setClientsessionsettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MatchControllerSetSettingsRequest.prototype.clearClientsessionsettings = function() {
  this.setClientsessionsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerSetSettingsRequest.prototype.hasClientsessionsettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerSetSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchControllerSetSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerSetSettingsResponse.displayName = 'proto.MatchControllerSetSettingsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerSetSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerSetSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerSetSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerSetSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    settings: (f = msg.getSettings()) && proto.MatchControllerSettings.toObject(includeInstance, f),
    clientsessionsettings: (f = msg.getClientsessionsettings()) && proto.MatchControllerClientSessionSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerSetSettingsResponse}
 */
proto.MatchControllerSetSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerSetSettingsResponse;
  return proto.MatchControllerSetSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerSetSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerSetSettingsResponse}
 */
proto.MatchControllerSetSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchControllerSettings;
      reader.readMessage(value,proto.MatchControllerSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    case 2:
      var value = new proto.MatchControllerClientSessionSettings;
      reader.readMessage(value,proto.MatchControllerClientSessionSettings.deserializeBinaryFromReader);
      msg.setClientsessionsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerSetSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerSetSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerSetSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerSetSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchControllerSettings.serializeBinaryToWriter
    );
  }
  f = message.getClientsessionsettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MatchControllerClientSessionSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchControllerSettings settings = 1;
 * @return {?proto.MatchControllerSettings}
 */
proto.MatchControllerSetSettingsResponse.prototype.getSettings = function() {
  return /** @type{?proto.MatchControllerSettings} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerSettings, 1));
};


/** @param {?proto.MatchControllerSettings|undefined} value */
proto.MatchControllerSetSettingsResponse.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MatchControllerSetSettingsResponse.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerSetSettingsResponse.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchControllerClientSessionSettings clientSessionSettings = 2;
 * @return {?proto.MatchControllerClientSessionSettings}
 */
proto.MatchControllerSetSettingsResponse.prototype.getClientsessionsettings = function() {
  return /** @type{?proto.MatchControllerClientSessionSettings} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerClientSessionSettings, 2));
};


/** @param {?proto.MatchControllerClientSessionSettings|undefined} value */
proto.MatchControllerSetSettingsResponse.prototype.setClientsessionsettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MatchControllerSetSettingsResponse.prototype.clearClientsessionsettings = function() {
  this.setClientsessionsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerSetSettingsResponse.prototype.hasClientsessionsettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchControllerSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerSettings.displayName = 'proto.MatchControllerSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    greirbin: jspb.Message.getFieldWithDefault(msg, 5, ""),
    grpdxml: jspb.Message.getFieldWithDefault(msg, 6, ""),
    currentseason: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerSettings}
 */
proto.MatchControllerSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerSettings;
  return proto.MatchControllerSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerSettings}
 */
proto.MatchControllerSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGreirbin(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrpdxml(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentseason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGreirbin();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGrpdxml();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCurrentseason();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional string greIrBin = 5;
 * @return {string}
 */
proto.MatchControllerSettings.prototype.getGreirbin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.MatchControllerSettings.prototype.setGreirbin = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string grpdXml = 6;
 * @return {string}
 */
proto.MatchControllerSettings.prototype.getGrpdxml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.MatchControllerSettings.prototype.setGrpdxml = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string currentSeason = 20;
 * @return {string}
 */
proto.MatchControllerSettings.prototype.getCurrentseason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.MatchControllerSettings.prototype.setCurrentseason = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchControllerStateChangedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchControllerStateChangedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchControllerStateChangedEvent.displayName = 'proto.MatchControllerStateChangedEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchControllerStateChangedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchControllerStateChangedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchControllerStateChangedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerStateChangedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceinfo: (f = msg.getServiceinfo()) && proto.MatchControllerServiceInfo.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchControllerStateChangedEvent}
 */
proto.MatchControllerStateChangedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchControllerStateChangedEvent;
  return proto.MatchControllerStateChangedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchControllerStateChangedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchControllerStateChangedEvent}
 */
proto.MatchControllerStateChangedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchControllerServiceInfo;
      reader.readMessage(value,proto.MatchControllerServiceInfo.deserializeBinaryFromReader);
      msg.setServiceinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchControllerStateChangedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchControllerStateChangedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchControllerStateChangedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchControllerStateChangedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchControllerServiceInfo.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional MatchControllerServiceInfo serviceInfo = 1;
 * @return {?proto.MatchControllerServiceInfo}
 */
proto.MatchControllerStateChangedEvent.prototype.getServiceinfo = function() {
  return /** @type{?proto.MatchControllerServiceInfo} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerServiceInfo, 1));
};


/** @param {?proto.MatchControllerServiceInfo|undefined} value */
proto.MatchControllerStateChangedEvent.prototype.setServiceinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MatchControllerStateChangedEvent.prototype.clearServiceinfo = function() {
  this.setServiceinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchControllerStateChangedEvent.prototype.hasServiceinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.MatchControllerStateChangedEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MatchControllerStateChangedEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchGameRoomConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MatchGameRoomConfig.repeatedFields_, null);
};
goog.inherits(proto.MatchGameRoomConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchGameRoomConfig.displayName = 'proto.MatchGameRoomConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MatchGameRoomConfig.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchGameRoomConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchGameRoomConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchGameRoomConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reservedplayersList: jspb.Message.toObjectList(msg.getReservedplayersList(),
    proto.MatchGameRoomPlayerInfo.toObject, includeInstance),
    matchid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    password: jspb.Message.getFieldWithDefault(msg, 21, ""),
    greirbinpath: jspb.Message.getFieldWithDefault(msg, 30, ""),
    grehostloggerlevel: jspb.Message.getFieldWithDefault(msg, 31, ""),
    grerecorderconfig: jspb.Message.getFieldWithDefault(msg, 32, ""),
    matchconfig: (f = msg.getMatchconfig()) && proto.MatchConfig.toObject(includeInstance, f),
    greconfig: (f = msg.getGreconfig()) && proto.GREConfiguration.toObject(includeInstance, f),
    isvisible: jspb.Message.getFieldWithDefault(msg, 20, false),
    joinroomtimeoutsecs: jspb.Message.getFieldWithDefault(msg, 35, 0),
    playerdisconnecttimeoutsecs: jspb.Message.getFieldWithDefault(msg, 36, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchGameRoomConfig}
 */
proto.MatchGameRoomConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchGameRoomConfig;
  return proto.MatchGameRoomConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchGameRoomConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchGameRoomConfig}
 */
proto.MatchGameRoomConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameroomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 8:
      var value = new proto.MatchGameRoomPlayerInfo;
      reader.readMessage(value,proto.MatchGameRoomPlayerInfo.deserializeBinaryFromReader);
      msg.addReservedplayers(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setGreirbinpath(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrehostloggerlevel(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrerecorderconfig(value);
      break;
    case 12:
      var value = new proto.MatchConfig;
      reader.readMessage(value,proto.MatchConfig.deserializeBinaryFromReader);
      msg.setMatchconfig(value);
      break;
    case 13:
      var value = new proto.GREConfiguration;
      reader.readMessage(value,proto.GREConfiguration.deserializeBinaryFromReader);
      msg.setGreconfig(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvisible(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJoinroomtimeoutsecs(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerdisconnecttimeoutsecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchGameRoomConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchGameRoomConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchGameRoomConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReservedplayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.MatchGameRoomPlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getGreirbinpath();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getGrehostloggerlevel();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getGrerecorderconfig();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getMatchconfig();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.MatchConfig.serializeBinaryToWriter
    );
  }
  f = message.getGreconfig();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.GREConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getIsvisible();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getJoinroomtimeoutsecs();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
  f = message.getPlayerdisconnecttimeoutsecs();
  if (f !== 0) {
    writer.writeInt32(
      36,
      f
    );
  }
};


/**
 * optional string gameRoomId = 1;
 * @return {string}
 */
proto.MatchGameRoomConfig.prototype.getGameroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MatchGameRoomConfig.prototype.setGameroomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.MatchGameRoomConfig.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MatchGameRoomConfig.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated MatchGameRoomPlayerInfo reservedPlayers = 8;
 * @return {!Array.<!proto.MatchGameRoomPlayerInfo>}
 */
proto.MatchGameRoomConfig.prototype.getReservedplayersList = function() {
  return /** @type{!Array.<!proto.MatchGameRoomPlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MatchGameRoomPlayerInfo, 8));
};


/** @param {!Array.<!proto.MatchGameRoomPlayerInfo>} value */
proto.MatchGameRoomConfig.prototype.setReservedplayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.MatchGameRoomPlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MatchGameRoomPlayerInfo}
 */
proto.MatchGameRoomConfig.prototype.addReservedplayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.MatchGameRoomPlayerInfo, opt_index);
};


proto.MatchGameRoomConfig.prototype.clearReservedplayersList = function() {
  this.setReservedplayersList([]);
};


/**
 * optional string matchId = 11;
 * @return {string}
 */
proto.MatchGameRoomConfig.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.MatchGameRoomConfig.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string password = 21;
 * @return {string}
 */
proto.MatchGameRoomConfig.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.MatchGameRoomConfig.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string greIrBinPath = 30;
 * @return {string}
 */
proto.MatchGameRoomConfig.prototype.getGreirbinpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.MatchGameRoomConfig.prototype.setGreirbinpath = function(value) {
  jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string greHostLoggerLevel = 31;
 * @return {string}
 */
proto.MatchGameRoomConfig.prototype.getGrehostloggerlevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.MatchGameRoomConfig.prototype.setGrehostloggerlevel = function(value) {
  jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional string greRecorderConfig = 32;
 * @return {string}
 */
proto.MatchGameRoomConfig.prototype.getGrerecorderconfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/** @param {string} value */
proto.MatchGameRoomConfig.prototype.setGrerecorderconfig = function(value) {
  jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * optional MatchConfig matchConfig = 12;
 * @return {?proto.MatchConfig}
 */
proto.MatchGameRoomConfig.prototype.getMatchconfig = function() {
  return /** @type{?proto.MatchConfig} */ (
    jspb.Message.getWrapperField(this, proto.MatchConfig, 12));
};


/** @param {?proto.MatchConfig|undefined} value */
proto.MatchGameRoomConfig.prototype.setMatchconfig = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.MatchGameRoomConfig.prototype.clearMatchconfig = function() {
  this.setMatchconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchGameRoomConfig.prototype.hasMatchconfig = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional GREConfiguration greConfig = 13;
 * @return {?proto.GREConfiguration}
 */
proto.MatchGameRoomConfig.prototype.getGreconfig = function() {
  return /** @type{?proto.GREConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.GREConfiguration, 13));
};


/** @param {?proto.GREConfiguration|undefined} value */
proto.MatchGameRoomConfig.prototype.setGreconfig = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.MatchGameRoomConfig.prototype.clearGreconfig = function() {
  this.setGreconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchGameRoomConfig.prototype.hasGreconfig = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool isVisible = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MatchGameRoomConfig.prototype.getIsvisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.MatchGameRoomConfig.prototype.setIsvisible = function(value) {
  jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional int32 joinRoomTimeoutSecs = 35;
 * @return {number}
 */
proto.MatchGameRoomConfig.prototype.getJoinroomtimeoutsecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/** @param {number} value */
proto.MatchGameRoomConfig.prototype.setJoinroomtimeoutsecs = function(value) {
  jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional int32 playerDisconnectTimeoutSecs = 36;
 * @return {number}
 */
proto.MatchGameRoomConfig.prototype.getPlayerdisconnecttimeoutsecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/** @param {number} value */
proto.MatchGameRoomConfig.prototype.setPlayerdisconnecttimeoutsecs = function(value) {
  jspb.Message.setProto3IntField(this, 36, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchGameRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MatchGameRoomInfo.repeatedFields_, null);
};
goog.inherits(proto.MatchGameRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchGameRoomInfo.displayName = 'proto.MatchGameRoomInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MatchGameRoomInfo.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchGameRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchGameRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchGameRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    interimmatchresultlistList: jspb.Message.toObjectList(msg.getInterimmatchresultlistList(),
    proto.ResultSpec.toObject, includeInstance),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.MatchGameRoomPlayerInfo.toObject, includeInstance),
    playermetricsList: jspb.Message.toObjectList(msg.getPlayermetricsList(),
    proto.MatchPlayerMetrics.toObject, includeInstance),
    matchcontrolleruri: jspb.Message.getFieldWithDefault(msg, 8, ""),
    matchclusteruri: jspb.Message.getFieldWithDefault(msg, 9, ""),
    creatorid: jspb.Message.getFieldWithDefault(msg, 21, ""),
    gameroomconfig: (f = msg.getGameroomconfig()) && proto.MatchGameRoomConfig.toObject(includeInstance, f),
    statetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    finalmatchresult: (f = msg.getFinalmatchresult()) && proto.FinalMatchResult.toObject(includeInstance, f),
    createdtimestamp: jspb.Message.getFieldWithDefault(msg, 10, 0),
    updatedtimestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    matchresultsavedtimestamp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    creatorclienttype: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchGameRoomInfo}
 */
proto.MatchGameRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchGameRoomInfo;
  return proto.MatchGameRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchGameRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchGameRoomInfo}
 */
proto.MatchGameRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameroomid(value);
      break;
    case 5:
      var value = new proto.ResultSpec;
      reader.readMessage(value,proto.ResultSpec.deserializeBinaryFromReader);
      msg.addInterimmatchresultlist(value);
      break;
    case 6:
      var value = new proto.MatchGameRoomPlayerInfo;
      reader.readMessage(value,proto.MatchGameRoomPlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 7:
      var value = new proto.MatchPlayerMetrics;
      reader.readMessage(value,proto.MatchPlayerMetrics.deserializeBinaryFromReader);
      msg.addPlayermetrics(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchcontrolleruri(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchclusteruri(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatorid(value);
      break;
    case 2:
      var value = new proto.MatchGameRoomConfig;
      reader.readMessage(value,proto.MatchGameRoomConfig.deserializeBinaryFromReader);
      msg.setGameroomconfig(value);
      break;
    case 3:
      var value = /** @type {!proto.MatchGameRoomStateType} */ (reader.readEnum());
      msg.setStatetype(value);
      break;
    case 4:
      var value = new proto.FinalMatchResult;
      reader.readMessage(value,proto.FinalMatchResult.deserializeBinaryFromReader);
      msg.setFinalmatchresult(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedtimestamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedtimestamp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchresultsavedtimestamp(value);
      break;
    case 20:
      var value = /** @type {!proto.ClientType} */ (reader.readEnum());
      msg.setCreatorclienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchGameRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchGameRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchGameRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInterimmatchresultlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ResultSpec.serializeBinaryToWriter
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.MatchGameRoomPlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayermetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.MatchPlayerMetrics.serializeBinaryToWriter
    );
  }
  f = message.getMatchcontrolleruri();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMatchclusteruri();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreatorid();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getGameroomconfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MatchGameRoomConfig.serializeBinaryToWriter
    );
  }
  f = message.getStatetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFinalmatchresult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.FinalMatchResult.serializeBinaryToWriter
    );
  }
  f = message.getCreatedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getUpdatedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getMatchresultsavedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getCreatorclienttype();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
};


/**
 * optional string gameRoomId = 1;
 * @return {string}
 */
proto.MatchGameRoomInfo.prototype.getGameroomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MatchGameRoomInfo.prototype.setGameroomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ResultSpec interimMatchResultList = 5;
 * @return {!Array.<!proto.ResultSpec>}
 */
proto.MatchGameRoomInfo.prototype.getInterimmatchresultlistList = function() {
  return /** @type{!Array.<!proto.ResultSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ResultSpec, 5));
};


/** @param {!Array.<!proto.ResultSpec>} value */
proto.MatchGameRoomInfo.prototype.setInterimmatchresultlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ResultSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ResultSpec}
 */
proto.MatchGameRoomInfo.prototype.addInterimmatchresultlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ResultSpec, opt_index);
};


proto.MatchGameRoomInfo.prototype.clearInterimmatchresultlistList = function() {
  this.setInterimmatchresultlistList([]);
};


/**
 * repeated MatchGameRoomPlayerInfo players = 6;
 * @return {!Array.<!proto.MatchGameRoomPlayerInfo>}
 */
proto.MatchGameRoomInfo.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.MatchGameRoomPlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MatchGameRoomPlayerInfo, 6));
};


/** @param {!Array.<!proto.MatchGameRoomPlayerInfo>} value */
proto.MatchGameRoomInfo.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.MatchGameRoomPlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MatchGameRoomPlayerInfo}
 */
proto.MatchGameRoomInfo.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.MatchGameRoomPlayerInfo, opt_index);
};


proto.MatchGameRoomInfo.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * repeated MatchPlayerMetrics playerMetrics = 7;
 * @return {!Array.<!proto.MatchPlayerMetrics>}
 */
proto.MatchGameRoomInfo.prototype.getPlayermetricsList = function() {
  return /** @type{!Array.<!proto.MatchPlayerMetrics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MatchPlayerMetrics, 7));
};


/** @param {!Array.<!proto.MatchPlayerMetrics>} value */
proto.MatchGameRoomInfo.prototype.setPlayermetricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.MatchPlayerMetrics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MatchPlayerMetrics}
 */
proto.MatchGameRoomInfo.prototype.addPlayermetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.MatchPlayerMetrics, opt_index);
};


proto.MatchGameRoomInfo.prototype.clearPlayermetricsList = function() {
  this.setPlayermetricsList([]);
};


/**
 * optional string matchControllerUri = 8;
 * @return {string}
 */
proto.MatchGameRoomInfo.prototype.getMatchcontrolleruri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.MatchGameRoomInfo.prototype.setMatchcontrolleruri = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string matchClusterUri = 9;
 * @return {string}
 */
proto.MatchGameRoomInfo.prototype.getMatchclusteruri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.MatchGameRoomInfo.prototype.setMatchclusteruri = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string creatorId = 21;
 * @return {string}
 */
proto.MatchGameRoomInfo.prototype.getCreatorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.MatchGameRoomInfo.prototype.setCreatorid = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional MatchGameRoomConfig gameRoomConfig = 2;
 * @return {?proto.MatchGameRoomConfig}
 */
proto.MatchGameRoomInfo.prototype.getGameroomconfig = function() {
  return /** @type{?proto.MatchGameRoomConfig} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomConfig, 2));
};


/** @param {?proto.MatchGameRoomConfig|undefined} value */
proto.MatchGameRoomInfo.prototype.setGameroomconfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MatchGameRoomInfo.prototype.clearGameroomconfig = function() {
  this.setGameroomconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchGameRoomInfo.prototype.hasGameroomconfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MatchGameRoomStateType stateType = 3;
 * @return {!proto.MatchGameRoomStateType}
 */
proto.MatchGameRoomInfo.prototype.getStatetype = function() {
  return /** @type {!proto.MatchGameRoomStateType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.MatchGameRoomStateType} value */
proto.MatchGameRoomInfo.prototype.setStatetype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional FinalMatchResult finalMatchResult = 4;
 * @return {?proto.FinalMatchResult}
 */
proto.MatchGameRoomInfo.prototype.getFinalmatchresult = function() {
  return /** @type{?proto.FinalMatchResult} */ (
    jspb.Message.getWrapperField(this, proto.FinalMatchResult, 4));
};


/** @param {?proto.FinalMatchResult|undefined} value */
proto.MatchGameRoomInfo.prototype.setFinalmatchresult = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MatchGameRoomInfo.prototype.clearFinalmatchresult = function() {
  this.setFinalmatchresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchGameRoomInfo.prototype.hasFinalmatchresult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 createdTimestamp = 10;
 * @return {number}
 */
proto.MatchGameRoomInfo.prototype.getCreatedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.MatchGameRoomInfo.prototype.setCreatedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 updatedTimestamp = 11;
 * @return {number}
 */
proto.MatchGameRoomInfo.prototype.getUpdatedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.MatchGameRoomInfo.prototype.setUpdatedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 matchResultSavedTimestamp = 12;
 * @return {number}
 */
proto.MatchGameRoomInfo.prototype.getMatchresultsavedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.MatchGameRoomInfo.prototype.setMatchresultsavedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional ClientType creatorClientType = 20;
 * @return {!proto.ClientType}
 */
proto.MatchGameRoomInfo.prototype.getCreatorclienttype = function() {
  return /** @type {!proto.ClientType} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {!proto.ClientType} value */
proto.MatchGameRoomInfo.prototype.setCreatorclienttype = function(value) {
  jspb.Message.setProto3EnumField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchGameRoomOpponentConnectionStateChangedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchGameRoomOpponentConnectionStateChangedEvent.displayName = 'proto.MatchGameRoomOpponentConnectionStateChangedEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchGameRoomOpponentConnectionStateChangedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchGameRoomOpponentConnectionStateChangedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchGameRoomOpponentConnectionStateChangedEvent}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchGameRoomOpponentConnectionStateChangedEvent;
  return proto.MatchGameRoomOpponentConnectionStateChangedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchGameRoomOpponentConnectionStateChangedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchGameRoomOpponentConnectionStateChangedEvent}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSystemseatid(value);
      break;
    case 3:
      var value = /** @type {!proto.ConnectionStateChangedEventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchGameRoomOpponentConnectionStateChangedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchGameRoomOpponentConnectionStateChangedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional string matchId = 1;
 * @return {string}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 systemSeatId = 2;
 * @return {number}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ConnectionStateChangedEventType eventType = 3;
 * @return {!proto.ConnectionStateChangedEventType}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.getEventtype = function() {
  return /** @type {!proto.ConnectionStateChangedEventType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ConnectionStateChangedEventType} value */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.setEventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 timestamp = 10;
 * @return {number}
 */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.MatchGameRoomOpponentConnectionStateChangedEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchGameRoomPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchGameRoomPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchGameRoomPlayerInfo.displayName = 'proto.MatchGameRoomPlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchGameRoomPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchGameRoomPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchGameRoomPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    courseid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    deckid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    clientauthtoken: jspb.Message.getFieldWithDefault(msg, 12, ""),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    connectioninfo: (f = msg.getConnectioninfo()) && proto.UserConnectionInfo.toObject(includeInstance, f),
    jointimestamp: jspb.Message.getFieldWithDefault(msg, 20, 0),
    inactivitytimeouttimestamp: jspb.Message.getFieldWithDefault(msg, 21, 0),
    disconnecttimeouttimestamp: jspb.Message.getFieldWithDefault(msg, 22, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchGameRoomPlayerInfo}
 */
proto.MatchGameRoomPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchGameRoomPlayerInfo;
  return proto.MatchGameRoomPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchGameRoomPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchGameRoomPlayerInfo}
 */
proto.MatchGameRoomPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCourseid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeckid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientauthtoken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSystemseatid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 5:
      var value = new proto.UserConnectionInfo;
      reader.readMessage(value,proto.UserConnectionInfo.deserializeBinaryFromReader);
      msg.setConnectioninfo(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJointimestamp(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInactivitytimeouttimestamp(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDisconnecttimeouttimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchGameRoomPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchGameRoomPlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchGameRoomPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCourseid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDeckid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getClientauthtoken();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getConnectioninfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.UserConnectionInfo.serializeBinaryToWriter
    );
  }
  f = message.getJointimestamp();
  if (f !== 0) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = message.getInactivitytimeouttimestamp();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = message.getDisconnecttimeouttimestamp();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.MatchGameRoomPlayerInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MatchGameRoomPlayerInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerName = 2;
 * @return {string}
 */
proto.MatchGameRoomPlayerInfo.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MatchGameRoomPlayerInfo.prototype.setPlayername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string courseId = 10;
 * @return {string}
 */
proto.MatchGameRoomPlayerInfo.prototype.getCourseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.MatchGameRoomPlayerInfo.prototype.setCourseid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string deckId = 11;
 * @return {string}
 */
proto.MatchGameRoomPlayerInfo.prototype.getDeckid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.MatchGameRoomPlayerInfo.prototype.setDeckid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string clientAuthToken = 12;
 * @return {string}
 */
proto.MatchGameRoomPlayerInfo.prototype.getClientauthtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.MatchGameRoomPlayerInfo.prototype.setClientauthtoken = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int32 systemSeatId = 3;
 * @return {number}
 */
proto.MatchGameRoomPlayerInfo.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MatchGameRoomPlayerInfo.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 teamId = 4;
 * @return {number}
 */
proto.MatchGameRoomPlayerInfo.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MatchGameRoomPlayerInfo.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional UserConnectionInfo connectionInfo = 5;
 * @return {?proto.UserConnectionInfo}
 */
proto.MatchGameRoomPlayerInfo.prototype.getConnectioninfo = function() {
  return /** @type{?proto.UserConnectionInfo} */ (
    jspb.Message.getWrapperField(this, proto.UserConnectionInfo, 5));
};


/** @param {?proto.UserConnectionInfo|undefined} value */
proto.MatchGameRoomPlayerInfo.prototype.setConnectioninfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.MatchGameRoomPlayerInfo.prototype.clearConnectioninfo = function() {
  this.setConnectioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchGameRoomPlayerInfo.prototype.hasConnectioninfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 joinTimestamp = 20;
 * @return {number}
 */
proto.MatchGameRoomPlayerInfo.prototype.getJointimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.MatchGameRoomPlayerInfo.prototype.setJointimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int64 inactivityTimeoutTimestamp = 21;
 * @return {number}
 */
proto.MatchGameRoomPlayerInfo.prototype.getInactivitytimeouttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.MatchGameRoomPlayerInfo.prototype.setInactivitytimeouttimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int64 disconnectTimeoutTimestamp = 22;
 * @return {number}
 */
proto.MatchGameRoomPlayerInfo.prototype.getDisconnecttimeouttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.MatchGameRoomPlayerInfo.prototype.setDisconnecttimeouttimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchGameRoomStateChangedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchGameRoomStateChangedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchGameRoomStateChangedEvent.displayName = 'proto.MatchGameRoomStateChangedEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchGameRoomStateChangedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchGameRoomStateChangedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchGameRoomStateChangedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomStateChangedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameroominfo: (f = msg.getGameroominfo()) && proto.MatchGameRoomInfo.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchGameRoomStateChangedEvent}
 */
proto.MatchGameRoomStateChangedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchGameRoomStateChangedEvent;
  return proto.MatchGameRoomStateChangedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchGameRoomStateChangedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchGameRoomStateChangedEvent}
 */
proto.MatchGameRoomStateChangedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MatchGameRoomInfo;
      reader.readMessage(value,proto.MatchGameRoomInfo.deserializeBinaryFromReader);
      msg.setGameroominfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchGameRoomStateChangedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchGameRoomStateChangedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchGameRoomStateChangedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchGameRoomStateChangedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameroominfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MatchGameRoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional MatchGameRoomInfo gameRoomInfo = 1;
 * @return {?proto.MatchGameRoomInfo}
 */
proto.MatchGameRoomStateChangedEvent.prototype.getGameroominfo = function() {
  return /** @type{?proto.MatchGameRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomInfo, 1));
};


/** @param {?proto.MatchGameRoomInfo|undefined} value */
proto.MatchGameRoomStateChangedEvent.prototype.setGameroominfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MatchGameRoomStateChangedEvent.prototype.clearGameroominfo = function() {
  this.setGameroominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchGameRoomStateChangedEvent.prototype.hasGameroominfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.MatchGameRoomStateChangedEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MatchGameRoomStateChangedEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchPlayerMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MatchPlayerMetrics.repeatedFields_, null);
};
goog.inherits(proto.MatchPlayerMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchPlayerMetrics.displayName = 'proto.MatchPlayerMetrics';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MatchPlayerMetrics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchPlayerMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchPlayerMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchPlayerMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchPlayerMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.PlayerMetricKeyValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchPlayerMetrics}
 */
proto.MatchPlayerMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchPlayerMetrics;
  return proto.MatchPlayerMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchPlayerMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchPlayerMetrics}
 */
proto.MatchPlayerMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.PlayerMetricKeyValuePair;
      reader.readMessage(value,proto.PlayerMetricKeyValuePair.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchPlayerMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchPlayerMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchPlayerMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchPlayerMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PlayerMetricKeyValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.MatchPlayerMetrics.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MatchPlayerMetrics.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PlayerMetricKeyValuePair metrics = 2;
 * @return {!Array.<!proto.PlayerMetricKeyValuePair>}
 */
proto.MatchPlayerMetrics.prototype.getMetricsList = function() {
  return /** @type{!Array.<!proto.PlayerMetricKeyValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerMetricKeyValuePair, 2));
};


/** @param {!Array.<!proto.PlayerMetricKeyValuePair>} value */
proto.MatchPlayerMetrics.prototype.setMetricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PlayerMetricKeyValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerMetricKeyValuePair}
 */
proto.MatchPlayerMetrics.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PlayerMetricKeyValuePair, opt_index);
};


proto.MatchPlayerMetrics.prototype.clearMetricsList = function() {
  this.setMetricsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchResultSaved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchResultSaved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchResultSaved.displayName = 'proto.MatchResultSaved';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchResultSaved.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchResultSaved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchResultSaved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchResultSaved.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchResultSaved}
 */
proto.MatchResultSaved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchResultSaved;
  return proto.MatchResultSaved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchResultSaved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchResultSaved}
 */
proto.MatchResultSaved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchResultSaved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchResultSaved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchResultSaved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchResultSaved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional string matchId = 1;
 * @return {string}
 */
proto.MatchResultSaved.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MatchResultSaved.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp = 10;
 * @return {number}
 */
proto.MatchResultSaved.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.MatchResultSaved.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchServiceError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchServiceError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchServiceError.displayName = 'proto.MatchServiceError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchServiceError.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchServiceError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchServiceError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchServiceError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    errorcode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchServiceError}
 */
proto.MatchServiceError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchServiceError;
  return proto.MatchServiceError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchServiceError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchServiceError}
 */
proto.MatchServiceError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 2:
      var value = /** @type {!proto.MatchServiceErrorCode} */ (reader.readEnum());
      msg.setErrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchServiceError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchServiceError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchServiceError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchServiceError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getErrorcode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.MatchServiceError.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MatchServiceError.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional MatchServiceErrorCode errorCode = 2;
 * @return {!proto.MatchServiceErrorCode}
 */
proto.MatchServiceError.prototype.getErrorcode = function() {
  return /** @type {!proto.MatchServiceErrorCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.MatchServiceErrorCode} value */
proto.MatchServiceError.prototype.setErrorcode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchServiceToClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.MatchServiceToClientMessage.oneofGroups_);
};
goog.inherits(proto.MatchServiceToClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchServiceToClientMessage.displayName = 'proto.MatchServiceToClientMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.MatchServiceToClientMessage.oneofGroups_ = [[7,8,9,10,11,12,100,101,110,111,200,201,210,211,240,241,1000]];

/**
 * @enum {number}
 */
proto.MatchServiceToClientMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ERROR: 7,
  GRETOCLIENTEVENT: 8,
  MATCHGAMEROOMSTATECHANGEDEVENT: 9,
  MATCHCONTROLLERSTATECHANGEDEVENT: 10,
  MATCHCONTROLLERHEALTHREPORT: 11,
  OPPONENTCONNECTIONSTATECHANGEDEVENT: 12,
  AUTHENTICATERESPONSE: 100,
  SERVICEINFORESPONSE: 101,
  GETSETTINGSRESPONSE: 110,
  SETSETTINGSRESPONSE: 111,
  CREATEMATCHGAMEROOMRESPONSE: 200,
  CREATEMATCHGAMEROOMRESPONSEV2: 201,
  JOINMATCHGAMEROOMRESPONSE: 210,
  JOINMATCHGAMEROOMRESPONSEV2: 211,
  GETGAMEROOMIDSRESPONSE: 240,
  GETGAMEROOMINFORESPONSE: 241,
  ECHORESPONSE: 1000
};

/**
 * @return {proto.MatchServiceToClientMessage.MessageCase}
 */
proto.MatchServiceToClientMessage.prototype.getMessageCase = function() {
  return /** @type {proto.MatchServiceToClientMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.MatchServiceToClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchServiceToClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchServiceToClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchServiceToClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchServiceToClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    error: (f = msg.getError()) && proto.LobbyError.toObject(includeInstance, f),
    gretoclientevent: (f = msg.getGretoclientevent()) && proto.GreToClientEvent.toObject(includeInstance, f),
    matchgameroomstatechangedevent: (f = msg.getMatchgameroomstatechangedevent()) && proto.MatchGameRoomStateChangedEvent.toObject(includeInstance, f),
    matchcontrollerstatechangedevent: (f = msg.getMatchcontrollerstatechangedevent()) && proto.MatchControllerStateChangedEvent.toObject(includeInstance, f),
    matchcontrollerhealthreport: (f = msg.getMatchcontrollerhealthreport()) && proto.MatchControllerHealthReport.toObject(includeInstance, f),
    opponentconnectionstatechangedevent: (f = msg.getOpponentconnectionstatechangedevent()) && proto.MatchGameRoomOpponentConnectionStateChangedEvent.toObject(includeInstance, f),
    authenticateresponse: (f = msg.getAuthenticateresponse()) && proto.AuthenticateResponse.toObject(includeInstance, f),
    serviceinforesponse: (f = msg.getServiceinforesponse()) && proto.LobbyServiceInfo.toObject(includeInstance, f),
    getsettingsresponse: (f = msg.getGetsettingsresponse()) && proto.MatchControllerGetSettingsResponse.toObject(includeInstance, f),
    setsettingsresponse: (f = msg.getSetsettingsresponse()) && proto.MatchControllerSetSettingsResponse.toObject(includeInstance, f),
    creatematchgameroomresponse: (f = msg.getCreatematchgameroomresponse()) && proto.CreateMatchGameRoomResponse.toObject(includeInstance, f),
    creatematchgameroomresponsev2: (f = msg.getCreatematchgameroomresponsev2()) && proto.CreateMatchGameRoomResponseV2.toObject(includeInstance, f),
    joinmatchgameroomresponse: (f = msg.getJoinmatchgameroomresponse()) && proto.JoinMatchGameRoomResponse.toObject(includeInstance, f),
    joinmatchgameroomresponsev2: (f = msg.getJoinmatchgameroomresponsev2()) && proto.JoinMatchGameRoomResponseV2.toObject(includeInstance, f),
    getgameroomidsresponse: (f = msg.getGetgameroomidsresponse()) && proto.GetGameRoomIdsResponse.toObject(includeInstance, f),
    getgameroominforesponse: (f = msg.getGetgameroominforesponse()) && proto.GetGameRoomInfoResponse.toObject(includeInstance, f),
    echoresponse: (f = msg.getEchoresponse()) && proto.EchoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchServiceToClientMessage}
 */
proto.MatchServiceToClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchServiceToClientMessage;
  return proto.MatchServiceToClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchServiceToClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchServiceToClientMessage}
 */
proto.MatchServiceToClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = new proto.LobbyError;
      reader.readMessage(value,proto.LobbyError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 8:
      var value = new proto.GreToClientEvent;
      reader.readMessage(value,proto.GreToClientEvent.deserializeBinaryFromReader);
      msg.setGretoclientevent(value);
      break;
    case 9:
      var value = new proto.MatchGameRoomStateChangedEvent;
      reader.readMessage(value,proto.MatchGameRoomStateChangedEvent.deserializeBinaryFromReader);
      msg.setMatchgameroomstatechangedevent(value);
      break;
    case 10:
      var value = new proto.MatchControllerStateChangedEvent;
      reader.readMessage(value,proto.MatchControllerStateChangedEvent.deserializeBinaryFromReader);
      msg.setMatchcontrollerstatechangedevent(value);
      break;
    case 11:
      var value = new proto.MatchControllerHealthReport;
      reader.readMessage(value,proto.MatchControllerHealthReport.deserializeBinaryFromReader);
      msg.setMatchcontrollerhealthreport(value);
      break;
    case 12:
      var value = new proto.MatchGameRoomOpponentConnectionStateChangedEvent;
      reader.readMessage(value,proto.MatchGameRoomOpponentConnectionStateChangedEvent.deserializeBinaryFromReader);
      msg.setOpponentconnectionstatechangedevent(value);
      break;
    case 100:
      var value = new proto.AuthenticateResponse;
      reader.readMessage(value,proto.AuthenticateResponse.deserializeBinaryFromReader);
      msg.setAuthenticateresponse(value);
      break;
    case 101:
      var value = new proto.LobbyServiceInfo;
      reader.readMessage(value,proto.LobbyServiceInfo.deserializeBinaryFromReader);
      msg.setServiceinforesponse(value);
      break;
    case 110:
      var value = new proto.MatchControllerGetSettingsResponse;
      reader.readMessage(value,proto.MatchControllerGetSettingsResponse.deserializeBinaryFromReader);
      msg.setGetsettingsresponse(value);
      break;
    case 111:
      var value = new proto.MatchControllerSetSettingsResponse;
      reader.readMessage(value,proto.MatchControllerSetSettingsResponse.deserializeBinaryFromReader);
      msg.setSetsettingsresponse(value);
      break;
    case 200:
      var value = new proto.CreateMatchGameRoomResponse;
      reader.readMessage(value,proto.CreateMatchGameRoomResponse.deserializeBinaryFromReader);
      msg.setCreatematchgameroomresponse(value);
      break;
    case 201:
      var value = new proto.CreateMatchGameRoomResponseV2;
      reader.readMessage(value,proto.CreateMatchGameRoomResponseV2.deserializeBinaryFromReader);
      msg.setCreatematchgameroomresponsev2(value);
      break;
    case 210:
      var value = new proto.JoinMatchGameRoomResponse;
      reader.readMessage(value,proto.JoinMatchGameRoomResponse.deserializeBinaryFromReader);
      msg.setJoinmatchgameroomresponse(value);
      break;
    case 211:
      var value = new proto.JoinMatchGameRoomResponseV2;
      reader.readMessage(value,proto.JoinMatchGameRoomResponseV2.deserializeBinaryFromReader);
      msg.setJoinmatchgameroomresponsev2(value);
      break;
    case 240:
      var value = new proto.GetGameRoomIdsResponse;
      reader.readMessage(value,proto.GetGameRoomIdsResponse.deserializeBinaryFromReader);
      msg.setGetgameroomidsresponse(value);
      break;
    case 241:
      var value = new proto.GetGameRoomInfoResponse;
      reader.readMessage(value,proto.GetGameRoomInfoResponse.deserializeBinaryFromReader);
      msg.setGetgameroominforesponse(value);
      break;
    case 1000:
      var value = new proto.EchoResponse;
      reader.readMessage(value,proto.EchoResponse.deserializeBinaryFromReader);
      msg.setEchoresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchServiceToClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchServiceToClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchServiceToClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchServiceToClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.LobbyError.serializeBinaryToWriter
    );
  }
  f = message.getGretoclientevent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.GreToClientEvent.serializeBinaryToWriter
    );
  }
  f = message.getMatchgameroomstatechangedevent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.MatchGameRoomStateChangedEvent.serializeBinaryToWriter
    );
  }
  f = message.getMatchcontrollerstatechangedevent();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.MatchControllerStateChangedEvent.serializeBinaryToWriter
    );
  }
  f = message.getMatchcontrollerhealthreport();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.MatchControllerHealthReport.serializeBinaryToWriter
    );
  }
  f = message.getOpponentconnectionstatechangedevent();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.MatchGameRoomOpponentConnectionStateChangedEvent.serializeBinaryToWriter
    );
  }
  f = message.getAuthenticateresponse();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.AuthenticateResponse.serializeBinaryToWriter
    );
  }
  f = message.getServiceinforesponse();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.LobbyServiceInfo.serializeBinaryToWriter
    );
  }
  f = message.getGetsettingsresponse();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.MatchControllerGetSettingsResponse.serializeBinaryToWriter
    );
  }
  f = message.getSetsettingsresponse();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.MatchControllerSetSettingsResponse.serializeBinaryToWriter
    );
  }
  f = message.getCreatematchgameroomresponse();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.CreateMatchGameRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getCreatematchgameroomresponsev2();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.CreateMatchGameRoomResponseV2.serializeBinaryToWriter
    );
  }
  f = message.getJoinmatchgameroomresponse();
  if (f != null) {
    writer.writeMessage(
      210,
      f,
      proto.JoinMatchGameRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getJoinmatchgameroomresponsev2();
  if (f != null) {
    writer.writeMessage(
      211,
      f,
      proto.JoinMatchGameRoomResponseV2.serializeBinaryToWriter
    );
  }
  f = message.getGetgameroomidsresponse();
  if (f != null) {
    writer.writeMessage(
      240,
      f,
      proto.GetGameRoomIdsResponse.serializeBinaryToWriter
    );
  }
  f = message.getGetgameroominforesponse();
  if (f != null) {
    writer.writeMessage(
      241,
      f,
      proto.GetGameRoomInfoResponse.serializeBinaryToWriter
    );
  }
  f = message.getEchoresponse();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.EchoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transactionId = 1;
 * @return {string}
 */
proto.MatchServiceToClientMessage.prototype.getTransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MatchServiceToClientMessage.prototype.setTransactionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 requestId = 3;
 * @return {number}
 */
proto.MatchServiceToClientMessage.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MatchServiceToClientMessage.prototype.setRequestid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.MatchServiceToClientMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MatchServiceToClientMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional LobbyError error = 7;
 * @return {?proto.LobbyError}
 */
proto.MatchServiceToClientMessage.prototype.getError = function() {
  return /** @type{?proto.LobbyError} */ (
    jspb.Message.getWrapperField(this, proto.LobbyError, 7));
};


/** @param {?proto.LobbyError|undefined} value */
proto.MatchServiceToClientMessage.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasError = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional GreToClientEvent greToClientEvent = 8;
 * @return {?proto.GreToClientEvent}
 */
proto.MatchServiceToClientMessage.prototype.getGretoclientevent = function() {
  return /** @type{?proto.GreToClientEvent} */ (
    jspb.Message.getWrapperField(this, proto.GreToClientEvent, 8));
};


/** @param {?proto.GreToClientEvent|undefined} value */
proto.MatchServiceToClientMessage.prototype.setGretoclientevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearGretoclientevent = function() {
  this.setGretoclientevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasGretoclientevent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MatchGameRoomStateChangedEvent matchGameRoomStateChangedEvent = 9;
 * @return {?proto.MatchGameRoomStateChangedEvent}
 */
proto.MatchServiceToClientMessage.prototype.getMatchgameroomstatechangedevent = function() {
  return /** @type{?proto.MatchGameRoomStateChangedEvent} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomStateChangedEvent, 9));
};


/** @param {?proto.MatchGameRoomStateChangedEvent|undefined} value */
proto.MatchServiceToClientMessage.prototype.setMatchgameroomstatechangedevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearMatchgameroomstatechangedevent = function() {
  this.setMatchgameroomstatechangedevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasMatchgameroomstatechangedevent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MatchControllerStateChangedEvent matchControllerStateChangedEvent = 10;
 * @return {?proto.MatchControllerStateChangedEvent}
 */
proto.MatchServiceToClientMessage.prototype.getMatchcontrollerstatechangedevent = function() {
  return /** @type{?proto.MatchControllerStateChangedEvent} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerStateChangedEvent, 10));
};


/** @param {?proto.MatchControllerStateChangedEvent|undefined} value */
proto.MatchServiceToClientMessage.prototype.setMatchcontrollerstatechangedevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearMatchcontrollerstatechangedevent = function() {
  this.setMatchcontrollerstatechangedevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasMatchcontrollerstatechangedevent = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MatchControllerHealthReport matchControllerHealthReport = 11;
 * @return {?proto.MatchControllerHealthReport}
 */
proto.MatchServiceToClientMessage.prototype.getMatchcontrollerhealthreport = function() {
  return /** @type{?proto.MatchControllerHealthReport} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerHealthReport, 11));
};


/** @param {?proto.MatchControllerHealthReport|undefined} value */
proto.MatchServiceToClientMessage.prototype.setMatchcontrollerhealthreport = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearMatchcontrollerhealthreport = function() {
  this.setMatchcontrollerhealthreport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasMatchcontrollerhealthreport = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional MatchGameRoomOpponentConnectionStateChangedEvent opponentConnectionStateChangedEvent = 12;
 * @return {?proto.MatchGameRoomOpponentConnectionStateChangedEvent}
 */
proto.MatchServiceToClientMessage.prototype.getOpponentconnectionstatechangedevent = function() {
  return /** @type{?proto.MatchGameRoomOpponentConnectionStateChangedEvent} */ (
    jspb.Message.getWrapperField(this, proto.MatchGameRoomOpponentConnectionStateChangedEvent, 12));
};


/** @param {?proto.MatchGameRoomOpponentConnectionStateChangedEvent|undefined} value */
proto.MatchServiceToClientMessage.prototype.setOpponentconnectionstatechangedevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearOpponentconnectionstatechangedevent = function() {
  this.setOpponentconnectionstatechangedevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasOpponentconnectionstatechangedevent = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional AuthenticateResponse authenticateResponse = 100;
 * @return {?proto.AuthenticateResponse}
 */
proto.MatchServiceToClientMessage.prototype.getAuthenticateresponse = function() {
  return /** @type{?proto.AuthenticateResponse} */ (
    jspb.Message.getWrapperField(this, proto.AuthenticateResponse, 100));
};


/** @param {?proto.AuthenticateResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setAuthenticateresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearAuthenticateresponse = function() {
  this.setAuthenticateresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasAuthenticateresponse = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional LobbyServiceInfo serviceInfoResponse = 101;
 * @return {?proto.LobbyServiceInfo}
 */
proto.MatchServiceToClientMessage.prototype.getServiceinforesponse = function() {
  return /** @type{?proto.LobbyServiceInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyServiceInfo, 101));
};


/** @param {?proto.LobbyServiceInfo|undefined} value */
proto.MatchServiceToClientMessage.prototype.setServiceinforesponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearServiceinforesponse = function() {
  this.setServiceinforesponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasServiceinforesponse = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional MatchControllerGetSettingsResponse getSettingsResponse = 110;
 * @return {?proto.MatchControllerGetSettingsResponse}
 */
proto.MatchServiceToClientMessage.prototype.getGetsettingsresponse = function() {
  return /** @type{?proto.MatchControllerGetSettingsResponse} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerGetSettingsResponse, 110));
};


/** @param {?proto.MatchControllerGetSettingsResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setGetsettingsresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 110, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearGetsettingsresponse = function() {
  this.setGetsettingsresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasGetsettingsresponse = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional MatchControllerSetSettingsResponse setSettingsResponse = 111;
 * @return {?proto.MatchControllerSetSettingsResponse}
 */
proto.MatchServiceToClientMessage.prototype.getSetsettingsresponse = function() {
  return /** @type{?proto.MatchControllerSetSettingsResponse} */ (
    jspb.Message.getWrapperField(this, proto.MatchControllerSetSettingsResponse, 111));
};


/** @param {?proto.MatchControllerSetSettingsResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setSetsettingsresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 111, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearSetsettingsresponse = function() {
  this.setSetsettingsresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasSetsettingsresponse = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional CreateMatchGameRoomResponse createMatchGameRoomResponse = 200;
 * @return {?proto.CreateMatchGameRoomResponse}
 */
proto.MatchServiceToClientMessage.prototype.getCreatematchgameroomresponse = function() {
  return /** @type{?proto.CreateMatchGameRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.CreateMatchGameRoomResponse, 200));
};


/** @param {?proto.CreateMatchGameRoomResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setCreatematchgameroomresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 200, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearCreatematchgameroomresponse = function() {
  this.setCreatematchgameroomresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasCreatematchgameroomresponse = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional CreateMatchGameRoomResponseV2 createMatchGameRoomResponseV2 = 201;
 * @return {?proto.CreateMatchGameRoomResponseV2}
 */
proto.MatchServiceToClientMessage.prototype.getCreatematchgameroomresponsev2 = function() {
  return /** @type{?proto.CreateMatchGameRoomResponseV2} */ (
    jspb.Message.getWrapperField(this, proto.CreateMatchGameRoomResponseV2, 201));
};


/** @param {?proto.CreateMatchGameRoomResponseV2|undefined} value */
proto.MatchServiceToClientMessage.prototype.setCreatematchgameroomresponsev2 = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearCreatematchgameroomresponsev2 = function() {
  this.setCreatematchgameroomresponsev2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasCreatematchgameroomresponsev2 = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional JoinMatchGameRoomResponse joinMatchGameRoomResponse = 210;
 * @return {?proto.JoinMatchGameRoomResponse}
 */
proto.MatchServiceToClientMessage.prototype.getJoinmatchgameroomresponse = function() {
  return /** @type{?proto.JoinMatchGameRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.JoinMatchGameRoomResponse, 210));
};


/** @param {?proto.JoinMatchGameRoomResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setJoinmatchgameroomresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 210, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearJoinmatchgameroomresponse = function() {
  this.setJoinmatchgameroomresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasJoinmatchgameroomresponse = function() {
  return jspb.Message.getField(this, 210) != null;
};


/**
 * optional JoinMatchGameRoomResponseV2 joinMatchGameRoomResponseV2 = 211;
 * @return {?proto.JoinMatchGameRoomResponseV2}
 */
proto.MatchServiceToClientMessage.prototype.getJoinmatchgameroomresponsev2 = function() {
  return /** @type{?proto.JoinMatchGameRoomResponseV2} */ (
    jspb.Message.getWrapperField(this, proto.JoinMatchGameRoomResponseV2, 211));
};


/** @param {?proto.JoinMatchGameRoomResponseV2|undefined} value */
proto.MatchServiceToClientMessage.prototype.setJoinmatchgameroomresponsev2 = function(value) {
  jspb.Message.setOneofWrapperField(this, 211, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearJoinmatchgameroomresponsev2 = function() {
  this.setJoinmatchgameroomresponsev2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasJoinmatchgameroomresponsev2 = function() {
  return jspb.Message.getField(this, 211) != null;
};


/**
 * optional GetGameRoomIdsResponse getGameRoomIdsResponse = 240;
 * @return {?proto.GetGameRoomIdsResponse}
 */
proto.MatchServiceToClientMessage.prototype.getGetgameroomidsresponse = function() {
  return /** @type{?proto.GetGameRoomIdsResponse} */ (
    jspb.Message.getWrapperField(this, proto.GetGameRoomIdsResponse, 240));
};


/** @param {?proto.GetGameRoomIdsResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setGetgameroomidsresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 240, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearGetgameroomidsresponse = function() {
  this.setGetgameroomidsresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasGetgameroomidsresponse = function() {
  return jspb.Message.getField(this, 240) != null;
};


/**
 * optional GetGameRoomInfoResponse getGameRoomInfoResponse = 241;
 * @return {?proto.GetGameRoomInfoResponse}
 */
proto.MatchServiceToClientMessage.prototype.getGetgameroominforesponse = function() {
  return /** @type{?proto.GetGameRoomInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.GetGameRoomInfoResponse, 241));
};


/** @param {?proto.GetGameRoomInfoResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setGetgameroominforesponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 241, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearGetgameroominforesponse = function() {
  this.setGetgameroominforesponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasGetgameroominforesponse = function() {
  return jspb.Message.getField(this, 241) != null;
};


/**
 * optional EchoResponse echoResponse = 1000;
 * @return {?proto.EchoResponse}
 */
proto.MatchServiceToClientMessage.prototype.getEchoresponse = function() {
  return /** @type{?proto.EchoResponse} */ (
    jspb.Message.getWrapperField(this, proto.EchoResponse, 1000));
};


/** @param {?proto.EchoResponse|undefined} value */
proto.MatchServiceToClientMessage.prototype.setEchoresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 1000, proto.MatchServiceToClientMessage.oneofGroups_[0], value);
};


proto.MatchServiceToClientMessage.prototype.clearEchoresponse = function() {
  this.setEchoresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MatchServiceToClientMessage.prototype.hasEchoresponse = function() {
  return jspb.Message.getField(this, 1000) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ModalOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ModalOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ModalOption.displayName = 'proto.ModalOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ModalOption.prototype.toObject = function(opt_includeInstance) {
  return proto.ModalOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ModalOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModalOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    grpid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ModalOption}
 */
proto.ModalOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ModalOption;
  return proto.ModalOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ModalOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ModalOption}
 */
proto.ModalOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ModalOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ModalOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ModalOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModalOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrpid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 grpId = 1;
 * @return {number}
 */
proto.ModalOption.prototype.getGrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ModalOption.prototype.setGrpid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ModalReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ModalReq.repeatedFields_, null);
};
goog.inherits(proto.ModalReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ModalReq.displayName = 'proto.ModalReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ModalReq.repeatedFields_ = [1,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ModalReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ModalReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ModalReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModalReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    modaloptionsList: jspb.Message.toObjectList(msg.getModaloptionsList(),
    proto.ModalOption.toObject, includeInstance),
    excludedoptionsList: jspb.Message.toObjectList(msg.getExcludedoptionsList(),
    proto.ModalOption.toObject, includeInstance),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minsel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxsel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    repeatedselectallowed: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ModalReq}
 */
proto.ModalReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ModalReq;
  return proto.ModalReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ModalReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ModalReq}
 */
proto.ModalReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ModalOption;
      reader.readMessage(value,proto.ModalOption.deserializeBinaryFromReader);
      msg.addModaloptions(value);
      break;
    case 6:
      var value = new proto.ModalOption;
      reader.readMessage(value,proto.ModalOption.deserializeBinaryFromReader);
      msg.addExcludedoptions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinsel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxsel(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRepeatedselectallowed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ModalReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ModalReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ModalReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModalReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModaloptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ModalOption.serializeBinaryToWriter
    );
  }
  f = message.getExcludedoptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ModalOption.serializeBinaryToWriter
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMinsel();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxsel();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRepeatedselectallowed();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated ModalOption modalOptions = 1;
 * @return {!Array.<!proto.ModalOption>}
 */
proto.ModalReq.prototype.getModaloptionsList = function() {
  return /** @type{!Array.<!proto.ModalOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ModalOption, 1));
};


/** @param {!Array.<!proto.ModalOption>} value */
proto.ModalReq.prototype.setModaloptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ModalOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ModalOption}
 */
proto.ModalReq.prototype.addModaloptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ModalOption, opt_index);
};


proto.ModalReq.prototype.clearModaloptionsList = function() {
  this.setModaloptionsList([]);
};


/**
 * repeated ModalOption excludedOptions = 6;
 * @return {!Array.<!proto.ModalOption>}
 */
proto.ModalReq.prototype.getExcludedoptionsList = function() {
  return /** @type{!Array.<!proto.ModalOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ModalOption, 6));
};


/** @param {!Array.<!proto.ModalOption>} value */
proto.ModalReq.prototype.setExcludedoptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ModalOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ModalOption}
 */
proto.ModalReq.prototype.addExcludedoptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ModalOption, opt_index);
};


proto.ModalReq.prototype.clearExcludedoptionsList = function() {
  this.setExcludedoptionsList([]);
};


/**
 * optional uint32 abilityGrpId = 2;
 * @return {number}
 */
proto.ModalReq.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ModalReq.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 minSel = 3;
 * @return {number}
 */
proto.ModalReq.prototype.getMinsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ModalReq.prototype.setMinsel = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 maxSel = 4;
 * @return {number}
 */
proto.ModalReq.prototype.getMaxsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ModalReq.prototype.setMaxsel = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool repeatedSelectAllowed = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ModalReq.prototype.getRepeatedselectallowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.ModalReq.prototype.setRepeatedselectallowed = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MulliganResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MulliganResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MulliganResp.displayName = 'proto.MulliganResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MulliganResp.prototype.toObject = function(opt_includeInstance) {
  return proto.MulliganResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MulliganResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MulliganResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    decision: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MulliganResp}
 */
proto.MulliganResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MulliganResp;
  return proto.MulliganResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MulliganResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MulliganResp}
 */
proto.MulliganResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MulliganOption} */ (reader.readEnum());
      msg.setDecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MulliganResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MulliganResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MulliganResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MulliganResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecision();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional MulliganOption decision = 1;
 * @return {!proto.MulliganOption}
 */
proto.MulliganResp.prototype.getDecision = function() {
  return /** @type {!proto.MulliganOption} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MulliganOption} value */
proto.MulliganResp.prototype.setDecision = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Node.oneofGroups_);
};
goog.inherits(proto.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Node.displayName = 'proto.Node';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Node.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Node.MessageCase = {
  MESSAGE_NOT_SET: 0,
  COMPOSITE: 1,
  DECORATOR: 2,
  TASK: 3
};

/**
 * @return {proto.Node.MessageCase}
 */
proto.Node.prototype.getMessageCase = function() {
  return /** @type {proto.Node.MessageCase} */(jspb.Message.computeOneofCase(this, proto.Node.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    composite: (f = msg.getComposite()) && proto.Composite.toObject(includeInstance, f),
    decorator: (f = msg.getDecorator()) && proto.Decorator.toObject(includeInstance, f),
    task: (f = msg.getTask()) && proto.Task.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Node;
  return proto.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Composite;
      reader.readMessage(value,proto.Composite.deserializeBinaryFromReader);
      msg.setComposite(value);
      break;
    case 2:
      var value = new proto.Decorator;
      reader.readMessage(value,proto.Decorator.deserializeBinaryFromReader);
      msg.setDecorator(value);
      break;
    case 3:
      var value = new proto.Task;
      reader.readMessage(value,proto.Task.deserializeBinaryFromReader);
      msg.setTask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComposite();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Composite.serializeBinaryToWriter
    );
  }
  f = message.getDecorator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Decorator.serializeBinaryToWriter
    );
  }
  f = message.getTask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional Composite composite = 1;
 * @return {?proto.Composite}
 */
proto.Node.prototype.getComposite = function() {
  return /** @type{?proto.Composite} */ (
    jspb.Message.getWrapperField(this, proto.Composite, 1));
};


/** @param {?proto.Composite|undefined} value */
proto.Node.prototype.setComposite = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Node.oneofGroups_[0], value);
};


proto.Node.prototype.clearComposite = function() {
  this.setComposite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasComposite = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Decorator decorator = 2;
 * @return {?proto.Decorator}
 */
proto.Node.prototype.getDecorator = function() {
  return /** @type{?proto.Decorator} */ (
    jspb.Message.getWrapperField(this, proto.Decorator, 2));
};


/** @param {?proto.Decorator|undefined} value */
proto.Node.prototype.setDecorator = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Node.oneofGroups_[0], value);
};


proto.Node.prototype.clearDecorator = function() {
  this.setDecorator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasDecorator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Task task = 3;
 * @return {?proto.Task}
 */
proto.Node.prototype.getTask = function() {
  return /** @type{?proto.Task} */ (
    jspb.Message.getWrapperField(this, proto.Task, 3));
};


/** @param {?proto.Task|undefined} value */
proto.Node.prototype.setTask = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Node.oneofGroups_[0], value);
};


proto.Node.prototype.clearTask = function() {
  this.setTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasTask = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NumericInputReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NumericInputReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NumericInputReq.displayName = 'proto.NumericInputReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NumericInputReq.prototype.toObject = function(opt_includeInstance) {
  return proto.NumericInputReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NumericInputReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NumericInputReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minvalue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxvalue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stepsize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NumericInputReq}
 */
proto.NumericInputReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NumericInputReq;
  return proto.NumericInputReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NumericInputReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NumericInputReq}
 */
proto.NumericInputReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxvalue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStepsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NumericInputReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NumericInputReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NumericInputReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NumericInputReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinvalue();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxvalue();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getStepsize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.NumericInputReq.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NumericInputReq.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minValue = 2;
 * @return {number}
 */
proto.NumericInputReq.prototype.getMinvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NumericInputReq.prototype.setMinvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxValue = 3;
 * @return {number}
 */
proto.NumericInputReq.prototype.getMaxvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NumericInputReq.prototype.setMaxvalue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 stepSize = 4;
 * @return {number}
 */
proto.NumericInputReq.prototype.getStepsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.NumericInputReq.prototype.setStepsize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NumericInputResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NumericInputResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NumericInputResp.displayName = 'proto.NumericInputResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NumericInputResp.prototype.toObject = function(opt_includeInstance) {
  return proto.NumericInputResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NumericInputResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NumericInputResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numericinputvalue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NumericInputResp}
 */
proto.NumericInputResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NumericInputResp;
  return proto.NumericInputResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NumericInputResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NumericInputResp}
 */
proto.NumericInputResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumericinputvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NumericInputResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NumericInputResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NumericInputResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NumericInputResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNumericinputvalue();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.NumericInputResp.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NumericInputResp.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 numericInputValue = 2;
 * @return {number}
 */
proto.NumericInputResp.prototype.getNumericinputvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NumericInputResp.prototype.setNumericinputvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OnChat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OnChat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OnChat.displayName = 'proto.OnChat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OnChat.prototype.toObject = function(opt_includeInstance) {
  return proto.OnChat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OnChat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnChat.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OnChat}
 */
proto.OnChat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OnChat;
  return proto.OnChat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OnChat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OnChat}
 */
proto.OnChat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OnChat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OnChat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OnChat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnChat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.OnChat.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OnChat.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OnHover = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OnHover, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OnHover.displayName = 'proto.OnHover';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OnHover.prototype.toObject = function(opt_includeInstance) {
  return proto.OnHover.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OnHover} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnHover.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OnHover}
 */
proto.OnHover.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OnHover;
  return proto.OnHover.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OnHover} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OnHover}
 */
proto.OnHover.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjectid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OnHover.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OnHover.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OnHover} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnHover.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 objectId = 1;
 * @return {number}
 */
proto.OnHover.prototype.getObjectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.OnHover.prototype.setObjectid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OnSelect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OnSelect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OnSelect.displayName = 'proto.OnSelect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OnSelect.prototype.toObject = function(opt_includeInstance) {
  return proto.OnSelect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OnSelect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnSelect.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OnSelect}
 */
proto.OnSelect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OnSelect;
  return proto.OnSelect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OnSelect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OnSelect}
 */
proto.OnSelect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjectid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OnSelect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OnSelect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OnSelect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnSelect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 objectId = 1;
 * @return {number}
 */
proto.OnSelect.prototype.getObjectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.OnSelect.prototype.setObjectid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OnShuffle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OnShuffle.repeatedFields_, null);
};
goog.inherits(proto.OnShuffle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OnShuffle.displayName = 'proto.OnShuffle';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OnShuffle.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OnShuffle.prototype.toObject = function(opt_includeInstance) {
  return proto.OnShuffle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OnShuffle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnShuffle.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectidsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OnShuffle}
 */
proto.OnShuffle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OnShuffle;
  return proto.OnShuffle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OnShuffle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OnShuffle}
 */
proto.OnShuffle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setObjectidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OnShuffle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OnShuffle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OnShuffle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OnShuffle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 objectIds = 1;
 * @return {!Array.<number>}
 */
proto.OnShuffle.prototype.getObjectidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.OnShuffle.prototype.setObjectidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.OnShuffle.prototype.addObjectids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.OnShuffle.prototype.clearObjectidsList = function() {
  this.setObjectidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OptionalActionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OptionalActionMessage.repeatedFields_, null);
};
goog.inherits(proto.OptionalActionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OptionalActionMessage.displayName = 'proto.OptionalActionMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OptionalActionMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OptionalActionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.OptionalActionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OptionalActionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OptionalActionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionalactiontypesList: jspb.Message.getRepeatedField(msg, 4),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sourceid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OptionalActionMessage}
 */
proto.OptionalActionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OptionalActionMessage;
  return proto.OptionalActionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OptionalActionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OptionalActionMessage}
 */
proto.OptionalActionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Array.<!proto.CardMechanicType>} */ (reader.readPackedEnum());
      msg.setOptionalactiontypesList(value);
      break;
    case 1:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OptionalActionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OptionalActionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OptionalActionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OptionalActionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionalactiontypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSourceid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated CardMechanicType optionalActionTypes = 4;
 * @return {!Array.<!proto.CardMechanicType>}
 */
proto.OptionalActionMessage.prototype.getOptionalactiontypesList = function() {
  return /** @type {!Array.<!proto.CardMechanicType>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.CardMechanicType>} value */
proto.OptionalActionMessage.prototype.setOptionalactiontypesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.CardMechanicType} value
 * @param {number=} opt_index
 */
proto.OptionalActionMessage.prototype.addOptionalactiontypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.OptionalActionMessage.prototype.clearOptionalactiontypesList = function() {
  this.setOptionalactiontypesList([]);
};


/**
 * optional Prompt prompt = 1;
 * @return {?proto.Prompt}
 */
proto.OptionalActionMessage.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 1));
};


/** @param {?proto.Prompt|undefined} value */
proto.OptionalActionMessage.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.OptionalActionMessage.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OptionalActionMessage.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 systemSeatId = 2;
 * @return {number}
 */
proto.OptionalActionMessage.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.OptionalActionMessage.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 sourceId = 3;
 * @return {number}
 */
proto.OptionalActionMessage.prototype.getSourceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.OptionalActionMessage.prototype.setSourceid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OptionalResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OptionalResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OptionalResp.displayName = 'proto.OptionalResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OptionalResp.prototype.toObject = function(opt_includeInstance) {
  return proto.OptionalResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OptionalResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OptionalResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, 0),
    persistence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    appliesto: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mapto: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OptionalResp}
 */
proto.OptionalResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OptionalResp;
  return proto.OptionalResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OptionalResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OptionalResp}
 */
proto.OptionalResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.OptionResponse} */ (reader.readEnum());
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {!proto.ChoicePersistence} */ (reader.readEnum());
      msg.setPersistence(value);
      break;
    case 3:
      var value = /** @type {!proto.SettingScope} */ (reader.readEnum());
      msg.setAppliesto(value);
      break;
    case 4:
      var value = /** @type {!proto.SettingKey} */ (reader.readEnum());
      msg.setMapto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OptionalResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OptionalResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OptionalResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OptionalResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPersistence();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAppliesto();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMapto();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional OptionResponse response = 1;
 * @return {!proto.OptionResponse}
 */
proto.OptionalResp.prototype.getResponse = function() {
  return /** @type {!proto.OptionResponse} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OptionResponse} value */
proto.OptionalResp.prototype.setResponse = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChoicePersistence persistence = 2;
 * @return {!proto.ChoicePersistence}
 */
proto.OptionalResp.prototype.getPersistence = function() {
  return /** @type {!proto.ChoicePersistence} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ChoicePersistence} value */
proto.OptionalResp.prototype.setPersistence = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SettingScope appliesTo = 3;
 * @return {!proto.SettingScope}
 */
proto.OptionalResp.prototype.getAppliesto = function() {
  return /** @type {!proto.SettingScope} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SettingScope} value */
proto.OptionalResp.prototype.setAppliesto = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SettingKey mapTo = 4;
 * @return {!proto.SettingKey}
 */
proto.OptionalResp.prototype.getMapto = function() {
  return /** @type {!proto.SettingKey} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SettingKey} value */
proto.OptionalResp.prototype.setMapto = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderCombatDamageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OrderCombatDamageReq.repeatedFields_, null);
};
goog.inherits(proto.OrderCombatDamageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderCombatDamageReq.displayName = 'proto.OrderCombatDamageReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OrderCombatDamageReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderCombatDamageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderCombatDamageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderCombatDamageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderCombatDamageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.CombatDamageOrder.toObject, includeInstance),
    orderdamagetype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderCombatDamageReq}
 */
proto.OrderCombatDamageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderCombatDamageReq;
  return proto.OrderCombatDamageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderCombatDamageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderCombatDamageReq}
 */
proto.OrderCombatDamageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.CombatDamageOrder;
      reader.readMessage(value,proto.CombatDamageOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 1:
      var value = /** @type {!proto.OrderCombatDamageType} */ (reader.readEnum());
      msg.setOrderdamagetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderCombatDamageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderCombatDamageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderCombatDamageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderCombatDamageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.CombatDamageOrder.serializeBinaryToWriter
    );
  }
  f = message.getOrderdamagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * repeated CombatDamageOrder orders = 2;
 * @return {!Array.<!proto.CombatDamageOrder>}
 */
proto.OrderCombatDamageReq.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.CombatDamageOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CombatDamageOrder, 2));
};


/** @param {!Array.<!proto.CombatDamageOrder>} value */
proto.OrderCombatDamageReq.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.CombatDamageOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CombatDamageOrder}
 */
proto.OrderCombatDamageReq.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.CombatDamageOrder, opt_index);
};


proto.OrderCombatDamageReq.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional OrderCombatDamageType orderDamageType = 1;
 * @return {!proto.OrderCombatDamageType}
 */
proto.OrderCombatDamageReq.prototype.getOrderdamagetype = function() {
  return /** @type {!proto.OrderCombatDamageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OrderCombatDamageType} value */
proto.OrderCombatDamageReq.prototype.setOrderdamagetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderCombatDamageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OrderCombatDamageResp.repeatedFields_, null);
};
goog.inherits(proto.OrderCombatDamageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderCombatDamageResp.displayName = 'proto.OrderCombatDamageResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OrderCombatDamageResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderCombatDamageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderCombatDamageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderCombatDamageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderCombatDamageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.CombatDamageOrderAssignment.toObject, includeInstance),
    orderdamagetype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderCombatDamageResp}
 */
proto.OrderCombatDamageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderCombatDamageResp;
  return proto.OrderCombatDamageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderCombatDamageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderCombatDamageResp}
 */
proto.OrderCombatDamageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.CombatDamageOrderAssignment;
      reader.readMessage(value,proto.CombatDamageOrderAssignment.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 1:
      var value = /** @type {!proto.OrderCombatDamageType} */ (reader.readEnum());
      msg.setOrderdamagetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderCombatDamageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderCombatDamageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderCombatDamageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderCombatDamageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.CombatDamageOrderAssignment.serializeBinaryToWriter
    );
  }
  f = message.getOrderdamagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * repeated CombatDamageOrderAssignment orders = 2;
 * @return {!Array.<!proto.CombatDamageOrderAssignment>}
 */
proto.OrderCombatDamageResp.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.CombatDamageOrderAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CombatDamageOrderAssignment, 2));
};


/** @param {!Array.<!proto.CombatDamageOrderAssignment>} value */
proto.OrderCombatDamageResp.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.CombatDamageOrderAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CombatDamageOrderAssignment}
 */
proto.OrderCombatDamageResp.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.CombatDamageOrderAssignment, opt_index);
};


proto.OrderCombatDamageResp.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional OrderCombatDamageType orderDamageType = 1;
 * @return {!proto.OrderCombatDamageType}
 */
proto.OrderCombatDamageResp.prototype.getOrderdamagetype = function() {
  return /** @type {!proto.OrderCombatDamageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OrderCombatDamageType} value */
proto.OrderCombatDamageResp.prototype.setOrderdamagetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderDamageConfirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OrderDamageConfirmation.repeatedFields_, null);
};
goog.inherits(proto.OrderDamageConfirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderDamageConfirmation.displayName = 'proto.OrderDamageConfirmation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OrderDamageConfirmation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderDamageConfirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderDamageConfirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderDamageConfirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderDamageConfirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidordersList: jspb.Message.toObjectList(msg.getInvalidordersList(),
    proto.InvalidCombatDamageOrderAssignment.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderdamagetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderDamageConfirmation}
 */
proto.OrderDamageConfirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderDamageConfirmation;
  return proto.OrderDamageConfirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderDamageConfirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderDamageConfirmation}
 */
proto.OrderDamageConfirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.InvalidCombatDamageOrderAssignment;
      reader.readMessage(value,proto.InvalidCombatDamageOrderAssignment.deserializeBinaryFromReader);
      msg.addInvalidorders(value);
      break;
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!proto.OrderCombatDamageType} */ (reader.readEnum());
      msg.setOrderdamagetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderDamageConfirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderDamageConfirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderDamageConfirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderDamageConfirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvalidordersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.InvalidCombatDamageOrderAssignment.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrderdamagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated InvalidCombatDamageOrderAssignment invalidOrders = 3;
 * @return {!Array.<!proto.InvalidCombatDamageOrderAssignment>}
 */
proto.OrderDamageConfirmation.prototype.getInvalidordersList = function() {
  return /** @type{!Array.<!proto.InvalidCombatDamageOrderAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InvalidCombatDamageOrderAssignment, 3));
};


/** @param {!Array.<!proto.InvalidCombatDamageOrderAssignment>} value */
proto.OrderDamageConfirmation.prototype.setInvalidordersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.InvalidCombatDamageOrderAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InvalidCombatDamageOrderAssignment}
 */
proto.OrderDamageConfirmation.prototype.addInvalidorders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.InvalidCombatDamageOrderAssignment, opt_index);
};


proto.OrderDamageConfirmation.prototype.clearInvalidordersList = function() {
  this.setInvalidordersList([]);
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.OrderDamageConfirmation.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.OrderDamageConfirmation.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional OrderCombatDamageType orderDamageType = 2;
 * @return {!proto.OrderCombatDamageType}
 */
proto.OrderDamageConfirmation.prototype.getOrderdamagetype = function() {
  return /** @type {!proto.OrderCombatDamageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.OrderCombatDamageType} value */
proto.OrderDamageConfirmation.prototype.setOrderdamagetype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OrderKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderKey.displayName = 'proto.OrderKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderKey.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeplayer: jspb.Message.getFieldWithDefault(msg, 1, 0),
    turnphase: jspb.Message.getFieldWithDefault(msg, 2, 0),
    phasestep: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requesttype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    context: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderKey}
 */
proto.OrderKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderKey;
  return proto.OrderKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderKey}
 */
proto.OrderKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PlayerIs} */ (reader.readEnum());
      msg.setActiveplayer(value);
      break;
    case 2:
      var value = /** @type {!proto.Phase} */ (reader.readEnum());
      msg.setTurnphase(value);
      break;
    case 3:
      var value = /** @type {!proto.Step} */ (reader.readEnum());
      msg.setPhasestep(value);
      break;
    case 4:
      var value = /** @type {!proto.GREMessageType} */ (reader.readEnum());
      msg.setRequesttype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiveplayer();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTurnphase();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPhasestep();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getContext();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional PlayerIs activePlayer = 1;
 * @return {!proto.PlayerIs}
 */
proto.OrderKey.prototype.getActiveplayer = function() {
  return /** @type {!proto.PlayerIs} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PlayerIs} value */
proto.OrderKey.prototype.setActiveplayer = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Phase turnPhase = 2;
 * @return {!proto.Phase}
 */
proto.OrderKey.prototype.getTurnphase = function() {
  return /** @type {!proto.Phase} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Phase} value */
proto.OrderKey.prototype.setTurnphase = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Step phaseStep = 3;
 * @return {!proto.Step}
 */
proto.OrderKey.prototype.getPhasestep = function() {
  return /** @type {!proto.Step} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Step} value */
proto.OrderKey.prototype.setPhasestep = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional GREMessageType requestType = 4;
 * @return {!proto.GREMessageType}
 */
proto.OrderKey.prototype.getRequesttype = function() {
  return /** @type {!proto.GREMessageType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.GREMessageType} value */
proto.OrderKey.prototype.setRequesttype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 context = 5;
 * @return {number}
 */
proto.OrderKey.prototype.getContext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.OrderKey.prototype.setContext = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OrderReq.repeatedFields_, null);
};
goog.inherits(proto.OrderReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderReq.displayName = 'proto.OrderReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OrderReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderReq.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1),
    idx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    orderingcontext: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderReq}
 */
proto.OrderReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderReq;
  return proto.OrderReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderReq}
 */
proto.OrderReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIdsList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    case 3:
      var value = /** @type {!proto.OrderingContext} */ (reader.readEnum());
      msg.setOrderingcontext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOrderingcontext();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated uint32 ids = 1;
 * @return {!Array.<number>}
 */
proto.OrderReq.prototype.getIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.OrderReq.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.OrderReq.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.OrderReq.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


/**
 * optional uint32 idx = 2;
 * @return {number}
 */
proto.OrderReq.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.OrderReq.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional OrderingContext orderingContext = 3;
 * @return {!proto.OrderingContext}
 */
proto.OrderReq.prototype.getOrderingcontext = function() {
  return /** @type {!proto.OrderingContext} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.OrderingContext} value */
proto.OrderReq.prototype.setOrderingcontext = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OrderResp.repeatedFields_, null);
};
goog.inherits(proto.OrderResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderResp.displayName = 'proto.OrderResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OrderResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderResp.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1),
    ordering: jspb.Message.getFieldWithDefault(msg, 2, 0),
    idx: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderResp}
 */
proto.OrderResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderResp;
  return proto.OrderResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderResp}
 */
proto.OrderResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIdsList(value);
      break;
    case 2:
      var value = /** @type {!proto.OrderingType} */ (reader.readEnum());
      msg.setOrdering(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated uint32 ids = 1;
 * @return {!Array.<number>}
 */
proto.OrderResp.prototype.getIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.OrderResp.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.OrderResp.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.OrderResp.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


/**
 * optional OrderingType ordering = 2;
 * @return {!proto.OrderingType}
 */
proto.OrderResp.prototype.getOrdering = function() {
  return /** @type {!proto.OrderingType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.OrderingType} value */
proto.OrderResp.prototype.setOrdering = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 idx = 3;
 * @return {number}
 */
proto.OrderResp.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.OrderResp.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderedDamageAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OrderedDamageAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderedDamageAssignment.displayName = 'proto.OrderedDamageAssignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderedDamageAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderedDamageAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderedDamageAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderedDamageAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assigneddamage: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderedDamageAssignment}
 */
proto.OrderedDamageAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderedDamageAssignment;
  return proto.OrderedDamageAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderedDamageAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderedDamageAssignment}
 */
proto.OrderedDamageAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssigneddamage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderedDamageAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderedDamageAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderedDamageAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderedDamageAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAssigneddamage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 instanceId = 1;
 * @return {number}
 */
proto.OrderedDamageAssignment.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.OrderedDamageAssignment.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 assignedDamage = 2;
 * @return {number}
 */
proto.OrderedDamageAssignment.prototype.getAssigneddamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.OrderedDamageAssignment.prototype.setAssigneddamage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderingHeuristicDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OrderingHeuristicDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderingHeuristicDefinition.displayName = 'proto.OrderingHeuristicDefinition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderingHeuristicDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderingHeuristicDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderingHeuristicDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderingHeuristicDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
    weight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderkey: (f = msg.getOrderkey()) && proto.OrderKey.toObject(includeInstance, f),
    functiontype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mechanictype: jspb.Message.getFieldWithDefault(msg, 10, 0),
    withmechanic: jspb.Message.getFieldWithDefault(msg, 11, false),
    abilitytype: jspb.Message.getFieldWithDefault(msg, 12, 0),
    sortorder: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderingHeuristicDefinition}
 */
proto.OrderingHeuristicDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderingHeuristicDefinition;
  return proto.OrderingHeuristicDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderingHeuristicDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderingHeuristicDefinition}
 */
proto.OrderingHeuristicDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriority(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    case 4:
      var value = new proto.OrderKey;
      reader.readMessage(value,proto.OrderKey.deserializeBinaryFromReader);
      msg.setOrderkey(value);
      break;
    case 5:
      var value = /** @type {!proto.OrderingFunctionType} */ (reader.readEnum());
      msg.setFunctiontype(value);
      break;
    case 10:
      var value = /** @type {!proto.MechanicType} */ (reader.readEnum());
      msg.setMechanictype(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithmechanic(value);
      break;
    case 12:
      var value = /** @type {!proto.AbilityType} */ (reader.readEnum());
      msg.setAbilitytype(value);
      break;
    case 20:
      var value = /** @type {!proto.SortBy} */ (reader.readEnum());
      msg.setSortorder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderingHeuristicDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderingHeuristicDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderingHeuristicDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderingHeuristicDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOrderkey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OrderKey.serializeBinaryToWriter
    );
  }
  f = message.getFunctiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMechanictype();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getWithmechanic();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getAbilitytype();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getSortorder();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.OrderingHeuristicDefinition.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OrderingHeuristicDefinition.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 priority = 2;
 * @return {number}
 */
proto.OrderingHeuristicDefinition.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.OrderingHeuristicDefinition.prototype.setPriority = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 weight = 3;
 * @return {number}
 */
proto.OrderingHeuristicDefinition.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.OrderingHeuristicDefinition.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional OrderKey orderKey = 4;
 * @return {?proto.OrderKey}
 */
proto.OrderingHeuristicDefinition.prototype.getOrderkey = function() {
  return /** @type{?proto.OrderKey} */ (
    jspb.Message.getWrapperField(this, proto.OrderKey, 4));
};


/** @param {?proto.OrderKey|undefined} value */
proto.OrderingHeuristicDefinition.prototype.setOrderkey = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.OrderingHeuristicDefinition.prototype.clearOrderkey = function() {
  this.setOrderkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OrderingHeuristicDefinition.prototype.hasOrderkey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OrderingFunctionType functionType = 5;
 * @return {!proto.OrderingFunctionType}
 */
proto.OrderingHeuristicDefinition.prototype.getFunctiontype = function() {
  return /** @type {!proto.OrderingFunctionType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.OrderingFunctionType} value */
proto.OrderingHeuristicDefinition.prototype.setFunctiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional MechanicType mechanicType = 10;
 * @return {!proto.MechanicType}
 */
proto.OrderingHeuristicDefinition.prototype.getMechanictype = function() {
  return /** @type {!proto.MechanicType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.MechanicType} value */
proto.OrderingHeuristicDefinition.prototype.setMechanictype = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional bool withMechanic = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.OrderingHeuristicDefinition.prototype.getWithmechanic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.OrderingHeuristicDefinition.prototype.setWithmechanic = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional AbilityType abilityType = 12;
 * @return {!proto.AbilityType}
 */
proto.OrderingHeuristicDefinition.prototype.getAbilitytype = function() {
  return /** @type {!proto.AbilityType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.AbilityType} value */
proto.OrderingHeuristicDefinition.prototype.setAbilitytype = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional SortBy sortOrder = 20;
 * @return {!proto.SortBy}
 */
proto.OrderingHeuristicDefinition.prototype.getSortorder = function() {
  return /** @type {!proto.SortBy} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {!proto.SortBy} value */
proto.OrderingHeuristicDefinition.prototype.setSortorder = function(value) {
  jspb.Message.setProto3EnumField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderingHeuristicParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OrderingHeuristicParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderingHeuristicParameter.displayName = 'proto.OrderingHeuristicParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderingHeuristicParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderingHeuristicParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderingHeuristicParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderingHeuristicParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paramvalue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderingHeuristicParameter}
 */
proto.OrderingHeuristicParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderingHeuristicParameter;
  return proto.OrderingHeuristicParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderingHeuristicParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderingHeuristicParameter}
 */
proto.OrderingHeuristicParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.OrderingParameterId} */ (reader.readEnum());
      msg.setParamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParamvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderingHeuristicParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderingHeuristicParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderingHeuristicParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderingHeuristicParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParamvalue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional OrderingParameterId paramId = 1;
 * @return {!proto.OrderingParameterId}
 */
proto.OrderingHeuristicParameter.prototype.getParamid = function() {
  return /** @type {!proto.OrderingParameterId} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OrderingParameterId} value */
proto.OrderingHeuristicParameter.prototype.setParamid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 paramValue = 2;
 * @return {number}
 */
proto.OrderingHeuristicParameter.prototype.getParamvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.OrderingHeuristicParameter.prototype.setParamvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Parallel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Parallel.repeatedFields_, null);
};
goog.inherits(proto.Parallel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Parallel.displayName = 'proto.Parallel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Parallel.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Parallel.prototype.toObject = function(opt_includeInstance) {
  return proto.Parallel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Parallel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Parallel.toObject = function(includeInstance, msg) {
  var f, obj = {
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Parallel}
 */
proto.Parallel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Parallel;
  return proto.Parallel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Parallel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Parallel}
 */
proto.Parallel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Parallel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Parallel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Parallel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Parallel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node children = 1;
 * @return {!Array.<!proto.Node>}
 */
proto.Parallel.prototype.getChildrenList = function() {
  return /** @type{!Array.<!proto.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Node, 1));
};


/** @param {!Array.<!proto.Node>} value */
proto.Parallel.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Node}
 */
proto.Parallel.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Node, opt_index);
};


proto.Parallel.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pass = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Pass, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Pass.displayName = 'proto.Pass';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pass.prototype.toObject = function(opt_includeInstance) {
  return proto.Pass.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pass} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pass.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pass}
 */
proto.Pass.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pass;
  return proto.Pass.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pass} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pass}
 */
proto.Pass.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pass.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Pass.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Pass} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pass.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PayCostsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PayCostsReq.repeatedFields_, null);
};
goog.inherits(proto.PayCostsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PayCostsReq.displayName = 'proto.PayCostsReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PayCostsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PayCostsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PayCostsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PayCostsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PayCostsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    manacostList: jspb.Message.toObjectList(msg.getManacostList(),
    proto.ManaRequirement.toObject, includeInstance),
    paymentactions: (f = msg.getPaymentactions()) && proto.ActionsAvailableReq.toObject(includeInstance, f),
    paymentselection: (f = msg.getPaymentselection()) && proto.SelectNReq.toObject(includeInstance, f),
    actioncostreq: (f = msg.getActioncostreq()) && proto.ActionCostReq.toObject(includeInstance, f),
    submitpaymentreq: (f = msg.getSubmitpaymentreq()) && proto.SubmitPaymentReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PayCostsReq}
 */
proto.PayCostsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PayCostsReq;
  return proto.PayCostsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PayCostsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PayCostsReq}
 */
proto.PayCostsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ManaRequirement;
      reader.readMessage(value,proto.ManaRequirement.deserializeBinaryFromReader);
      msg.addManacost(value);
      break;
    case 2:
      var value = new proto.ActionsAvailableReq;
      reader.readMessage(value,proto.ActionsAvailableReq.deserializeBinaryFromReader);
      msg.setPaymentactions(value);
      break;
    case 3:
      var value = new proto.SelectNReq;
      reader.readMessage(value,proto.SelectNReq.deserializeBinaryFromReader);
      msg.setPaymentselection(value);
      break;
    case 4:
      var value = new proto.ActionCostReq;
      reader.readMessage(value,proto.ActionCostReq.deserializeBinaryFromReader);
      msg.setActioncostreq(value);
      break;
    case 5:
      var value = new proto.SubmitPaymentReq;
      reader.readMessage(value,proto.SubmitPaymentReq.deserializeBinaryFromReader);
      msg.setSubmitpaymentreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PayCostsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PayCostsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PayCostsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PayCostsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getManacostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ManaRequirement.serializeBinaryToWriter
    );
  }
  f = message.getPaymentactions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ActionsAvailableReq.serializeBinaryToWriter
    );
  }
  f = message.getPaymentselection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SelectNReq.serializeBinaryToWriter
    );
  }
  f = message.getActioncostreq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ActionCostReq.serializeBinaryToWriter
    );
  }
  f = message.getSubmitpaymentreq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SubmitPaymentReq.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ManaRequirement manaCost = 1;
 * @return {!Array.<!proto.ManaRequirement>}
 */
proto.PayCostsReq.prototype.getManacostList = function() {
  return /** @type{!Array.<!proto.ManaRequirement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaRequirement, 1));
};


/** @param {!Array.<!proto.ManaRequirement>} value */
proto.PayCostsReq.prototype.setManacostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ManaRequirement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaRequirement}
 */
proto.PayCostsReq.prototype.addManacost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ManaRequirement, opt_index);
};


proto.PayCostsReq.prototype.clearManacostList = function() {
  this.setManacostList([]);
};


/**
 * optional ActionsAvailableReq paymentActions = 2;
 * @return {?proto.ActionsAvailableReq}
 */
proto.PayCostsReq.prototype.getPaymentactions = function() {
  return /** @type{?proto.ActionsAvailableReq} */ (
    jspb.Message.getWrapperField(this, proto.ActionsAvailableReq, 2));
};


/** @param {?proto.ActionsAvailableReq|undefined} value */
proto.PayCostsReq.prototype.setPaymentactions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.PayCostsReq.prototype.clearPaymentactions = function() {
  this.setPaymentactions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PayCostsReq.prototype.hasPaymentactions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SelectNReq paymentSelection = 3;
 * @return {?proto.SelectNReq}
 */
proto.PayCostsReq.prototype.getPaymentselection = function() {
  return /** @type{?proto.SelectNReq} */ (
    jspb.Message.getWrapperField(this, proto.SelectNReq, 3));
};


/** @param {?proto.SelectNReq|undefined} value */
proto.PayCostsReq.prototype.setPaymentselection = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.PayCostsReq.prototype.clearPaymentselection = function() {
  this.setPaymentselection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PayCostsReq.prototype.hasPaymentselection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActionCostReq actionCostReq = 4;
 * @return {?proto.ActionCostReq}
 */
proto.PayCostsReq.prototype.getActioncostreq = function() {
  return /** @type{?proto.ActionCostReq} */ (
    jspb.Message.getWrapperField(this, proto.ActionCostReq, 4));
};


/** @param {?proto.ActionCostReq|undefined} value */
proto.PayCostsReq.prototype.setActioncostreq = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.PayCostsReq.prototype.clearActioncostreq = function() {
  this.setActioncostreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PayCostsReq.prototype.hasActioncostreq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SubmitPaymentReq submitPaymentReq = 5;
 * @return {?proto.SubmitPaymentReq}
 */
proto.PayCostsReq.prototype.getSubmitpaymentreq = function() {
  return /** @type{?proto.SubmitPaymentReq} */ (
    jspb.Message.getWrapperField(this, proto.SubmitPaymentReq, 5));
};


/** @param {?proto.SubmitPaymentReq|undefined} value */
proto.PayCostsReq.prototype.setSubmitpaymentreq = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.PayCostsReq.prototype.clearSubmitpaymentreq = function() {
  this.setSubmitpaymentreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PayCostsReq.prototype.hasSubmitpaymentreq = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PerformActionResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PerformActionResp.repeatedFields_, null);
};
goog.inherits(proto.PerformActionResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PerformActionResp.displayName = 'proto.PerformActionResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PerformActionResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PerformActionResp.prototype.toObject = function(opt_includeInstance) {
  return proto.PerformActionResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PerformActionResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PerformActionResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.Action.toObject, includeInstance),
    autopasspriority: jspb.Message.getFieldWithDefault(msg, 2, 0),
    setyield: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appliesto: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mapto: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PerformActionResp}
 */
proto.PerformActionResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PerformActionResp;
  return proto.PerformActionResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PerformActionResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PerformActionResp}
 */
proto.PerformActionResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Action;
      reader.readMessage(value,proto.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 2:
      var value = /** @type {!proto.AutoPassPriority} */ (reader.readEnum());
      msg.setAutopasspriority(value);
      break;
    case 3:
      var value = /** @type {!proto.SettingStatus} */ (reader.readEnum());
      msg.setSetyield(value);
      break;
    case 4:
      var value = /** @type {!proto.SettingScope} */ (reader.readEnum());
      msg.setAppliesto(value);
      break;
    case 5:
      var value = /** @type {!proto.SettingKey} */ (reader.readEnum());
      msg.setMapto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PerformActionResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PerformActionResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PerformActionResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PerformActionResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Action.serializeBinaryToWriter
    );
  }
  f = message.getAutopasspriority();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSetyield();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAppliesto();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMapto();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array.<!proto.Action>}
 */
proto.PerformActionResp.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Action, 1));
};


/** @param {!Array.<!proto.Action>} value */
proto.PerformActionResp.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Action}
 */
proto.PerformActionResp.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Action, opt_index);
};


proto.PerformActionResp.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * optional AutoPassPriority autoPassPriority = 2;
 * @return {!proto.AutoPassPriority}
 */
proto.PerformActionResp.prototype.getAutopasspriority = function() {
  return /** @type {!proto.AutoPassPriority} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.AutoPassPriority} value */
proto.PerformActionResp.prototype.setAutopasspriority = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SettingStatus setYield = 3;
 * @return {!proto.SettingStatus}
 */
proto.PerformActionResp.prototype.getSetyield = function() {
  return /** @type {!proto.SettingStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SettingStatus} value */
proto.PerformActionResp.prototype.setSetyield = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SettingScope appliesTo = 4;
 * @return {!proto.SettingScope}
 */
proto.PerformActionResp.prototype.getAppliesto = function() {
  return /** @type {!proto.SettingScope} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SettingScope} value */
proto.PerformActionResp.prototype.setAppliesto = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional SettingKey mapTo = 5;
 * @return {!proto.SettingKey}
 */
proto.PerformActionResp.prototype.getMapto = function() {
  return /** @type {!proto.SettingKey} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.SettingKey} value */
proto.PerformActionResp.prototype.setMapto = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerConfig.repeatedFields_, null);
};
goog.inherits(proto.PlayerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerConfig.displayName = 'proto.PlayerConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerConfig.repeatedFields_ = [2,3,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckcardsList: jspb.Message.getRepeatedField(msg, 2),
    sideboardcardsList: jspb.Message.getRepeatedField(msg, 3),
    commandemblemsList: jspb.Message.getRepeatedField(msg, 9),
    systemseatid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    undopermissionbitmask: jspb.Message.getFieldWithDefault(msg, 4, 0),
    controlpermissionbitmask: jspb.Message.getFieldWithDefault(msg, 5, 0),
    startinglifetotal: jspb.Message.getFieldWithDefault(msg, 6, 0),
    startinghandsizespecified: jspb.Message.getFieldWithDefault(msg, 7, false),
    startinghandsize: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerConfig}
 */
proto.PlayerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerConfig;
  return proto.PlayerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerConfig}
 */
proto.PlayerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeckcardsList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSideboardcardsList(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setCommandemblemsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUndopermissionbitmask(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setControlpermissionbitmask(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartinglifetotal(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStartinghandsizespecified(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartinghandsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckcardsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getSideboardcardsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getCommandemblemsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      9,
      f
    );
  }
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUndopermissionbitmask();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getControlpermissionbitmask();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getStartinglifetotal();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getStartinghandsizespecified();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getStartinghandsize();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * repeated uint32 deckCards = 2;
 * @return {!Array.<number>}
 */
proto.PlayerConfig.prototype.getDeckcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.PlayerConfig.prototype.setDeckcardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.PlayerConfig.prototype.addDeckcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.PlayerConfig.prototype.clearDeckcardsList = function() {
  this.setDeckcardsList([]);
};


/**
 * repeated uint32 sideboardCards = 3;
 * @return {!Array.<number>}
 */
proto.PlayerConfig.prototype.getSideboardcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.PlayerConfig.prototype.setSideboardcardsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.PlayerConfig.prototype.addSideboardcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.PlayerConfig.prototype.clearSideboardcardsList = function() {
  this.setSideboardcardsList([]);
};


/**
 * repeated uint32 commandEmblems = 9;
 * @return {!Array.<number>}
 */
proto.PlayerConfig.prototype.getCommandemblemsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<number>} value */
proto.PlayerConfig.prototype.setCommandemblemsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.PlayerConfig.prototype.addCommandemblems = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.PlayerConfig.prototype.clearCommandemblemsList = function() {
  this.setCommandemblemsList([]);
};


/**
 * optional uint32 systemSeatId = 1;
 * @return {number}
 */
proto.PlayerConfig.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PlayerConfig.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 undoPermissionBitmask = 4;
 * @return {number}
 */
proto.PlayerConfig.prototype.getUndopermissionbitmask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PlayerConfig.prototype.setUndopermissionbitmask = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 controlPermissionBitmask = 5;
 * @return {number}
 */
proto.PlayerConfig.prototype.getControlpermissionbitmask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.PlayerConfig.prototype.setControlpermissionbitmask = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 startingLifeTotal = 6;
 * @return {number}
 */
proto.PlayerConfig.prototype.getStartinglifetotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.PlayerConfig.prototype.setStartinglifetotal = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool startingHandSizeSpecified = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PlayerConfig.prototype.getStartinghandsizespecified = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.PlayerConfig.prototype.setStartinghandsizespecified = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional uint32 startingHandSize = 8;
 * @return {number}
 */
proto.PlayerConfig.prototype.getStartinghandsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.PlayerConfig.prototype.setStartinghandsize = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerDieRoll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerDieRoll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerDieRoll.displayName = 'proto.PlayerDieRoll';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerDieRoll.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerDieRoll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerDieRoll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerDieRoll.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemseatid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rollvalue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerDieRoll}
 */
proto.PlayerDieRoll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerDieRoll;
  return proto.PlayerDieRoll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerDieRoll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerDieRoll}
 */
proto.PlayerDieRoll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRollvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerDieRoll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerDieRoll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerDieRoll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerDieRoll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemseatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRollvalue();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 systemSeatId = 1;
 * @return {number}
 */
proto.PlayerDieRoll.prototype.getSystemseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PlayerDieRoll.prototype.setSystemseatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 rollValue = 2;
 * @return {number}
 */
proto.PlayerDieRoll.prototype.getRollvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PlayerDieRoll.prototype.setRollvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInfo.repeatedFields_, null);
};
goog.inherits(proto.PlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerInfo.displayName = 'proto.PlayerInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInfo.repeatedFields_ = [6,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    manapoolList: jspb.Message.toObjectList(msg.getManapoolList(),
    proto.ManaInfo.toObject, includeInstance),
    timeridsList: jspb.Message.getRepeatedField(msg, 11),
    lifetotal: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemseatnumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxhandsize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    turnnumber: jspb.Message.getFieldWithDefault(msg, 9, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    controllerseatid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    controllertype: jspb.Message.getFieldWithDefault(msg, 13, 0),
    timeoutcount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    pipcount: jspb.Message.getFieldWithDefault(msg, 15, 0),
    pendingmessagetype: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInfo}
 */
proto.PlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInfo;
  return proto.PlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInfo}
 */
proto.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.ManaInfo;
      reader.readMessage(value,proto.ManaInfo.deserializeBinaryFromReader);
      msg.addManapool(value);
      break;
    case 11:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setTimeridsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLifetotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemseatnumber(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxhandsize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurnnumber(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTeamid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setControllerseatid(value);
      break;
    case 13:
      var value = /** @type {!proto.ControllerType} */ (reader.readEnum());
      msg.setControllertype(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutcount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPipcount(value);
      break;
    case 16:
      var value = /** @type {!proto.ClientMessageType} */ (reader.readEnum());
      msg.setPendingmessagetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getManapoolList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ManaInfo.serializeBinaryToWriter
    );
  }
  f = message.getTimeridsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      11,
      f
    );
  }
  f = message.getLifetotal();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSystemseatnumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxhandsize();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTurnnumber();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getControllerseatid();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getControllertype();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getTimeoutcount();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getPipcount();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getPendingmessagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
};


/**
 * repeated ManaInfo manaPool = 6;
 * @return {!Array.<!proto.ManaInfo>}
 */
proto.PlayerInfo.prototype.getManapoolList = function() {
  return /** @type{!Array.<!proto.ManaInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ManaInfo, 6));
};


/** @param {!Array.<!proto.ManaInfo>} value */
proto.PlayerInfo.prototype.setManapoolList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ManaInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ManaInfo}
 */
proto.PlayerInfo.prototype.addManapool = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ManaInfo, opt_index);
};


proto.PlayerInfo.prototype.clearManapoolList = function() {
  this.setManapoolList([]);
};


/**
 * repeated uint32 timerIds = 11;
 * @return {!Array.<number>}
 */
proto.PlayerInfo.prototype.getTimeridsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array.<number>} value */
proto.PlayerInfo.prototype.setTimeridsList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.PlayerInfo.prototype.addTimerids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.PlayerInfo.prototype.clearTimeridsList = function() {
  this.setTimeridsList([]);
};


/**
 * optional int32 lifeTotal = 1;
 * @return {number}
 */
proto.PlayerInfo.prototype.getLifetotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setLifetotal = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 systemSeatNumber = 2;
 * @return {number}
 */
proto.PlayerInfo.prototype.getSystemseatnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setSystemseatnumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxHandSize = 7;
 * @return {number}
 */
proto.PlayerInfo.prototype.getMaxhandsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setMaxhandsize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 turnNumber = 9;
 * @return {number}
 */
proto.PlayerInfo.prototype.getTurnnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setTurnnumber = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 teamId = 10;
 * @return {number}
 */
proto.PlayerInfo.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 controllerSeatId = 12;
 * @return {number}
 */
proto.PlayerInfo.prototype.getControllerseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setControllerseatid = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional ControllerType controllerType = 13;
 * @return {!proto.ControllerType}
 */
proto.PlayerInfo.prototype.getControllertype = function() {
  return /** @type {!proto.ControllerType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.ControllerType} value */
proto.PlayerInfo.prototype.setControllertype = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional uint32 timeoutCount = 14;
 * @return {number}
 */
proto.PlayerInfo.prototype.getTimeoutcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setTimeoutcount = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 pipCount = 15;
 * @return {number}
 */
proto.PlayerInfo.prototype.getPipcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setPipcount = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional ClientMessageType pendingMessageType = 16;
 * @return {!proto.ClientMessageType}
 */
proto.PlayerInfo.prototype.getPendingmessagetype = function() {
  return /** @type {!proto.ClientMessageType} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.ClientMessageType} value */
proto.PlayerInfo.prototype.setPendingmessagetype = function(value) {
  jspb.Message.setProto3EnumField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerMetricKeyValuePair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerMetricKeyValuePair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerMetricKeyValuePair.displayName = 'proto.PlayerMetricKeyValuePair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerMetricKeyValuePair.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerMetricKeyValuePair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerMetricKeyValuePair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerMetricKeyValuePair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerMetricKeyValuePair}
 */
proto.PlayerMetricKeyValuePair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerMetricKeyValuePair;
  return proto.PlayerMetricKeyValuePair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerMetricKeyValuePair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerMetricKeyValuePair}
 */
proto.PlayerMetricKeyValuePair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerMetricKeyValuePair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerMetricKeyValuePair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerMetricKeyValuePair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerMetricKeyValuePair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.PlayerMetricKeyValuePair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PlayerMetricKeyValuePair.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.PlayerMetricKeyValuePair.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PlayerMetricKeyValuePair.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerMetrics.repeatedFields_, null);
};
goog.inherits(proto.PlayerMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerMetrics.displayName = 'proto.PlayerMetrics';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerMetrics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.KeyValuePairInfo.toObject, includeInstance),
    playerid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerMetrics}
 */
proto.PlayerMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerMetrics;
  return proto.PlayerMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerMetrics}
 */
proto.PlayerMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.KeyValuePairInfo;
      reader.readMessage(value,proto.KeyValuePairInfo.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.KeyValuePairInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated KeyValuePairInfo metrics = 2;
 * @return {!Array.<!proto.KeyValuePairInfo>}
 */
proto.PlayerMetrics.prototype.getMetricsList = function() {
  return /** @type{!Array.<!proto.KeyValuePairInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.KeyValuePairInfo, 2));
};


/** @param {!Array.<!proto.KeyValuePairInfo>} value */
proto.PlayerMetrics.prototype.setMetricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.KeyValuePairInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyValuePairInfo}
 */
proto.PlayerMetrics.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.KeyValuePairInfo, opt_index);
};


proto.PlayerMetrics.prototype.clearMetricsList = function() {
  this.setMetricsList([]);
};


/**
 * optional uint32 playerId = 1;
 * @return {number}
 */
proto.PlayerMetrics.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PlayerMetrics.prototype.setPlayerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Prompt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Prompt.repeatedFields_, null);
};
goog.inherits(proto.Prompt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Prompt.displayName = 'proto.Prompt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Prompt.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Prompt.prototype.toObject = function(opt_includeInstance) {
  return proto.Prompt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Prompt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Prompt.toObject = function(includeInstance, msg) {
  var f, obj = {
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.PromptParameter.toObject, includeInstance),
    choicesList: jspb.Message.toObjectList(msg.getChoicesList(),
    proto.Choice.toObject, includeInstance),
    promptid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Prompt}
 */
proto.Prompt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Prompt;
  return proto.Prompt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Prompt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Prompt}
 */
proto.Prompt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.PromptParameter;
      reader.readMessage(value,proto.PromptParameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    case 3:
      var value = new proto.Choice;
      reader.readMessage(value,proto.Choice.deserializeBinaryFromReader);
      msg.addChoices(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPromptid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Prompt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Prompt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Prompt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Prompt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PromptParameter.serializeBinaryToWriter
    );
  }
  f = message.getChoicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Choice.serializeBinaryToWriter
    );
  }
  f = message.getPromptid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated PromptParameter parameters = 2;
 * @return {!Array.<!proto.PromptParameter>}
 */
proto.Prompt.prototype.getParametersList = function() {
  return /** @type{!Array.<!proto.PromptParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PromptParameter, 2));
};


/** @param {!Array.<!proto.PromptParameter>} value */
proto.Prompt.prototype.setParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PromptParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PromptParameter}
 */
proto.Prompt.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PromptParameter, opt_index);
};


proto.Prompt.prototype.clearParametersList = function() {
  this.setParametersList([]);
};


/**
 * repeated Choice choices = 3;
 * @return {!Array.<!proto.Choice>}
 */
proto.Prompt.prototype.getChoicesList = function() {
  return /** @type{!Array.<!proto.Choice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Choice, 3));
};


/** @param {!Array.<!proto.Choice>} value */
proto.Prompt.prototype.setChoicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Choice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Choice}
 */
proto.Prompt.prototype.addChoices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Choice, opt_index);
};


proto.Prompt.prototype.clearChoicesList = function() {
  this.setChoicesList([]);
};


/**
 * optional uint32 promptId = 1;
 * @return {number}
 */
proto.Prompt.prototype.getPromptid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Prompt.prototype.setPromptid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PromptParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PromptParameter.repeatedFields_, null);
};
goog.inherits(proto.PromptParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PromptParameter.displayName = 'proto.PromptParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PromptParameter.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PromptParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.PromptParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PromptParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PromptParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    parametername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 4, ""),
    repeatednumbersList: jspb.Message.getRepeatedField(msg, 6),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reference: (f = msg.getReference()) && proto.Reference.toObject(includeInstance, f),
    numbervalue: jspb.Message.getFieldWithDefault(msg, 5, 0),
    promptid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PromptParameter}
 */
proto.PromptParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PromptParameter;
  return proto.PromptParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PromptParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PromptParameter}
 */
proto.PromptParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParametername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setRepeatednumbersList(value);
      break;
    case 2:
      var value = /** @type {!proto.ParameterType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.Reference;
      reader.readMessage(value,proto.Reference.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumbervalue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPromptid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PromptParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PromptParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PromptParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PromptParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParametername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStringvalue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRepeatednumbersList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Reference.serializeBinaryToWriter
    );
  }
  f = message.getNumbervalue();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPromptid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string parameterName = 1;
 * @return {string}
 */
proto.PromptParameter.prototype.getParametername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PromptParameter.prototype.setParametername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string stringValue = 4;
 * @return {string}
 */
proto.PromptParameter.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.PromptParameter.prototype.setStringvalue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated int32 repeatedNumbers = 6;
 * @return {!Array.<number>}
 */
proto.PromptParameter.prototype.getRepeatednumbersList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.PromptParameter.prototype.setRepeatednumbersList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.PromptParameter.prototype.addRepeatednumbers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.PromptParameter.prototype.clearRepeatednumbersList = function() {
  this.setRepeatednumbersList([]);
};


/**
 * optional ParameterType type = 2;
 * @return {!proto.ParameterType}
 */
proto.PromptParameter.prototype.getType = function() {
  return /** @type {!proto.ParameterType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ParameterType} value */
proto.PromptParameter.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Reference reference = 3;
 * @return {?proto.Reference}
 */
proto.PromptParameter.prototype.getReference = function() {
  return /** @type{?proto.Reference} */ (
    jspb.Message.getWrapperField(this, proto.Reference, 3));
};


/** @param {?proto.Reference|undefined} value */
proto.PromptParameter.prototype.setReference = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.PromptParameter.prototype.clearReference = function() {
  this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PromptParameter.prototype.hasReference = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 numberValue = 5;
 * @return {number}
 */
proto.PromptParameter.prototype.getNumbervalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.PromptParameter.prototype.setNumbervalue = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 promptId = 7;
 * @return {number}
 */
proto.PromptParameter.prototype.getPromptid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.PromptParameter.prototype.setPromptid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueueInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueueInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueueInfo.displayName = 'proto.QueueInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueueInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.QueueInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueueInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueueInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    queueservicebaseuri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    queueserviceerrorcallbackuri: jspb.Message.getFieldWithDefault(msg, 6, ""),
    queueserviceoutputcallbackuri: jspb.Message.getFieldWithDefault(msg, 7, ""),
    queuetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minimumplayercount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    playerbatchsize: jspb.Message.getFieldWithDefault(msg, 11, 0),
    triggercadencems: jspb.Message.getFieldWithDefault(msg, 12, 0),
    createdtimestamp: jspb.Message.getFieldWithDefault(msg, 20, 0),
    updatedtimestamp: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueueInfo}
 */
proto.QueueInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueueInfo;
  return proto.QueueInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueueInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueueInfo}
 */
proto.QueueInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueueservicebaseuri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueueserviceerrorcallbackuri(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueueserviceoutputcallbackuri(value);
      break;
    case 3:
      var value = /** @type {!proto.QueueType} */ (reader.readEnum());
      msg.setQueuetype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumplayercount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerbatchsize(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTriggercadencems(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedtimestamp(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueueInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueueInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueueInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueueInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQueueservicebaseuri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getQueueserviceerrorcallbackuri();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getQueueserviceoutputcallbackuri();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getQueuetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMinimumplayercount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPlayerbatchsize();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTriggercadencems();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getCreatedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = message.getUpdatedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.QueueInfo.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.QueueInfo.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string queueServiceBaseUri = 5;
 * @return {string}
 */
proto.QueueInfo.prototype.getQueueservicebaseuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.QueueInfo.prototype.setQueueservicebaseuri = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string queueServiceErrorCallbackUri = 6;
 * @return {string}
 */
proto.QueueInfo.prototype.getQueueserviceerrorcallbackuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.QueueInfo.prototype.setQueueserviceerrorcallbackuri = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string queueServiceOutputCallbackUri = 7;
 * @return {string}
 */
proto.QueueInfo.prototype.getQueueserviceoutputcallbackuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.QueueInfo.prototype.setQueueserviceoutputcallbackuri = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional QueueType queueType = 3;
 * @return {!proto.QueueType}
 */
proto.QueueInfo.prototype.getQueuetype = function() {
  return /** @type {!proto.QueueType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.QueueType} value */
proto.QueueInfo.prototype.setQueuetype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 minimumPlayerCount = 10;
 * @return {number}
 */
proto.QueueInfo.prototype.getMinimumplayercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.QueueInfo.prototype.setMinimumplayercount = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 playerBatchSize = 11;
 * @return {number}
 */
proto.QueueInfo.prototype.getPlayerbatchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.QueueInfo.prototype.setPlayerbatchsize = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 triggerCadenceMs = 12;
 * @return {number}
 */
proto.QueueInfo.prototype.getTriggercadencems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.QueueInfo.prototype.setTriggercadencems = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 createdTimestamp = 20;
 * @return {number}
 */
proto.QueueInfo.prototype.getCreatedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.QueueInfo.prototype.setCreatedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int64 updatedTimestamp = 21;
 * @return {number}
 */
proto.QueueInfo.prototype.getUpdatedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.QueueInfo.prototype.setUpdatedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Reference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Reference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Reference.displayName = 'proto.Reference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Reference.prototype.toObject = function(opt_includeInstance) {
  return proto.Reference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Reference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Reference.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 3, ""),
    debugvalue: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Reference}
 */
proto.Reference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Reference;
  return proto.Reference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Reference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Reference}
 */
proto.Reference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugvalue(value);
      break;
    case 1:
      var value = /** @type {!proto.ReferenceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Reference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Reference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Reference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Reference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDebugvalue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string field = 3;
 * @return {string}
 */
proto.Reference.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Reference.prototype.setField = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string debugValue = 4;
 * @return {string}
 */
proto.Reference.prototype.getDebugvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Reference.prototype.setDebugvalue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ReferenceType type = 1;
 * @return {!proto.ReferenceType}
 */
proto.Reference.prototype.getType = function() {
  return /** @type {!proto.ReferenceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ReferenceType} value */
proto.Reference.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.Reference.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Reference.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReplacementEffect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReplacementEffect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReplacementEffect.displayName = 'proto.ReplacementEffect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReplacementEffect.prototype.toObject = function(opt_includeInstance) {
  return proto.ReplacementEffect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReplacementEffect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplacementEffect.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinstance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    abilityinstance: jspb.Message.getFieldWithDefault(msg, 2, 0),
    abilitygrpid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    affectedobject: jspb.Message.getFieldWithDefault(msg, 5, 0),
    replacementeffectid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReplacementEffect}
 */
proto.ReplacementEffect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReplacementEffect;
  return proto.ReplacementEffect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReplacementEffect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReplacementEffect}
 */
proto.ReplacementEffect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjectinstance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilityinstance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbilitygrpid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAffectedobject(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplacementeffectid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReplacementEffect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReplacementEffect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReplacementEffect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplacementEffect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAbilityinstance();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAbilitygrpid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAffectedobject();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getReplacementeffectid();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 objectInstance = 1;
 * @return {number}
 */
proto.ReplacementEffect.prototype.getObjectinstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ReplacementEffect.prototype.setObjectinstance = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 abilityInstance = 2;
 * @return {number}
 */
proto.ReplacementEffect.prototype.getAbilityinstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ReplacementEffect.prototype.setAbilityinstance = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 abilityGrpId = 4;
 * @return {number}
 */
proto.ReplacementEffect.prototype.getAbilitygrpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ReplacementEffect.prototype.setAbilitygrpid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 affectedObject = 5;
 * @return {number}
 */
proto.ReplacementEffect.prototype.getAffectedobject = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ReplacementEffect.prototype.setAffectedobject = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 replacementEffectId = 6;
 * @return {number}
 */
proto.ReplacementEffect.prototype.getReplacementeffectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ReplacementEffect.prototype.setReplacementeffectid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReportResultMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReportResultMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReportResultMessage.displayName = 'proto.ReportResultMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReportResultMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ReportResultMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReportResultMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReportResultMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.ResultSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReportResultMessage}
 */
proto.ReportResultMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReportResultMessage;
  return proto.ReportResultMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReportResultMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReportResultMessage}
 */
proto.ReportResultMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResultSpec;
      reader.readMessage(value,proto.ResultSpec.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReportResultMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReportResultMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReportResultMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReportResultMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ResultSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultSpec result = 1;
 * @return {?proto.ResultSpec}
 */
proto.ReportResultMessage.prototype.getResult = function() {
  return /** @type{?proto.ResultSpec} */ (
    jspb.Message.getWrapperField(this, proto.ResultSpec, 1));
};


/** @param {?proto.ResultSpec|undefined} value */
proto.ReportResultMessage.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ReportResultMessage.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReportResultMessage.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResultSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResultSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResultSpec.displayName = 'proto.ResultSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResultSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.ResultSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResultSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResultSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0),
    winningteamid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResultSpec}
 */
proto.ResultSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResultSpec;
  return proto.ResultSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResultSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResultSpec}
 */
proto.ResultSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MatchScope} */ (reader.readEnum());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {!proto.ResultType} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinningteamid(value);
      break;
    case 4:
      var value = /** @type {!proto.ResultReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResultSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResultSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResultSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResultSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWinningteamid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional MatchScope scope = 1;
 * @return {!proto.MatchScope}
 */
proto.ResultSpec.prototype.getScope = function() {
  return /** @type {!proto.MatchScope} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MatchScope} value */
proto.ResultSpec.prototype.setScope = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ResultType result = 2;
 * @return {!proto.ResultType}
 */
proto.ResultSpec.prototype.getResult = function() {
  return /** @type {!proto.ResultType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ResultType} value */
proto.ResultSpec.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 winningTeamId = 3;
 * @return {number}
 */
proto.ResultSpec.prototype.getWinningteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ResultSpec.prototype.setWinningteamid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ResultReason reason = 4;
 * @return {!proto.ResultReason}
 */
proto.ResultSpec.prototype.getReason = function() {
  return /** @type {!proto.ResultReason} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ResultReason} value */
proto.ResultSpec.prototype.setReason = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchFromGroupsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchFromGroupsReq.repeatedFields_, null);
};
goog.inherits(proto.SearchFromGroupsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SearchFromGroupsReq.displayName = 'proto.SearchFromGroupsReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchFromGroupsReq.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchFromGroupsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchFromGroupsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchFromGroupsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchFromGroupsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    zonestosearchList: jspb.Message.getRepeatedField(msg, 4),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.Group.toObject, includeInstance),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minfind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxfind: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupingstyle: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchFromGroupsReq}
 */
proto.SearchFromGroupsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchFromGroupsReq;
  return proto.SearchFromGroupsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchFromGroupsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchFromGroupsReq}
 */
proto.SearchFromGroupsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setZonestosearchList(value);
      break;
    case 5:
      var value = new proto.Group;
      reader.readMessage(value,proto.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinfind(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxfind(value);
      break;
    case 6:
      var value = /** @type {!proto.GroupingStyle} */ (reader.readEnum());
      msg.setGroupingstyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchFromGroupsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchFromGroupsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchFromGroupsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchFromGroupsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZonestosearchList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Group.serializeBinaryToWriter
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinfind();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxfind();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGroupingstyle();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * repeated uint32 zonesToSearch = 4;
 * @return {!Array.<number>}
 */
proto.SearchFromGroupsReq.prototype.getZonestosearchList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.SearchFromGroupsReq.prototype.setZonestosearchList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SearchFromGroupsReq.prototype.addZonestosearch = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.SearchFromGroupsReq.prototype.clearZonestosearchList = function() {
  this.setZonestosearchList([]);
};


/**
 * repeated Group groups = 5;
 * @return {!Array.<!proto.Group>}
 */
proto.SearchFromGroupsReq.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Group, 5));
};


/** @param {!Array.<!proto.Group>} value */
proto.SearchFromGroupsReq.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Group}
 */
proto.SearchFromGroupsReq.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Group, opt_index);
};


proto.SearchFromGroupsReq.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.SearchFromGroupsReq.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SearchFromGroupsReq.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minFind = 2;
 * @return {number}
 */
proto.SearchFromGroupsReq.prototype.getMinfind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SearchFromGroupsReq.prototype.setMinfind = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxFind = 3;
 * @return {number}
 */
proto.SearchFromGroupsReq.prototype.getMaxfind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SearchFromGroupsReq.prototype.setMaxfind = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional GroupingStyle groupingStyle = 6;
 * @return {!proto.GroupingStyle}
 */
proto.SearchFromGroupsReq.prototype.getGroupingstyle = function() {
  return /** @type {!proto.GroupingStyle} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.GroupingStyle} value */
proto.SearchFromGroupsReq.prototype.setGroupingstyle = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchFromGroupsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchFromGroupsResp.repeatedFields_, null);
};
goog.inherits(proto.SearchFromGroupsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SearchFromGroupsResp.displayName = 'proto.SearchFromGroupsResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchFromGroupsResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchFromGroupsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchFromGroupsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchFromGroupsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchFromGroupsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsfoundList: jspb.Message.getRepeatedField(msg, 2),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchFromGroupsResp}
 */
proto.SearchFromGroupsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchFromGroupsResp;
  return proto.SearchFromGroupsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchFromGroupsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchFromGroupsResp}
 */
proto.SearchFromGroupsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setItemsfoundList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchFromGroupsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchFromGroupsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchFromGroupsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchFromGroupsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsfoundList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 itemsFound = 2;
 * @return {!Array.<number>}
 */
proto.SearchFromGroupsResp.prototype.getItemsfoundList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.SearchFromGroupsResp.prototype.setItemsfoundList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SearchFromGroupsResp.prototype.addItemsfound = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SearchFromGroupsResp.prototype.clearItemsfoundList = function() {
  this.setItemsfoundList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.SearchFromGroupsResp.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SearchFromGroupsResp.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchReq.repeatedFields_, null);
};
goog.inherits(proto.SearchReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SearchReq.displayName = 'proto.SearchReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchReq.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    zonestosearchList: jspb.Message.getRepeatedField(msg, 4),
    itemstosearchList: jspb.Message.getRepeatedField(msg, 5),
    itemssoughtList: jspb.Message.getRepeatedField(msg, 6),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minfind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxfind: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchReq}
 */
proto.SearchReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchReq;
  return proto.SearchReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchReq}
 */
proto.SearchReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setZonestosearchList(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setItemstosearchList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setItemssoughtList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinfind(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxfind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZonestosearchList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getItemstosearchList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getItemssoughtList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinfind();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxfind();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated uint32 zonesToSearch = 4;
 * @return {!Array.<number>}
 */
proto.SearchReq.prototype.getZonestosearchList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.SearchReq.prototype.setZonestosearchList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SearchReq.prototype.addZonestosearch = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.SearchReq.prototype.clearZonestosearchList = function() {
  this.setZonestosearchList([]);
};


/**
 * repeated uint32 itemsToSearch = 5;
 * @return {!Array.<number>}
 */
proto.SearchReq.prototype.getItemstosearchList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.SearchReq.prototype.setItemstosearchList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SearchReq.prototype.addItemstosearch = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.SearchReq.prototype.clearItemstosearchList = function() {
  this.setItemstosearchList([]);
};


/**
 * repeated uint32 itemsSought = 6;
 * @return {!Array.<number>}
 */
proto.SearchReq.prototype.getItemssoughtList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.SearchReq.prototype.setItemssoughtList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SearchReq.prototype.addItemssought = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.SearchReq.prototype.clearItemssoughtList = function() {
  this.setItemssoughtList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.SearchReq.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SearchReq.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minFind = 2;
 * @return {number}
 */
proto.SearchReq.prototype.getMinfind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SearchReq.prototype.setMinfind = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxFind = 3;
 * @return {number}
 */
proto.SearchReq.prototype.getMaxfind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SearchReq.prototype.setMaxfind = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchResp.repeatedFields_, null);
};
goog.inherits(proto.SearchResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SearchResp.displayName = 'proto.SearchResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsfoundList: jspb.Message.getRepeatedField(msg, 2),
    optionindex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchResp}
 */
proto.SearchResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchResp;
  return proto.SearchResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchResp}
 */
proto.SearchResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setItemsfoundList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsfoundList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getOptionindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 itemsFound = 2;
 * @return {!Array.<number>}
 */
proto.SearchResp.prototype.getItemsfoundList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.SearchResp.prototype.setItemsfoundList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SearchResp.prototype.addItemsfound = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SearchResp.prototype.clearItemsfoundList = function() {
  this.setItemsfoundList([]);
};


/**
 * optional uint32 optionIndex = 1;
 * @return {number}
 */
proto.SearchResp.prototype.getOptionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SearchResp.prototype.setOptionindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectCountersReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectCountersReq.repeatedFields_, null);
};
goog.inherits(proto.SelectCountersReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectCountersReq.displayName = 'proto.SelectCountersReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectCountersReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectCountersReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectCountersReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectCountersReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectCountersReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    countersList: jspb.Message.toObjectList(msg.getCountersList(),
    proto.Counter.toObject, includeInstance),
    minsel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxsel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    context: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectCountersReq}
 */
proto.SelectCountersReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectCountersReq;
  return proto.SelectCountersReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectCountersReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectCountersReq}
 */
proto.SelectCountersReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.Counter;
      reader.readMessage(value,proto.Counter.deserializeBinaryFromReader);
      msg.addCounters(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinsel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxsel(value);
      break;
    case 3:
      var value = /** @type {!proto.SelectionContext} */ (reader.readEnum());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectCountersReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectCountersReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectCountersReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectCountersReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Counter.serializeBinaryToWriter
    );
  }
  f = message.getMinsel();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMaxsel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated Counter counters = 4;
 * @return {!Array.<!proto.Counter>}
 */
proto.SelectCountersReq.prototype.getCountersList = function() {
  return /** @type{!Array.<!proto.Counter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Counter, 4));
};


/** @param {!Array.<!proto.Counter>} value */
proto.SelectCountersReq.prototype.setCountersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Counter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Counter}
 */
proto.SelectCountersReq.prototype.addCounters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Counter, opt_index);
};


proto.SelectCountersReq.prototype.clearCountersList = function() {
  this.setCountersList([]);
};


/**
 * optional uint32 minSel = 1;
 * @return {number}
 */
proto.SelectCountersReq.prototype.getMinsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectCountersReq.prototype.setMinsel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 maxSel = 2;
 * @return {number}
 */
proto.SelectCountersReq.prototype.getMaxsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SelectCountersReq.prototype.setMaxsel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SelectionContext context = 3;
 * @return {!proto.SelectionContext}
 */
proto.SelectCountersReq.prototype.getContext = function() {
  return /** @type {!proto.SelectionContext} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SelectionContext} value */
proto.SelectCountersReq.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectCountersResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectCountersResp.repeatedFields_, null);
};
goog.inherits(proto.SelectCountersResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectCountersResp.displayName = 'proto.SelectCountersResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectCountersResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectCountersResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectCountersResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectCountersResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectCountersResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    countersList: jspb.Message.toObjectList(msg.getCountersList(),
    proto.Counter.toObject, includeInstance),
    context: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectCountersResp}
 */
proto.SelectCountersResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectCountersResp;
  return proto.SelectCountersResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectCountersResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectCountersResp}
 */
proto.SelectCountersResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.Counter;
      reader.readMessage(value,proto.Counter.deserializeBinaryFromReader);
      msg.addCounters(value);
      break;
    case 1:
      var value = /** @type {!proto.SelectionContext} */ (reader.readEnum());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectCountersResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectCountersResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectCountersResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectCountersResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Counter.serializeBinaryToWriter
    );
  }
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * repeated Counter counters = 2;
 * @return {!Array.<!proto.Counter>}
 */
proto.SelectCountersResp.prototype.getCountersList = function() {
  return /** @type{!Array.<!proto.Counter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Counter, 2));
};


/** @param {!Array.<!proto.Counter>} value */
proto.SelectCountersResp.prototype.setCountersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Counter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Counter}
 */
proto.SelectCountersResp.prototype.addCounters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Counter, opt_index);
};


proto.SelectCountersResp.prototype.clearCountersList = function() {
  this.setCountersList([]);
};


/**
 * optional SelectionContext context = 1;
 * @return {!proto.SelectionContext}
 */
proto.SelectCountersResp.prototype.getContext = function() {
  return /** @type {!proto.SelectionContext} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.SelectionContext} value */
proto.SelectCountersResp.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectFromGroupsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectFromGroupsReq.repeatedFields_, null);
};
goog.inherits(proto.SelectFromGroupsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectFromGroupsReq.displayName = 'proto.SelectFromGroupsReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectFromGroupsReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectFromGroupsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectFromGroupsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectFromGroupsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectFromGroupsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.Group.toObject, includeInstance),
    idx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mintotalsel: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxtotalsel: jspb.Message.getFieldWithDefault(msg, 6, 0),
    groupingstyle: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectFromGroupsReq}
 */
proto.SelectFromGroupsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectFromGroupsReq;
  return proto.SelectFromGroupsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectFromGroupsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectFromGroupsReq}
 */
proto.SelectFromGroupsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.Group;
      reader.readMessage(value,proto.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMintotalsel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxtotalsel(value);
      break;
    case 7:
      var value = /** @type {!proto.GroupingStyle} */ (reader.readEnum());
      msg.setGroupingstyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectFromGroupsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectFromGroupsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectFromGroupsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectFromGroupsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Group.serializeBinaryToWriter
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMintotalsel();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaxtotalsel();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getGroupingstyle();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * repeated Group groups = 3;
 * @return {!Array.<!proto.Group>}
 */
proto.SelectFromGroupsReq.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Group, 3));
};


/** @param {!Array.<!proto.Group>} value */
proto.SelectFromGroupsReq.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Group}
 */
proto.SelectFromGroupsReq.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Group, opt_index);
};


proto.SelectFromGroupsReq.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional uint32 idx = 4;
 * @return {number}
 */
proto.SelectFromGroupsReq.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SelectFromGroupsReq.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 minTotalSel = 5;
 * @return {number}
 */
proto.SelectFromGroupsReq.prototype.getMintotalsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SelectFromGroupsReq.prototype.setMintotalsel = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 maxTotalSel = 6;
 * @return {number}
 */
proto.SelectFromGroupsReq.prototype.getMaxtotalsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SelectFromGroupsReq.prototype.setMaxtotalsel = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional GroupingStyle groupingStyle = 7;
 * @return {!proto.GroupingStyle}
 */
proto.SelectFromGroupsReq.prototype.getGroupingstyle = function() {
  return /** @type {!proto.GroupingStyle} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.GroupingStyle} value */
proto.SelectFromGroupsReq.prototype.setGroupingstyle = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectFromGroupsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectFromGroupsResp.repeatedFields_, null);
};
goog.inherits(proto.SelectFromGroupsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectFromGroupsResp.displayName = 'proto.SelectFromGroupsResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectFromGroupsResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectFromGroupsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectFromGroupsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectFromGroupsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectFromGroupsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 2),
    idx: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectFromGroupsResp}
 */
proto.SelectFromGroupsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectFromGroupsResp;
  return proto.SelectFromGroupsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectFromGroupsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectFromGroupsResp}
 */
proto.SelectFromGroupsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIdsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectFromGroupsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectFromGroupsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectFromGroupsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectFromGroupsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 ids = 2;
 * @return {!Array.<number>}
 */
proto.SelectFromGroupsResp.prototype.getIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.SelectFromGroupsResp.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SelectFromGroupsResp.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SelectFromGroupsResp.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


/**
 * optional uint32 idx = 1;
 * @return {number}
 */
proto.SelectFromGroupsResp.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectFromGroupsResp.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectManaTypeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectManaTypeReq.repeatedFields_, null);
};
goog.inherits(proto.SelectManaTypeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectManaTypeReq.displayName = 'proto.SelectManaTypeReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectManaTypeReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectManaTypeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectManaTypeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectManaTypeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectManaTypeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    manacolorsList: jspb.Message.getRepeatedField(msg, 2),
    index: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectManaTypeReq}
 */
proto.SelectManaTypeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectManaTypeReq;
  return proto.SelectManaTypeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectManaTypeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectManaTypeReq}
 */
proto.SelectManaTypeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<!proto.ManaColor>} */ (reader.readPackedEnum());
      msg.setManacolorsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectManaTypeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectManaTypeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectManaTypeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectManaTypeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getManacolorsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated ManaColor manaColors = 2;
 * @return {!Array.<!proto.ManaColor>}
 */
proto.SelectManaTypeReq.prototype.getManacolorsList = function() {
  return /** @type {!Array.<!proto.ManaColor>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.ManaColor>} value */
proto.SelectManaTypeReq.prototype.setManacolorsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.ManaColor} value
 * @param {number=} opt_index
 */
proto.SelectManaTypeReq.prototype.addManacolors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SelectManaTypeReq.prototype.clearManacolorsList = function() {
  this.setManacolorsList([]);
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.SelectManaTypeReq.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectManaTypeReq.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectManaTypeResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectManaTypeResp.repeatedFields_, null);
};
goog.inherits(proto.SelectManaTypeResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectManaTypeResp.displayName = 'proto.SelectManaTypeResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectManaTypeResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectManaTypeResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectManaTypeResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectManaTypeResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectManaTypeResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    manacolorsList: jspb.Message.getRepeatedField(msg, 2),
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    manacolor: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectManaTypeResp}
 */
proto.SelectManaTypeResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectManaTypeResp;
  return proto.SelectManaTypeResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectManaTypeResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectManaTypeResp}
 */
proto.SelectManaTypeResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<!proto.ManaColor>} */ (reader.readPackedEnum());
      msg.setManacolorsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!proto.ManaColor} */ (reader.readEnum());
      msg.setManacolor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectManaTypeResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectManaTypeResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectManaTypeResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectManaTypeResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getManacolorsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getManacolor();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated ManaColor manaColors = 2;
 * @return {!Array.<!proto.ManaColor>}
 */
proto.SelectManaTypeResp.prototype.getManacolorsList = function() {
  return /** @type {!Array.<!proto.ManaColor>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.ManaColor>} value */
proto.SelectManaTypeResp.prototype.setManacolorsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.ManaColor} value
 * @param {number=} opt_index
 */
proto.SelectManaTypeResp.prototype.addManacolors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SelectManaTypeResp.prototype.clearManacolorsList = function() {
  this.setManacolorsList([]);
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.SelectManaTypeResp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectManaTypeResp.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ManaColor manaColor = 3;
 * @return {!proto.ManaColor}
 */
proto.SelectManaTypeResp.prototype.getManacolor = function() {
  return /** @type {!proto.ManaColor} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ManaColor} value */
proto.SelectManaTypeResp.prototype.setManacolor = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectNGroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectNGroupReq.repeatedFields_, null);
};
goog.inherits(proto.SelectNGroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectNGroupReq.displayName = 'proto.SelectNGroupReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectNGroupReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectNGroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectNGroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectNGroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNGroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.Group.toObject, includeInstance),
    minsel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxsel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    idx: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectNGroupReq}
 */
proto.SelectNGroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectNGroupReq;
  return proto.SelectNGroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectNGroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectNGroupReq}
 */
proto.SelectNGroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.Group;
      reader.readMessage(value,proto.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinsel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxsel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectNGroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectNGroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectNGroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNGroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Group.serializeBinaryToWriter
    );
  }
  f = message.getMinsel();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMaxsel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated Group groups = 3;
 * @return {!Array.<!proto.Group>}
 */
proto.SelectNGroupReq.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Group, 3));
};


/** @param {!Array.<!proto.Group>} value */
proto.SelectNGroupReq.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Group}
 */
proto.SelectNGroupReq.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Group, opt_index);
};


proto.SelectNGroupReq.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional uint32 minSel = 1;
 * @return {number}
 */
proto.SelectNGroupReq.prototype.getMinsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectNGroupReq.prototype.setMinsel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 maxSel = 2;
 * @return {number}
 */
proto.SelectNGroupReq.prototype.getMaxsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SelectNGroupReq.prototype.setMaxsel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 idx = 4;
 * @return {number}
 */
proto.SelectNGroupReq.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SelectNGroupReq.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectNGroupResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectNGroupResp.repeatedFields_, null);
};
goog.inherits(proto.SelectNGroupResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectNGroupResp.displayName = 'proto.SelectNGroupResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectNGroupResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectNGroupResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectNGroupResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectNGroupResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNGroupResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectedgroupidsList: jspb.Message.getRepeatedField(msg, 2),
    idx: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectNGroupResp}
 */
proto.SelectNGroupResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectNGroupResp;
  return proto.SelectNGroupResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectNGroupResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectNGroupResp}
 */
proto.SelectNGroupResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSelectedgroupidsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectNGroupResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectNGroupResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectNGroupResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNGroupResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectedgroupidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 selectedgroupids = 2;
 * @return {!Array.<number>}
 */
proto.SelectNGroupResp.prototype.getSelectedgroupidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.SelectNGroupResp.prototype.setSelectedgroupidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SelectNGroupResp.prototype.addSelectedgroupids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SelectNGroupResp.prototype.clearSelectedgroupidsList = function() {
  this.setSelectedgroupidsList([]);
};


/**
 * optional uint32 idx = 1;
 * @return {number}
 */
proto.SelectNGroupResp.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectNGroupResp.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectNReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectNReq.repeatedFields_, null);
};
goog.inherits(proto.SelectNReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectNReq.displayName = 'proto.SelectNReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectNReq.repeatedFields_ = [7,8,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectNReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectNReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectNReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 7),
    weightsList: jspb.Message.getRepeatedField(msg, 8),
    unfilteredidsList: jspb.Message.getRepeatedField(msg, 14),
    minsel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxsel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    context: jspb.Message.getFieldWithDefault(msg, 3, 0),
    optiontype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    optioncontext: jspb.Message.getFieldWithDefault(msg, 5, 0),
    listtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    staticlist: jspb.Message.getFieldWithDefault(msg, 9, 0),
    idx: jspb.Message.getFieldWithDefault(msg, 10, 0),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f),
    idtype: jspb.Message.getFieldWithDefault(msg, 12, 0),
    choicesarerepeatable: jspb.Message.getFieldWithDefault(msg, 13, false),
    sourceid: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectNReq}
 */
proto.SelectNReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectNReq;
  return proto.SelectNReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectNReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectNReq}
 */
proto.SelectNReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIdsList(value);
      break;
    case 8:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setWeightsList(value);
      break;
    case 14:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setUnfilteredidsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinsel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxsel(value);
      break;
    case 3:
      var value = /** @type {!proto.SelectionContext} */ (reader.readEnum());
      msg.setContext(value);
      break;
    case 4:
      var value = /** @type {!proto.OptionType} */ (reader.readEnum());
      msg.setOptiontype(value);
      break;
    case 5:
      var value = /** @type {!proto.OptionContext} */ (reader.readEnum());
      msg.setOptioncontext(value);
      break;
    case 6:
      var value = /** @type {!proto.SelectionListType} */ (reader.readEnum());
      msg.setListtype(value);
      break;
    case 9:
      var value = /** @type {!proto.StaticList} */ (reader.readEnum());
      msg.setStaticlist(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    case 11:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    case 12:
      var value = /** @type {!proto.IdType} */ (reader.readEnum());
      msg.setIdtype(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChoicesarerepeatable(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectNReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectNReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectNReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      7,
      f
    );
  }
  f = message.getWeightsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      8,
      f
    );
  }
  f = message.getUnfilteredidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      14,
      f
    );
  }
  f = message.getMinsel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMaxsel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOptiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOptioncontext();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getListtype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getStaticlist();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getIdtype();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getChoicesarerepeatable();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getSourceid();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
};


/**
 * repeated uint32 ids = 7;
 * @return {!Array.<number>}
 */
proto.SelectNReq.prototype.getIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<number>} value */
proto.SelectNReq.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SelectNReq.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.SelectNReq.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


/**
 * repeated int32 weights = 8;
 * @return {!Array.<number>}
 */
proto.SelectNReq.prototype.getWeightsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.SelectNReq.prototype.setWeightsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SelectNReq.prototype.addWeights = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.SelectNReq.prototype.clearWeightsList = function() {
  this.setWeightsList([]);
};


/**
 * repeated uint32 unfilteredIds = 14;
 * @return {!Array.<number>}
 */
proto.SelectNReq.prototype.getUnfilteredidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 14));
};


/** @param {!Array.<number>} value */
proto.SelectNReq.prototype.setUnfilteredidsList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SelectNReq.prototype.addUnfilteredids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


proto.SelectNReq.prototype.clearUnfilteredidsList = function() {
  this.setUnfilteredidsList([]);
};


/**
 * optional int32 minSel = 1;
 * @return {number}
 */
proto.SelectNReq.prototype.getMinsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectNReq.prototype.setMinsel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 maxSel = 2;
 * @return {number}
 */
proto.SelectNReq.prototype.getMaxsel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SelectNReq.prototype.setMaxsel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SelectionContext context = 3;
 * @return {!proto.SelectionContext}
 */
proto.SelectNReq.prototype.getContext = function() {
  return /** @type {!proto.SelectionContext} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SelectionContext} value */
proto.SelectNReq.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional OptionType optionType = 4;
 * @return {!proto.OptionType}
 */
proto.SelectNReq.prototype.getOptiontype = function() {
  return /** @type {!proto.OptionType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.OptionType} value */
proto.SelectNReq.prototype.setOptiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional OptionContext optionContext = 5;
 * @return {!proto.OptionContext}
 */
proto.SelectNReq.prototype.getOptioncontext = function() {
  return /** @type {!proto.OptionContext} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.OptionContext} value */
proto.SelectNReq.prototype.setOptioncontext = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional SelectionListType listType = 6;
 * @return {!proto.SelectionListType}
 */
proto.SelectNReq.prototype.getListtype = function() {
  return /** @type {!proto.SelectionListType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.SelectionListType} value */
proto.SelectNReq.prototype.setListtype = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional StaticList staticList = 9;
 * @return {!proto.StaticList}
 */
proto.SelectNReq.prototype.getStaticlist = function() {
  return /** @type {!proto.StaticList} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.StaticList} value */
proto.SelectNReq.prototype.setStaticlist = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint32 idx = 10;
 * @return {number}
 */
proto.SelectNReq.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.SelectNReq.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional Prompt prompt = 11;
 * @return {?proto.Prompt}
 */
proto.SelectNReq.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 11));
};


/** @param {?proto.Prompt|undefined} value */
proto.SelectNReq.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.SelectNReq.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelectNReq.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional IdType idType = 12;
 * @return {!proto.IdType}
 */
proto.SelectNReq.prototype.getIdtype = function() {
  return /** @type {!proto.IdType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.IdType} value */
proto.SelectNReq.prototype.setIdtype = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional bool choicesAreRepeatable = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SelectNReq.prototype.getChoicesarerepeatable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.SelectNReq.prototype.setChoicesarerepeatable = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional uint32 sourceId = 15;
 * @return {number}
 */
proto.SelectNReq.prototype.getSourceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.SelectNReq.prototype.setSourceid = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectNResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectNResp.repeatedFields_, null);
};
goog.inherits(proto.SelectNResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectNResp.displayName = 'proto.SelectNResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectNResp.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectNResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectNResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectNResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 5),
    idx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    context: jspb.Message.getFieldWithDefault(msg, 2, 0),
    optioncontext: jspb.Message.getFieldWithDefault(msg, 3, 0),
    optiontype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    usearbitrary: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectNResp}
 */
proto.SelectNResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectNResp;
  return proto.SelectNResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectNResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectNResp}
 */
proto.SelectNResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIdsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdx(value);
      break;
    case 2:
      var value = /** @type {!proto.SelectionContext} */ (reader.readEnum());
      msg.setContext(value);
      break;
    case 3:
      var value = /** @type {!proto.OptionContext} */ (reader.readEnum());
      msg.setOptioncontext(value);
      break;
    case 4:
      var value = /** @type {!proto.OptionType} */ (reader.readEnum());
      msg.setOptiontype(value);
      break;
    case 6:
      var value = /** @type {!proto.OrderingType} */ (reader.readEnum());
      msg.setUsearbitrary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectNResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectNResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectNResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectNResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOptioncontext();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOptiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getUsearbitrary();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * repeated uint32 ids = 5;
 * @return {!Array.<number>}
 */
proto.SelectNResp.prototype.getIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.SelectNResp.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SelectNResp.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.SelectNResp.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


/**
 * optional uint32 idx = 1;
 * @return {number}
 */
proto.SelectNResp.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SelectNResp.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SelectionContext context = 2;
 * @return {!proto.SelectionContext}
 */
proto.SelectNResp.prototype.getContext = function() {
  return /** @type {!proto.SelectionContext} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.SelectionContext} value */
proto.SelectNResp.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional OptionContext optionContext = 3;
 * @return {!proto.OptionContext}
 */
proto.SelectNResp.prototype.getOptioncontext = function() {
  return /** @type {!proto.OptionContext} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.OptionContext} value */
proto.SelectNResp.prototype.setOptioncontext = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional OptionType optionType = 4;
 * @return {!proto.OptionType}
 */
proto.SelectNResp.prototype.getOptiontype = function() {
  return /** @type {!proto.OptionType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.OptionType} value */
proto.SelectNResp.prototype.setOptiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional OrderingType useArbitrary = 6;
 * @return {!proto.OrderingType}
 */
proto.SelectNResp.prototype.getUsearbitrary = function() {
  return /** @type {!proto.OrderingType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.OrderingType} value */
proto.SelectNResp.prototype.setUsearbitrary = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectReplacementReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectReplacementReq.repeatedFields_, null);
};
goog.inherits(proto.SelectReplacementReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectReplacementReq.displayName = 'proto.SelectReplacementReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectReplacementReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectReplacementReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectReplacementReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectReplacementReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectReplacementReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    replacementsList: jspb.Message.toObjectList(msg.getReplacementsList(),
    proto.ReplacementEffect.toObject, includeInstance),
    isoptional: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectReplacementReq}
 */
proto.SelectReplacementReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectReplacementReq;
  return proto.SelectReplacementReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectReplacementReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectReplacementReq}
 */
proto.SelectReplacementReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ReplacementEffect;
      reader.readMessage(value,proto.ReplacementEffect.deserializeBinaryFromReader);
      msg.addReplacements(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsoptional(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectReplacementReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectReplacementReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectReplacementReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectReplacementReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplacementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ReplacementEffect.serializeBinaryToWriter
    );
  }
  f = message.getIsoptional();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated ReplacementEffect replacements = 1;
 * @return {!Array.<!proto.ReplacementEffect>}
 */
proto.SelectReplacementReq.prototype.getReplacementsList = function() {
  return /** @type{!Array.<!proto.ReplacementEffect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReplacementEffect, 1));
};


/** @param {!Array.<!proto.ReplacementEffect>} value */
proto.SelectReplacementReq.prototype.setReplacementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ReplacementEffect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReplacementEffect}
 */
proto.SelectReplacementReq.prototype.addReplacements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ReplacementEffect, opt_index);
};


proto.SelectReplacementReq.prototype.clearReplacementsList = function() {
  this.setReplacementsList([]);
};


/**
 * optional bool isOptional = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SelectReplacementReq.prototype.getIsoptional = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SelectReplacementReq.prototype.setIsoptional = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectReplacementResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SelectReplacementResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectReplacementResp.displayName = 'proto.SelectReplacementResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectReplacementResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectReplacementResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectReplacementResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectReplacementResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    replacement: (f = msg.getReplacement()) && proto.ReplacementEffect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectReplacementResp}
 */
proto.SelectReplacementResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectReplacementResp;
  return proto.SelectReplacementResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectReplacementResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectReplacementResp}
 */
proto.SelectReplacementResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ReplacementEffect;
      reader.readMessage(value,proto.ReplacementEffect.deserializeBinaryFromReader);
      msg.setReplacement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectReplacementResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectReplacementResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectReplacementResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectReplacementResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplacement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ReplacementEffect.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReplacementEffect replacement = 1;
 * @return {?proto.ReplacementEffect}
 */
proto.SelectReplacementResp.prototype.getReplacement = function() {
  return /** @type{?proto.ReplacementEffect} */ (
    jspb.Message.getWrapperField(this, proto.ReplacementEffect, 1));
};


/** @param {?proto.ReplacementEffect|undefined} value */
proto.SelectReplacementResp.prototype.setReplacement = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SelectReplacementResp.prototype.clearReplacement = function() {
  this.setReplacement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelectReplacementResp.prototype.hasReplacement = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectTargetsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SelectTargetsReq.repeatedFields_, null);
};
goog.inherits(proto.SelectTargetsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectTargetsReq.displayName = 'proto.SelectTargetsReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SelectTargetsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectTargetsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectTargetsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectTargetsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectTargetsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.TargetSelection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectTargetsReq}
 */
proto.SelectTargetsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectTargetsReq;
  return proto.SelectTargetsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectTargetsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectTargetsReq}
 */
proto.SelectTargetsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TargetSelection;
      reader.readMessage(value,proto.TargetSelection.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectTargetsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectTargetsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectTargetsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectTargetsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TargetSelection.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TargetSelection targets = 1;
 * @return {!Array.<!proto.TargetSelection>}
 */
proto.SelectTargetsReq.prototype.getTargetsList = function() {
  return /** @type{!Array.<!proto.TargetSelection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TargetSelection, 1));
};


/** @param {!Array.<!proto.TargetSelection>} value */
proto.SelectTargetsReq.prototype.setTargetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TargetSelection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TargetSelection}
 */
proto.SelectTargetsReq.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TargetSelection, opt_index);
};


proto.SelectTargetsReq.prototype.clearTargetsList = function() {
  this.setTargetsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SelectTargetsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SelectTargetsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SelectTargetsResp.displayName = 'proto.SelectTargetsResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SelectTargetsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SelectTargetsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SelectTargetsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectTargetsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.TargetSelection.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SelectTargetsResp}
 */
proto.SelectTargetsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SelectTargetsResp;
  return proto.SelectTargetsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SelectTargetsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SelectTargetsResp}
 */
proto.SelectTargetsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TargetSelection;
      reader.readMessage(value,proto.TargetSelection.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {!proto.SelectAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SelectTargetsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SelectTargetsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SelectTargetsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SelectTargetsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TargetSelection.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional TargetSelection target = 1;
 * @return {?proto.TargetSelection}
 */
proto.SelectTargetsResp.prototype.getTarget = function() {
  return /** @type{?proto.TargetSelection} */ (
    jspb.Message.getWrapperField(this, proto.TargetSelection, 1));
};


/** @param {?proto.TargetSelection|undefined} value */
proto.SelectTargetsResp.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SelectTargetsResp.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SelectTargetsResp.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SelectAction action = 2;
 * @return {!proto.SelectAction}
 */
proto.SelectTargetsResp.prototype.getAction = function() {
  return /** @type {!proto.SelectAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.SelectAction} value */
proto.SelectTargetsResp.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Selector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Selector.repeatedFields_, null);
};
goog.inherits(proto.Selector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Selector.displayName = 'proto.Selector';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Selector.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Selector.prototype.toObject = function(opt_includeInstance) {
  return proto.Selector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Selector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Selector.toObject = function(includeInstance, msg) {
  var f, obj = {
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Selector}
 */
proto.Selector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Selector;
  return proto.Selector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Selector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Selector}
 */
proto.Selector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Selector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Selector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Selector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Selector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node children = 1;
 * @return {!Array.<!proto.Node>}
 */
proto.Selector.prototype.getChildrenList = function() {
  return /** @type{!Array.<!proto.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Node, 1));
};


/** @param {!Array.<!proto.Node>} value */
proto.Selector.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Node}
 */
proto.Selector.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Node, opt_index);
};


proto.Selector.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Sequence.repeatedFields_, null);
};
goog.inherits(proto.Sequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sequence.displayName = 'proto.Sequence';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Sequence.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Sequence.prototype.toObject = function(opt_includeInstance) {
  return proto.Sequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Sequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sequence.toObject = function(includeInstance, msg) {
  var f, obj = {
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sequence}
 */
proto.Sequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sequence;
  return proto.Sequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sequence}
 */
proto.Sequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Sequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node children = 1;
 * @return {!Array.<!proto.Node>}
 */
proto.Sequence.prototype.getChildrenList = function() {
  return /** @type{!Array.<!proto.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Node, 1));
};


/** @param {!Array.<!proto.Node>} value */
proto.Sequence.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Node}
 */
proto.Sequence.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Node, opt_index);
};


proto.Sequence.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerToGREMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerToGREMessage.oneofGroups_);
};
goog.inherits(proto.ServerToGREMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerToGREMessage.displayName = 'proto.ServerToGREMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerToGREMessage.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.ServerToGREMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CREATEREQUEST: 1,
  CONFIGREQUEST: 2,
  STARTMATCHREQUEST: 3,
  RESUMEMATCHREQUEST: 4,
  SUBMITDECKREQUEST: 5,
  FORCERESULTREQUEST: 6,
  DESTROYREQUEST: 7,
  TIMEREXPIRED: 8,
  TICK: 9,
  TIMEOUT: 10,
  INTERPRETREQUEST: 11,
  EXPIRETIMERREQUEST: 12
};

/**
 * @return {proto.ServerToGREMessage.MessageCase}
 */
proto.ServerToGREMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ServerToGREMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ServerToGREMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerToGREMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerToGREMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerToGREMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerToGREMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    createrequest: (f = msg.getCreaterequest()) && proto.GRECreateRequest.toObject(includeInstance, f),
    configrequest: (f = msg.getConfigrequest()) && proto.GREConfigRequest.toObject(includeInstance, f),
    startmatchrequest: (f = msg.getStartmatchrequest()) && proto.GREStartMatchRequest.toObject(includeInstance, f),
    resumematchrequest: (f = msg.getResumematchrequest()) && proto.GREResumeMatchRequest.toObject(includeInstance, f),
    submitdeckrequest: (f = msg.getSubmitdeckrequest()) && proto.GRESubmitDeckRequest.toObject(includeInstance, f),
    forceresultrequest: (f = msg.getForceresultrequest()) && proto.GREForceResultRequest.toObject(includeInstance, f),
    destroyrequest: (f = msg.getDestroyrequest()) && proto.GREDestroyRequest.toObject(includeInstance, f),
    timerexpired: (f = msg.getTimerexpired()) && proto.GRETimerExpiredMessage.toObject(includeInstance, f),
    tick: (f = msg.getTick()) && proto.GRETickMessage.toObject(includeInstance, f),
    timeout: (f = msg.getTimeout()) && proto.Timeout.toObject(includeInstance, f),
    interpretrequest: (f = msg.getInterpretrequest()) && proto.GREInterpretRequest.toObject(includeInstance, f),
    expiretimerrequest: (f = msg.getExpiretimerrequest()) && proto.GREExpireTimerRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerToGREMessage}
 */
proto.ServerToGREMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerToGREMessage;
  return proto.ServerToGREMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerToGREMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerToGREMessage}
 */
proto.ServerToGREMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GRECreateRequest;
      reader.readMessage(value,proto.GRECreateRequest.deserializeBinaryFromReader);
      msg.setCreaterequest(value);
      break;
    case 2:
      var value = new proto.GREConfigRequest;
      reader.readMessage(value,proto.GREConfigRequest.deserializeBinaryFromReader);
      msg.setConfigrequest(value);
      break;
    case 3:
      var value = new proto.GREStartMatchRequest;
      reader.readMessage(value,proto.GREStartMatchRequest.deserializeBinaryFromReader);
      msg.setStartmatchrequest(value);
      break;
    case 4:
      var value = new proto.GREResumeMatchRequest;
      reader.readMessage(value,proto.GREResumeMatchRequest.deserializeBinaryFromReader);
      msg.setResumematchrequest(value);
      break;
    case 5:
      var value = new proto.GRESubmitDeckRequest;
      reader.readMessage(value,proto.GRESubmitDeckRequest.deserializeBinaryFromReader);
      msg.setSubmitdeckrequest(value);
      break;
    case 6:
      var value = new proto.GREForceResultRequest;
      reader.readMessage(value,proto.GREForceResultRequest.deserializeBinaryFromReader);
      msg.setForceresultrequest(value);
      break;
    case 7:
      var value = new proto.GREDestroyRequest;
      reader.readMessage(value,proto.GREDestroyRequest.deserializeBinaryFromReader);
      msg.setDestroyrequest(value);
      break;
    case 8:
      var value = new proto.GRETimerExpiredMessage;
      reader.readMessage(value,proto.GRETimerExpiredMessage.deserializeBinaryFromReader);
      msg.setTimerexpired(value);
      break;
    case 9:
      var value = new proto.GRETickMessage;
      reader.readMessage(value,proto.GRETickMessage.deserializeBinaryFromReader);
      msg.setTick(value);
      break;
    case 10:
      var value = new proto.Timeout;
      reader.readMessage(value,proto.Timeout.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    case 11:
      var value = new proto.GREInterpretRequest;
      reader.readMessage(value,proto.GREInterpretRequest.deserializeBinaryFromReader);
      msg.setInterpretrequest(value);
      break;
    case 12:
      var value = new proto.GREExpireTimerRequest;
      reader.readMessage(value,proto.GREExpireTimerRequest.deserializeBinaryFromReader);
      msg.setExpiretimerrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerToGREMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerToGREMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerToGREMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerToGREMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreaterequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GRECreateRequest.serializeBinaryToWriter
    );
  }
  f = message.getConfigrequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GREConfigRequest.serializeBinaryToWriter
    );
  }
  f = message.getStartmatchrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GREStartMatchRequest.serializeBinaryToWriter
    );
  }
  f = message.getResumematchrequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.GREResumeMatchRequest.serializeBinaryToWriter
    );
  }
  f = message.getSubmitdeckrequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.GRESubmitDeckRequest.serializeBinaryToWriter
    );
  }
  f = message.getForceresultrequest();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.GREForceResultRequest.serializeBinaryToWriter
    );
  }
  f = message.getDestroyrequest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.GREDestroyRequest.serializeBinaryToWriter
    );
  }
  f = message.getTimerexpired();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.GRETimerExpiredMessage.serializeBinaryToWriter
    );
  }
  f = message.getTick();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.GRETickMessage.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Timeout.serializeBinaryToWriter
    );
  }
  f = message.getInterpretrequest();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.GREInterpretRequest.serializeBinaryToWriter
    );
  }
  f = message.getExpiretimerrequest();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.GREExpireTimerRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional GRECreateRequest createRequest = 1;
 * @return {?proto.GRECreateRequest}
 */
proto.ServerToGREMessage.prototype.getCreaterequest = function() {
  return /** @type{?proto.GRECreateRequest} */ (
    jspb.Message.getWrapperField(this, proto.GRECreateRequest, 1));
};


/** @param {?proto.GRECreateRequest|undefined} value */
proto.ServerToGREMessage.prototype.setCreaterequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearCreaterequest = function() {
  this.setCreaterequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasCreaterequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GREConfigRequest configRequest = 2;
 * @return {?proto.GREConfigRequest}
 */
proto.ServerToGREMessage.prototype.getConfigrequest = function() {
  return /** @type{?proto.GREConfigRequest} */ (
    jspb.Message.getWrapperField(this, proto.GREConfigRequest, 2));
};


/** @param {?proto.GREConfigRequest|undefined} value */
proto.ServerToGREMessage.prototype.setConfigrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearConfigrequest = function() {
  this.setConfigrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasConfigrequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GREStartMatchRequest startMatchRequest = 3;
 * @return {?proto.GREStartMatchRequest}
 */
proto.ServerToGREMessage.prototype.getStartmatchrequest = function() {
  return /** @type{?proto.GREStartMatchRequest} */ (
    jspb.Message.getWrapperField(this, proto.GREStartMatchRequest, 3));
};


/** @param {?proto.GREStartMatchRequest|undefined} value */
proto.ServerToGREMessage.prototype.setStartmatchrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearStartmatchrequest = function() {
  this.setStartmatchrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasStartmatchrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GREResumeMatchRequest resumeMatchRequest = 4;
 * @return {?proto.GREResumeMatchRequest}
 */
proto.ServerToGREMessage.prototype.getResumematchrequest = function() {
  return /** @type{?proto.GREResumeMatchRequest} */ (
    jspb.Message.getWrapperField(this, proto.GREResumeMatchRequest, 4));
};


/** @param {?proto.GREResumeMatchRequest|undefined} value */
proto.ServerToGREMessage.prototype.setResumematchrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearResumematchrequest = function() {
  this.setResumematchrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasResumematchrequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GRESubmitDeckRequest submitDeckRequest = 5;
 * @return {?proto.GRESubmitDeckRequest}
 */
proto.ServerToGREMessage.prototype.getSubmitdeckrequest = function() {
  return /** @type{?proto.GRESubmitDeckRequest} */ (
    jspb.Message.getWrapperField(this, proto.GRESubmitDeckRequest, 5));
};


/** @param {?proto.GRESubmitDeckRequest|undefined} value */
proto.ServerToGREMessage.prototype.setSubmitdeckrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearSubmitdeckrequest = function() {
  this.setSubmitdeckrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasSubmitdeckrequest = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GREForceResultRequest forceResultRequest = 6;
 * @return {?proto.GREForceResultRequest}
 */
proto.ServerToGREMessage.prototype.getForceresultrequest = function() {
  return /** @type{?proto.GREForceResultRequest} */ (
    jspb.Message.getWrapperField(this, proto.GREForceResultRequest, 6));
};


/** @param {?proto.GREForceResultRequest|undefined} value */
proto.ServerToGREMessage.prototype.setForceresultrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearForceresultrequest = function() {
  this.setForceresultrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasForceresultrequest = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GREDestroyRequest destroyRequest = 7;
 * @return {?proto.GREDestroyRequest}
 */
proto.ServerToGREMessage.prototype.getDestroyrequest = function() {
  return /** @type{?proto.GREDestroyRequest} */ (
    jspb.Message.getWrapperField(this, proto.GREDestroyRequest, 7));
};


/** @param {?proto.GREDestroyRequest|undefined} value */
proto.ServerToGREMessage.prototype.setDestroyrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearDestroyrequest = function() {
  this.setDestroyrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasDestroyrequest = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional GRETimerExpiredMessage timerExpired = 8;
 * @return {?proto.GRETimerExpiredMessage}
 */
proto.ServerToGREMessage.prototype.getTimerexpired = function() {
  return /** @type{?proto.GRETimerExpiredMessage} */ (
    jspb.Message.getWrapperField(this, proto.GRETimerExpiredMessage, 8));
};


/** @param {?proto.GRETimerExpiredMessage|undefined} value */
proto.ServerToGREMessage.prototype.setTimerexpired = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearTimerexpired = function() {
  this.setTimerexpired(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasTimerexpired = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional GRETickMessage tick = 9;
 * @return {?proto.GRETickMessage}
 */
proto.ServerToGREMessage.prototype.getTick = function() {
  return /** @type{?proto.GRETickMessage} */ (
    jspb.Message.getWrapperField(this, proto.GRETickMessage, 9));
};


/** @param {?proto.GRETickMessage|undefined} value */
proto.ServerToGREMessage.prototype.setTick = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearTick = function() {
  this.setTick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasTick = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Timeout timeout = 10;
 * @return {?proto.Timeout}
 */
proto.ServerToGREMessage.prototype.getTimeout = function() {
  return /** @type{?proto.Timeout} */ (
    jspb.Message.getWrapperField(this, proto.Timeout, 10));
};


/** @param {?proto.Timeout|undefined} value */
proto.ServerToGREMessage.prototype.setTimeout = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearTimeout = function() {
  this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional GREInterpretRequest interpretRequest = 11;
 * @return {?proto.GREInterpretRequest}
 */
proto.ServerToGREMessage.prototype.getInterpretrequest = function() {
  return /** @type{?proto.GREInterpretRequest} */ (
    jspb.Message.getWrapperField(this, proto.GREInterpretRequest, 11));
};


/** @param {?proto.GREInterpretRequest|undefined} value */
proto.ServerToGREMessage.prototype.setInterpretrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearInterpretrequest = function() {
  this.setInterpretrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasInterpretrequest = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional GREExpireTimerRequest expireTimerRequest = 12;
 * @return {?proto.GREExpireTimerRequest}
 */
proto.ServerToGREMessage.prototype.getExpiretimerrequest = function() {
  return /** @type{?proto.GREExpireTimerRequest} */ (
    jspb.Message.getWrapperField(this, proto.GREExpireTimerRequest, 12));
};


/** @param {?proto.GREExpireTimerRequest|undefined} value */
proto.ServerToGREMessage.prototype.setExpiretimerrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.ServerToGREMessage.oneofGroups_[0], value);
};


proto.ServerToGREMessage.prototype.clearExpiretimerrequest = function() {
  this.setExpiretimerrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToGREMessage.prototype.hasExpiretimerrequest = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceFabricConfigPackageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServiceFabricConfigPackageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceFabricConfigPackageInfo.displayName = 'proto.ServiceFabricConfigPackageInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceFabricConfigPackageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceFabricConfigPackageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceFabricConfigPackageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceFabricConfigPackageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    packagename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    packageversion: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceFabricConfigPackageInfo}
 */
proto.ServiceFabricConfigPackageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceFabricConfigPackageInfo;
  return proto.ServiceFabricConfigPackageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceFabricConfigPackageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceFabricConfigPackageInfo}
 */
proto.ServiceFabricConfigPackageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackagename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackageversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceFabricConfigPackageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceFabricConfigPackageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceFabricConfigPackageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceFabricConfigPackageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackagename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPackageversion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string packageName = 1;
 * @return {string}
 */
proto.ServiceFabricConfigPackageInfo.prototype.getPackagename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ServiceFabricConfigPackageInfo.prototype.setPackagename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string packageVersion = 2;
 * @return {string}
 */
proto.ServiceFabricConfigPackageInfo.prototype.getPackageversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ServiceFabricConfigPackageInfo.prototype.setPackageversion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceFabricServiceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceFabricServiceInfo.repeatedFields_, null);
};
goog.inherits(proto.ServiceFabricServiceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceFabricServiceInfo.displayName = 'proto.ServiceFabricServiceInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceFabricServiceInfo.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceFabricServiceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceFabricServiceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceFabricServiceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceFabricServiceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    servicetypename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partitionid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nodename: jspb.Message.getFieldWithDefault(msg, 5, ""),
    codepackageversion: jspb.Message.getFieldWithDefault(msg, 6, ""),
    configpackagesList: jspb.Message.toObjectList(msg.getConfigpackagesList(),
    proto.ServiceFabricConfigPackageInfo.toObject, includeInstance),
    exeassemblyversion: jspb.Message.getFieldWithDefault(msg, 10, ""),
    gatewayurl: jspb.Message.getFieldWithDefault(msg, 20, ""),
    replicaorinstanceid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceFabricServiceInfo}
 */
proto.ServiceFabricServiceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceFabricServiceInfo;
  return proto.ServiceFabricServiceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceFabricServiceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceFabricServiceInfo}
 */
proto.ServiceFabricServiceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicetypename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartitionid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodename(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodepackageversion(value);
      break;
    case 7:
      var value = new proto.ServiceFabricConfigPackageInfo;
      reader.readMessage(value,proto.ServiceFabricConfigPackageInfo.deserializeBinaryFromReader);
      msg.addConfigpackages(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setExeassemblyversion(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayurl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplicaorinstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceFabricServiceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceFabricServiceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceFabricServiceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceFabricServiceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServicetypename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartitionid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNodename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCodepackageversion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getConfigpackagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ServiceFabricConfigPackageInfo.serializeBinaryToWriter
    );
  }
  f = message.getExeassemblyversion();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getGatewayurl();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getReplicaorinstanceid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string serviceName = 1;
 * @return {string}
 */
proto.ServiceFabricServiceInfo.prototype.getServicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ServiceFabricServiceInfo.prototype.setServicename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string serviceTypeName = 2;
 * @return {string}
 */
proto.ServiceFabricServiceInfo.prototype.getServicetypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ServiceFabricServiceInfo.prototype.setServicetypename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string partitionId = 4;
 * @return {string}
 */
proto.ServiceFabricServiceInfo.prototype.getPartitionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ServiceFabricServiceInfo.prototype.setPartitionid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string nodeName = 5;
 * @return {string}
 */
proto.ServiceFabricServiceInfo.prototype.getNodename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ServiceFabricServiceInfo.prototype.setNodename = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string codePackageVersion = 6;
 * @return {string}
 */
proto.ServiceFabricServiceInfo.prototype.getCodepackageversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ServiceFabricServiceInfo.prototype.setCodepackageversion = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated ServiceFabricConfigPackageInfo configPackages = 7;
 * @return {!Array.<!proto.ServiceFabricConfigPackageInfo>}
 */
proto.ServiceFabricServiceInfo.prototype.getConfigpackagesList = function() {
  return /** @type{!Array.<!proto.ServiceFabricConfigPackageInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ServiceFabricConfigPackageInfo, 7));
};


/** @param {!Array.<!proto.ServiceFabricConfigPackageInfo>} value */
proto.ServiceFabricServiceInfo.prototype.setConfigpackagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ServiceFabricConfigPackageInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServiceFabricConfigPackageInfo}
 */
proto.ServiceFabricServiceInfo.prototype.addConfigpackages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ServiceFabricConfigPackageInfo, opt_index);
};


proto.ServiceFabricServiceInfo.prototype.clearConfigpackagesList = function() {
  this.setConfigpackagesList([]);
};


/**
 * optional string exeAssemblyVersion = 10;
 * @return {string}
 */
proto.ServiceFabricServiceInfo.prototype.getExeassemblyversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.ServiceFabricServiceInfo.prototype.setExeassemblyversion = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string gatewayUrl = 20;
 * @return {string}
 */
proto.ServiceFabricServiceInfo.prototype.getGatewayurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.ServiceFabricServiceInfo.prototype.setGatewayurl = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional int64 replicaOrInstanceId = 3;
 * @return {number}
 */
proto.ServiceFabricServiceInfo.prototype.getReplicaorinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ServiceFabricServiceInfo.prototype.setReplicaorinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServiceInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceInfoRequest.displayName = 'proto.ServiceInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceInfoRequest}
 */
proto.ServiceInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceInfoRequest;
  return proto.ServiceInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceInfoRequest}
 */
proto.ServiceInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetSettingsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetSettingsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetSettingsReq.displayName = 'proto.SetSettingsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetSettingsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SetSettingsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetSettingsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetSettingsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    settings: (f = msg.getSettings()) && proto.SettingsMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetSettingsReq}
 */
proto.SetSettingsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetSettingsReq;
  return proto.SetSettingsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetSettingsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetSettingsReq}
 */
proto.SetSettingsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SettingsMessage;
      reader.readMessage(value,proto.SettingsMessage.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetSettingsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetSettingsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetSettingsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetSettingsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SettingsMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional SettingsMessage settings = 1;
 * @return {?proto.SettingsMessage}
 */
proto.SetSettingsReq.prototype.getSettings = function() {
  return /** @type{?proto.SettingsMessage} */ (
    jspb.Message.getWrapperField(this, proto.SettingsMessage, 1));
};


/** @param {?proto.SettingsMessage|undefined} value */
proto.SetSettingsReq.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetSettingsReq.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetSettingsReq.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetSettingsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetSettingsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetSettingsResp.displayName = 'proto.SetSettingsResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetSettingsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SetSettingsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetSettingsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetSettingsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    settings: (f = msg.getSettings()) && proto.SettingsMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetSettingsResp}
 */
proto.SetSettingsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetSettingsResp;
  return proto.SetSettingsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetSettingsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetSettingsResp}
 */
proto.SetSettingsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SettingsMessage;
      reader.readMessage(value,proto.SettingsMessage.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetSettingsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetSettingsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetSettingsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetSettingsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SettingsMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional SettingsMessage settings = 1;
 * @return {?proto.SettingsMessage}
 */
proto.SetSettingsResp.prototype.getSettings = function() {
  return /** @type{?proto.SettingsMessage} */ (
    jspb.Message.getWrapperField(this, proto.SettingsMessage, 1));
};


/** @param {?proto.SettingsMessage|undefined} value */
proto.SetSettingsResp.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SetSettingsResp.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetSettingsResp.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SettingsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SettingsMessage.repeatedFields_, null);
};
goog.inherits(proto.SettingsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SettingsMessage.displayName = 'proto.SettingsMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SettingsMessage.repeatedFields_ = [1,2,3,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SettingsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.SettingsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SettingsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SettingsMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopsList: jspb.Message.toObjectList(msg.getStopsList(),
    proto.Stop.toObject, includeInstance),
    yieldsList: jspb.Message.toObjectList(msg.getYieldsList(),
    proto.AutoYield.toObject, includeInstance),
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    proto.AutoAnswer.toObject, includeInstance),
    transientstopsList: jspb.Message.toObjectList(msg.getTransientstopsList(),
    proto.Stop.toObject, includeInstance),
    cosmeticsList: jspb.Message.toObjectList(msg.getCosmeticsList(),
    proto.CosmeticInfo.toObject, includeInstance),
    autopassoption: jspb.Message.getFieldWithDefault(msg, 4, 0),
    graveyardorder: jspb.Message.getFieldWithDefault(msg, 5, 0),
    clearallstops: jspb.Message.getFieldWithDefault(msg, 6, 0),
    clearallyields: jspb.Message.getFieldWithDefault(msg, 7, 0),
    clearallanswers: jspb.Message.getFieldWithDefault(msg, 8, 0),
    manaselectiontype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    defaultautopassoption: jspb.Message.getFieldWithDefault(msg, 10, 0),
    smartstopssetting: jspb.Message.getFieldWithDefault(msg, 11, 0),
    autotapstopssetting: jspb.Message.getFieldWithDefault(msg, 12, 0),
    autooptionalpaymentcancellationsetting: jspb.Message.getFieldWithDefault(msg, 13, 0),
    manapaymentstrategytype: jspb.Message.getFieldWithDefault(msg, 14, 0),
    autoselectreplacementsetting: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SettingsMessage}
 */
proto.SettingsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SettingsMessage;
  return proto.SettingsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SettingsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SettingsMessage}
 */
proto.SettingsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Stop;
      reader.readMessage(value,proto.Stop.deserializeBinaryFromReader);
      msg.addStops(value);
      break;
    case 2:
      var value = new proto.AutoYield;
      reader.readMessage(value,proto.AutoYield.deserializeBinaryFromReader);
      msg.addYields(value);
      break;
    case 3:
      var value = new proto.AutoAnswer;
      reader.readMessage(value,proto.AutoAnswer.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    case 15:
      var value = new proto.Stop;
      reader.readMessage(value,proto.Stop.deserializeBinaryFromReader);
      msg.addTransientstops(value);
      break;
    case 16:
      var value = new proto.CosmeticInfo;
      reader.readMessage(value,proto.CosmeticInfo.deserializeBinaryFromReader);
      msg.addCosmetics(value);
      break;
    case 4:
      var value = /** @type {!proto.AutoPassOption} */ (reader.readEnum());
      msg.setAutopassoption(value);
      break;
    case 5:
      var value = /** @type {!proto.OrderingType} */ (reader.readEnum());
      msg.setGraveyardorder(value);
      break;
    case 6:
      var value = /** @type {!proto.SettingStatus} */ (reader.readEnum());
      msg.setClearallstops(value);
      break;
    case 7:
      var value = /** @type {!proto.SettingStatus} */ (reader.readEnum());
      msg.setClearallyields(value);
      break;
    case 8:
      var value = /** @type {!proto.SettingStatus} */ (reader.readEnum());
      msg.setClearallanswers(value);
      break;
    case 9:
      var value = /** @type {!proto.ManaSelectionType} */ (reader.readEnum());
      msg.setManaselectiontype(value);
      break;
    case 10:
      var value = /** @type {!proto.AutoPassOption} */ (reader.readEnum());
      msg.setDefaultautopassoption(value);
      break;
    case 11:
      var value = /** @type {!proto.SmartStopsSetting} */ (reader.readEnum());
      msg.setSmartstopssetting(value);
      break;
    case 12:
      var value = /** @type {!proto.AutoTapStopsSetting} */ (reader.readEnum());
      msg.setAutotapstopssetting(value);
      break;
    case 13:
      var value = /** @type {!proto.Setting} */ (reader.readEnum());
      msg.setAutooptionalpaymentcancellationsetting(value);
      break;
    case 14:
      var value = /** @type {!proto.ManaPaymentStrategyType} */ (reader.readEnum());
      msg.setManapaymentstrategytype(value);
      break;
    case 17:
      var value = /** @type {!proto.Setting} */ (reader.readEnum());
      msg.setAutoselectreplacementsetting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SettingsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SettingsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SettingsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SettingsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Stop.serializeBinaryToWriter
    );
  }
  f = message.getYieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.AutoYield.serializeBinaryToWriter
    );
  }
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.AutoAnswer.serializeBinaryToWriter
    );
  }
  f = message.getTransientstopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.Stop.serializeBinaryToWriter
    );
  }
  f = message.getCosmeticsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.CosmeticInfo.serializeBinaryToWriter
    );
  }
  f = message.getAutopassoption();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getGraveyardorder();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getClearallstops();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getClearallyields();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getClearallanswers();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getManaselectiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getDefaultautopassoption();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getSmartstopssetting();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getAutotapstopssetting();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getAutooptionalpaymentcancellationsetting();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getManapaymentstrategytype();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getAutoselectreplacementsetting();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
};


/**
 * repeated Stop stops = 1;
 * @return {!Array.<!proto.Stop>}
 */
proto.SettingsMessage.prototype.getStopsList = function() {
  return /** @type{!Array.<!proto.Stop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Stop, 1));
};


/** @param {!Array.<!proto.Stop>} value */
proto.SettingsMessage.prototype.setStopsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Stop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Stop}
 */
proto.SettingsMessage.prototype.addStops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Stop, opt_index);
};


proto.SettingsMessage.prototype.clearStopsList = function() {
  this.setStopsList([]);
};


/**
 * repeated AutoYield yields = 2;
 * @return {!Array.<!proto.AutoYield>}
 */
proto.SettingsMessage.prototype.getYieldsList = function() {
  return /** @type{!Array.<!proto.AutoYield>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AutoYield, 2));
};


/** @param {!Array.<!proto.AutoYield>} value */
proto.SettingsMessage.prototype.setYieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AutoYield=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AutoYield}
 */
proto.SettingsMessage.prototype.addYields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AutoYield, opt_index);
};


proto.SettingsMessage.prototype.clearYieldsList = function() {
  this.setYieldsList([]);
};


/**
 * repeated AutoAnswer answers = 3;
 * @return {!Array.<!proto.AutoAnswer>}
 */
proto.SettingsMessage.prototype.getAnswersList = function() {
  return /** @type{!Array.<!proto.AutoAnswer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AutoAnswer, 3));
};


/** @param {!Array.<!proto.AutoAnswer>} value */
proto.SettingsMessage.prototype.setAnswersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.AutoAnswer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AutoAnswer}
 */
proto.SettingsMessage.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.AutoAnswer, opt_index);
};


proto.SettingsMessage.prototype.clearAnswersList = function() {
  this.setAnswersList([]);
};


/**
 * repeated Stop transientStops = 15;
 * @return {!Array.<!proto.Stop>}
 */
proto.SettingsMessage.prototype.getTransientstopsList = function() {
  return /** @type{!Array.<!proto.Stop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Stop, 15));
};


/** @param {!Array.<!proto.Stop>} value */
proto.SettingsMessage.prototype.setTransientstopsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.Stop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Stop}
 */
proto.SettingsMessage.prototype.addTransientstops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.Stop, opt_index);
};


proto.SettingsMessage.prototype.clearTransientstopsList = function() {
  this.setTransientstopsList([]);
};


/**
 * repeated CosmeticInfo cosmetics = 16;
 * @return {!Array.<!proto.CosmeticInfo>}
 */
proto.SettingsMessage.prototype.getCosmeticsList = function() {
  return /** @type{!Array.<!proto.CosmeticInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CosmeticInfo, 16));
};


/** @param {!Array.<!proto.CosmeticInfo>} value */
proto.SettingsMessage.prototype.setCosmeticsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.CosmeticInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CosmeticInfo}
 */
proto.SettingsMessage.prototype.addCosmetics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.CosmeticInfo, opt_index);
};


proto.SettingsMessage.prototype.clearCosmeticsList = function() {
  this.setCosmeticsList([]);
};


/**
 * optional AutoPassOption autoPassOption = 4;
 * @return {!proto.AutoPassOption}
 */
proto.SettingsMessage.prototype.getAutopassoption = function() {
  return /** @type {!proto.AutoPassOption} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.AutoPassOption} value */
proto.SettingsMessage.prototype.setAutopassoption = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional OrderingType graveyardOrder = 5;
 * @return {!proto.OrderingType}
 */
proto.SettingsMessage.prototype.getGraveyardorder = function() {
  return /** @type {!proto.OrderingType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.OrderingType} value */
proto.SettingsMessage.prototype.setGraveyardorder = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional SettingStatus clearAllStops = 6;
 * @return {!proto.SettingStatus}
 */
proto.SettingsMessage.prototype.getClearallstops = function() {
  return /** @type {!proto.SettingStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.SettingStatus} value */
proto.SettingsMessage.prototype.setClearallstops = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional SettingStatus clearAllYields = 7;
 * @return {!proto.SettingStatus}
 */
proto.SettingsMessage.prototype.getClearallyields = function() {
  return /** @type {!proto.SettingStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.SettingStatus} value */
proto.SettingsMessage.prototype.setClearallyields = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional SettingStatus clearAllAnswers = 8;
 * @return {!proto.SettingStatus}
 */
proto.SettingsMessage.prototype.getClearallanswers = function() {
  return /** @type {!proto.SettingStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.SettingStatus} value */
proto.SettingsMessage.prototype.setClearallanswers = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional ManaSelectionType manaSelectionType = 9;
 * @return {!proto.ManaSelectionType}
 */
proto.SettingsMessage.prototype.getManaselectiontype = function() {
  return /** @type {!proto.ManaSelectionType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.ManaSelectionType} value */
proto.SettingsMessage.prototype.setManaselectiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional AutoPassOption defaultAutoPassOption = 10;
 * @return {!proto.AutoPassOption}
 */
proto.SettingsMessage.prototype.getDefaultautopassoption = function() {
  return /** @type {!proto.AutoPassOption} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.AutoPassOption} value */
proto.SettingsMessage.prototype.setDefaultautopassoption = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional SmartStopsSetting smartStopsSetting = 11;
 * @return {!proto.SmartStopsSetting}
 */
proto.SettingsMessage.prototype.getSmartstopssetting = function() {
  return /** @type {!proto.SmartStopsSetting} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.SmartStopsSetting} value */
proto.SettingsMessage.prototype.setSmartstopssetting = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional AutoTapStopsSetting autoTapStopsSetting = 12;
 * @return {!proto.AutoTapStopsSetting}
 */
proto.SettingsMessage.prototype.getAutotapstopssetting = function() {
  return /** @type {!proto.AutoTapStopsSetting} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.AutoTapStopsSetting} value */
proto.SettingsMessage.prototype.setAutotapstopssetting = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional Setting autoOptionalPaymentCancellationSetting = 13;
 * @return {!proto.Setting}
 */
proto.SettingsMessage.prototype.getAutooptionalpaymentcancellationsetting = function() {
  return /** @type {!proto.Setting} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.Setting} value */
proto.SettingsMessage.prototype.setAutooptionalpaymentcancellationsetting = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional ManaPaymentStrategyType manaPaymentStrategyType = 14;
 * @return {!proto.ManaPaymentStrategyType}
 */
proto.SettingsMessage.prototype.getManapaymentstrategytype = function() {
  return /** @type {!proto.ManaPaymentStrategyType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.ManaPaymentStrategyType} value */
proto.SettingsMessage.prototype.setManapaymentstrategytype = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional Setting autoSelectReplacementSetting = 17;
 * @return {!proto.Setting}
 */
proto.SettingsMessage.prototype.getAutoselectreplacementsetting = function() {
  return /** @type {!proto.Setting} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.Setting} value */
proto.SettingsMessage.prototype.setAutoselectreplacementsetting = function(value) {
  jspb.Message.setProto3EnumField(this, 17, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SortFilterPagingOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SortFilterPagingOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SortFilterPagingOptions.displayName = 'proto.SortFilterPagingOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SortFilterPagingOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.SortFilterPagingOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SortFilterPagingOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SortFilterPagingOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    sort: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filter: jspb.Message.getFieldWithDefault(msg, 2, ""),
    top: jspb.Message.getFieldWithDefault(msg, 5, 0),
    skip: jspb.Message.getFieldWithDefault(msg, 6, 0),
    continuationtoken: (f = msg.getContinuationtoken()) && proto.ContinuationToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SortFilterPagingOptions}
 */
proto.SortFilterPagingOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SortFilterPagingOptions;
  return proto.SortFilterPagingOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SortFilterPagingOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SortFilterPagingOptions}
 */
proto.SortFilterPagingOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTop(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkip(value);
      break;
    case 10:
      var value = new proto.ContinuationToken;
      reader.readMessage(value,proto.ContinuationToken.deserializeBinaryFromReader);
      msg.setContinuationtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SortFilterPagingOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SortFilterPagingOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SortFilterPagingOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SortFilterPagingOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTop();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSkip();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getContinuationtoken();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ContinuationToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sort = 1;
 * @return {string}
 */
proto.SortFilterPagingOptions.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SortFilterPagingOptions.prototype.setSort = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filter = 2;
 * @return {string}
 */
proto.SortFilterPagingOptions.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SortFilterPagingOptions.prototype.setFilter = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 top = 5;
 * @return {number}
 */
proto.SortFilterPagingOptions.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SortFilterPagingOptions.prototype.setTop = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 skip = 6;
 * @return {number}
 */
proto.SortFilterPagingOptions.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SortFilterPagingOptions.prototype.setSkip = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ContinuationToken continuationToken = 10;
 * @return {?proto.ContinuationToken}
 */
proto.SortFilterPagingOptions.prototype.getContinuationtoken = function() {
  return /** @type{?proto.ContinuationToken} */ (
    jspb.Message.getWrapperField(this, proto.ContinuationToken, 10));
};


/** @param {?proto.ContinuationToken|undefined} value */
proto.SortFilterPagingOptions.prototype.setContinuationtoken = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.SortFilterPagingOptions.prototype.clearContinuationtoken = function() {
  this.setContinuationtoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SortFilterPagingOptions.prototype.hasContinuationtoken = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Stop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Stop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Stop.displayName = 'proto.Stop';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Stop.prototype.toObject = function(opt_includeInstance) {
  return proto.Stop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Stop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stop.toObject = function(includeInstance, msg) {
  var f, obj = {
    stoptype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appliesto: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Stop}
 */
proto.Stop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Stop;
  return proto.Stop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Stop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Stop}
 */
proto.Stop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.StopType} */ (reader.readEnum());
      msg.setStoptype(value);
      break;
    case 2:
      var value = /** @type {!proto.SettingScope} */ (reader.readEnum());
      msg.setAppliesto(value);
      break;
    case 3:
      var value = /** @type {!proto.SettingStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Stop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Stop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Stop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoptype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAppliesto();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional StopType stopType = 1;
 * @return {!proto.StopType}
 */
proto.Stop.prototype.getStoptype = function() {
  return /** @type {!proto.StopType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.StopType} value */
proto.Stop.prototype.setStoptype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SettingScope appliesTo = 2;
 * @return {!proto.SettingScope}
 */
proto.Stop.prototype.getAppliesto = function() {
  return /** @type {!proto.SettingScope} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.SettingScope} value */
proto.Stop.prototype.setAppliesto = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SettingStatus status = 3;
 * @return {!proto.SettingStatus}
 */
proto.Stop.prototype.getStatus = function() {
  return /** @type {!proto.SettingStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SettingStatus} value */
proto.Stop.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitAttackersResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SubmitAttackersResp.repeatedFields_, null);
};
goog.inherits(proto.SubmitAttackersResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitAttackersResp.displayName = 'proto.SubmitAttackersResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SubmitAttackersResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitAttackersResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitAttackersResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitAttackersResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitAttackersResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidattackersList: jspb.Message.toObjectList(msg.getInvalidattackersList(),
    proto.InvalidAttacker.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitAttackersResp}
 */
proto.SubmitAttackersResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitAttackersResp;
  return proto.SubmitAttackersResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitAttackersResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitAttackersResp}
 */
proto.SubmitAttackersResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.InvalidAttacker;
      reader.readMessage(value,proto.InvalidAttacker.deserializeBinaryFromReader);
      msg.addInvalidattackers(value);
      break;
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitAttackersResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitAttackersResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitAttackersResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitAttackersResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvalidattackersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.InvalidAttacker.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * repeated InvalidAttacker invalidAttackers = 2;
 * @return {!Array.<!proto.InvalidAttacker>}
 */
proto.SubmitAttackersResp.prototype.getInvalidattackersList = function() {
  return /** @type{!Array.<!proto.InvalidAttacker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InvalidAttacker, 2));
};


/** @param {!Array.<!proto.InvalidAttacker>} value */
proto.SubmitAttackersResp.prototype.setInvalidattackersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.InvalidAttacker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InvalidAttacker}
 */
proto.SubmitAttackersResp.prototype.addInvalidattackers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.InvalidAttacker, opt_index);
};


proto.SubmitAttackersResp.prototype.clearInvalidattackersList = function() {
  this.setInvalidattackersList([]);
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.SubmitAttackersResp.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.SubmitAttackersResp.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitBlockersResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SubmitBlockersResp.repeatedFields_, null);
};
goog.inherits(proto.SubmitBlockersResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitBlockersResp.displayName = 'proto.SubmitBlockersResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SubmitBlockersResp.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitBlockersResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitBlockersResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitBlockersResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitBlockersResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidblockersList: jspb.Message.toObjectList(msg.getInvalidblockersList(),
    proto.InvalidBlocker.toObject, includeInstance),
    effectviolationblockingList: jspb.Message.toObjectList(msg.getEffectviolationblockingList(),
    proto.EffectViolationBlocking.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitBlockersResp}
 */
proto.SubmitBlockersResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitBlockersResp;
  return proto.SubmitBlockersResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitBlockersResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitBlockersResp}
 */
proto.SubmitBlockersResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.InvalidBlocker;
      reader.readMessage(value,proto.InvalidBlocker.deserializeBinaryFromReader);
      msg.addInvalidblockers(value);
      break;
    case 3:
      var value = new proto.EffectViolationBlocking;
      reader.readMessage(value,proto.EffectViolationBlocking.deserializeBinaryFromReader);
      msg.addEffectviolationblocking(value);
      break;
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitBlockersResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitBlockersResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitBlockersResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitBlockersResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvalidblockersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.InvalidBlocker.serializeBinaryToWriter
    );
  }
  f = message.getEffectviolationblockingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.EffectViolationBlocking.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * repeated InvalidBlocker invalidBlockers = 2;
 * @return {!Array.<!proto.InvalidBlocker>}
 */
proto.SubmitBlockersResp.prototype.getInvalidblockersList = function() {
  return /** @type{!Array.<!proto.InvalidBlocker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InvalidBlocker, 2));
};


/** @param {!Array.<!proto.InvalidBlocker>} value */
proto.SubmitBlockersResp.prototype.setInvalidblockersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.InvalidBlocker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InvalidBlocker}
 */
proto.SubmitBlockersResp.prototype.addInvalidblockers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.InvalidBlocker, opt_index);
};


proto.SubmitBlockersResp.prototype.clearInvalidblockersList = function() {
  this.setInvalidblockersList([]);
};


/**
 * repeated EffectViolationBlocking effectViolationBlocking = 3;
 * @return {!Array.<!proto.EffectViolationBlocking>}
 */
proto.SubmitBlockersResp.prototype.getEffectviolationblockingList = function() {
  return /** @type{!Array.<!proto.EffectViolationBlocking>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EffectViolationBlocking, 3));
};


/** @param {!Array.<!proto.EffectViolationBlocking>} value */
proto.SubmitBlockersResp.prototype.setEffectviolationblockingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.EffectViolationBlocking=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EffectViolationBlocking}
 */
proto.SubmitBlockersResp.prototype.addEffectviolationblocking = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EffectViolationBlocking, opt_index);
};


proto.SubmitBlockersResp.prototype.clearEffectviolationblockingList = function() {
  this.setEffectviolationblockingList([]);
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.SubmitBlockersResp.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.SubmitBlockersResp.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitDeckReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubmitDeckReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitDeckReq.displayName = 'proto.SubmitDeckReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitDeckReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitDeckReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitDeckReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitDeckReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    deck: (f = msg.getDeck()) && proto.DeckMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitDeckReq}
 */
proto.SubmitDeckReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitDeckReq;
  return proto.SubmitDeckReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitDeckReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitDeckReq}
 */
proto.SubmitDeckReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DeckMessage;
      reader.readMessage(value,proto.DeckMessage.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitDeckReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitDeckReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitDeckReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitDeckReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DeckMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeckMessage deck = 1;
 * @return {?proto.DeckMessage}
 */
proto.SubmitDeckReq.prototype.getDeck = function() {
  return /** @type{?proto.DeckMessage} */ (
    jspb.Message.getWrapperField(this, proto.DeckMessage, 1));
};


/** @param {?proto.DeckMessage|undefined} value */
proto.SubmitDeckReq.prototype.setDeck = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SubmitDeckReq.prototype.clearDeck = function() {
  this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SubmitDeckReq.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitDeckResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubmitDeckResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitDeckResp.displayName = 'proto.SubmitDeckResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitDeckResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitDeckResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitDeckResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitDeckResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    deck: (f = msg.getDeck()) && proto.DeckMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitDeckResp}
 */
proto.SubmitDeckResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitDeckResp;
  return proto.SubmitDeckResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitDeckResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitDeckResp}
 */
proto.SubmitDeckResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DeckMessage;
      reader.readMessage(value,proto.DeckMessage.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitDeckResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitDeckResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitDeckResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitDeckResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DeckMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeckMessage deck = 1;
 * @return {?proto.DeckMessage}
 */
proto.SubmitDeckResp.prototype.getDeck = function() {
  return /** @type{?proto.DeckMessage} */ (
    jspb.Message.getWrapperField(this, proto.DeckMessage, 1));
};


/** @param {?proto.DeckMessage|undefined} value */
proto.SubmitDeckResp.prototype.setDeck = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SubmitDeckResp.prototype.clearDeck = function() {
  this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SubmitDeckResp.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitPaymentReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubmitPaymentReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitPaymentReq.displayName = 'proto.SubmitPaymentReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitPaymentReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitPaymentReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitPaymentReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitPaymentReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitPaymentReq}
 */
proto.SubmitPaymentReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitPaymentReq;
  return proto.SubmitPaymentReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitPaymentReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitPaymentReq}
 */
proto.SubmitPaymentReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitPaymentReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitPaymentReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitPaymentReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitPaymentReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitPaymentResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubmitPaymentResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitPaymentResp.displayName = 'proto.SubmitPaymentResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitPaymentResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitPaymentResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitPaymentResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitPaymentResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitPaymentResp}
 */
proto.SubmitPaymentResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitPaymentResp;
  return proto.SubmitPaymentResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitPaymentResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitPaymentResp}
 */
proto.SubmitPaymentResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitPaymentResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitPaymentResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitPaymentResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitPaymentResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitTargetsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SubmitTargetsResp.repeatedFields_, null);
};
goog.inherits(proto.SubmitTargetsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitTargetsResp.displayName = 'proto.SubmitTargetsResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SubmitTargetsResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitTargetsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitTargetsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitTargetsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitTargetsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidselectionsList: jspb.Message.toObjectList(msg.getInvalidselectionsList(),
    proto.InvalidTargetSelection.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitTargetsResp}
 */
proto.SubmitTargetsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitTargetsResp;
  return proto.SubmitTargetsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitTargetsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitTargetsResp}
 */
proto.SubmitTargetsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.InvalidTargetSelection;
      reader.readMessage(value,proto.InvalidTargetSelection.deserializeBinaryFromReader);
      msg.addInvalidselections(value);
      break;
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitTargetsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubmitTargetsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubmitTargetsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubmitTargetsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvalidselectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.InvalidTargetSelection.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * repeated InvalidTargetSelection invalidSelections = 2;
 * @return {!Array.<!proto.InvalidTargetSelection>}
 */
proto.SubmitTargetsResp.prototype.getInvalidselectionsList = function() {
  return /** @type{!Array.<!proto.InvalidTargetSelection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InvalidTargetSelection, 2));
};


/** @param {!Array.<!proto.InvalidTargetSelection>} value */
proto.SubmitTargetsResp.prototype.setInvalidselectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.InvalidTargetSelection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InvalidTargetSelection}
 */
proto.SubmitTargetsResp.prototype.addInvalidselections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.InvalidTargetSelection, opt_index);
};


proto.SubmitTargetsResp.prototype.clearInvalidselectionsList = function() {
  this.setInvalidselectionsList([]);
};


/**
 * optional ResultCode result = 1;
 * @return {!proto.ResultCode}
 */
proto.SubmitTargetsResp.prototype.getResult = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ResultCode} value */
proto.SubmitTargetsResp.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Target.displayName = 'proto.Target';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetinstanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    legalaction: jspb.Message.getFieldWithDefault(msg, 2, 0),
    highlight: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Target}
 */
proto.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Target;
  return proto.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Target}
 */
proto.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetinstanceid(value);
      break;
    case 2:
      var value = /** @type {!proto.SelectAction} */ (reader.readEnum());
      msg.setLegalaction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHighlight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetinstanceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLegalaction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHighlight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 targetInstanceId = 1;
 * @return {number}
 */
proto.Target.prototype.getTargetinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Target.prototype.setTargetinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SelectAction legalAction = 2;
 * @return {!proto.SelectAction}
 */
proto.Target.prototype.getLegalaction = function() {
  return /** @type {!proto.SelectAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.SelectAction} value */
proto.Target.prototype.setLegalaction = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 highlight = 3;
 * @return {number}
 */
proto.Target.prototype.getHighlight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Target.prototype.setHighlight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TargetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TargetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TargetInfo.displayName = 'proto.TargetInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TargetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TargetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TargetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    targettype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TargetInfo}
 */
proto.TargetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TargetInfo;
  return proto.TargetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TargetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TargetInfo}
 */
proto.TargetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TargetType} */ (reader.readEnum());
      msg.setTargettype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TargetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TargetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TargetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargettype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTargetid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional TargetType targetType = 1;
 * @return {!proto.TargetType}
 */
proto.TargetInfo.prototype.getTargettype = function() {
  return /** @type {!proto.TargetType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TargetType} value */
proto.TargetInfo.prototype.setTargettype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 targetId = 2;
 * @return {number}
 */
proto.TargetInfo.prototype.getTargetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TargetInfo.prototype.setTargetid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TargetSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TargetSelection.repeatedFields_, null);
};
goog.inherits(proto.TargetSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TargetSelection.displayName = 'proto.TargetSelection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TargetSelection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TargetSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.TargetSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TargetSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.Target.toObject, includeInstance),
    targetidx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mintargets: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxtargets: jspb.Message.getFieldWithDefault(msg, 4, 0),
    selectedtargets: jspb.Message.getFieldWithDefault(msg, 5, 0),
    prompt: (f = msg.getPrompt()) && proto.Prompt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TargetSelection}
 */
proto.TargetSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TargetSelection;
  return proto.TargetSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TargetSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TargetSelection}
 */
proto.TargetSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.Target;
      reader.readMessage(value,proto.Target.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetidx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMintargets(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxtargets(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSelectedtargets(value);
      break;
    case 6:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TargetSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TargetSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TargetSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Target.serializeBinaryToWriter
    );
  }
  f = message.getTargetidx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMintargets();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxtargets();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSelectedtargets();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Target targets = 2;
 * @return {!Array.<!proto.Target>}
 */
proto.TargetSelection.prototype.getTargetsList = function() {
  return /** @type{!Array.<!proto.Target>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Target, 2));
};


/** @param {!Array.<!proto.Target>} value */
proto.TargetSelection.prototype.setTargetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Target=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Target}
 */
proto.TargetSelection.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Target, opt_index);
};


proto.TargetSelection.prototype.clearTargetsList = function() {
  this.setTargetsList([]);
};


/**
 * optional uint32 targetIdx = 1;
 * @return {number}
 */
proto.TargetSelection.prototype.getTargetidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TargetSelection.prototype.setTargetidx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minTargets = 3;
 * @return {number}
 */
proto.TargetSelection.prototype.getMintargets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TargetSelection.prototype.setMintargets = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 maxTargets = 4;
 * @return {number}
 */
proto.TargetSelection.prototype.getMaxtargets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TargetSelection.prototype.setMaxtargets = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 selectedTargets = 5;
 * @return {number}
 */
proto.TargetSelection.prototype.getSelectedtargets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TargetSelection.prototype.setSelectedtargets = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Prompt prompt = 6;
 * @return {?proto.Prompt}
 */
proto.TargetSelection.prototype.getPrompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 6));
};


/** @param {?proto.Prompt|undefined} value */
proto.TargetSelection.prototype.setPrompt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.TargetSelection.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TargetSelection.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Task.oneofGroups_);
};
goog.inherits(proto.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Task.displayName = 'proto.Task';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Task.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Task.MessageCase = {
  MESSAGE_NOT_SET: 0,
  TIMEOUT: 1,
  ENDTURN: 2,
  PASS: 3
};

/**
 * @return {proto.Task.MessageCase}
 */
proto.Task.prototype.getMessageCase = function() {
  return /** @type {proto.Task.MessageCase} */(jspb.Message.computeOneofCase(this, proto.Task.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: (f = msg.getTimeout()) && proto.Timeout.toObject(includeInstance, f),
    endturn: (f = msg.getEndturn()) && proto.EndTurn.toObject(includeInstance, f),
    pass: (f = msg.getPass()) && proto.Pass.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Task}
 */
proto.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Task;
  return proto.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Task}
 */
proto.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Timeout;
      reader.readMessage(value,proto.Timeout.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    case 2:
      var value = new proto.EndTurn;
      reader.readMessage(value,proto.EndTurn.deserializeBinaryFromReader);
      msg.setEndturn(value);
      break;
    case 3:
      var value = new proto.Pass;
      reader.readMessage(value,proto.Pass.deserializeBinaryFromReader);
      msg.setPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Timeout.serializeBinaryToWriter
    );
  }
  f = message.getEndturn();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EndTurn.serializeBinaryToWriter
    );
  }
  f = message.getPass();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Pass.serializeBinaryToWriter
    );
  }
};


/**
 * optional Timeout timeout = 1;
 * @return {?proto.Timeout}
 */
proto.Task.prototype.getTimeout = function() {
  return /** @type{?proto.Timeout} */ (
    jspb.Message.getWrapperField(this, proto.Timeout, 1));
};


/** @param {?proto.Timeout|undefined} value */
proto.Task.prototype.setTimeout = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Task.oneofGroups_[0], value);
};


proto.Task.prototype.clearTimeout = function() {
  this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Task.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndTurn endTurn = 2;
 * @return {?proto.EndTurn}
 */
proto.Task.prototype.getEndturn = function() {
  return /** @type{?proto.EndTurn} */ (
    jspb.Message.getWrapperField(this, proto.EndTurn, 2));
};


/** @param {?proto.EndTurn|undefined} value */
proto.Task.prototype.setEndturn = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Task.oneofGroups_[0], value);
};


proto.Task.prototype.clearEndturn = function() {
  this.setEndturn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Task.prototype.hasEndturn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Pass pass = 3;
 * @return {?proto.Pass}
 */
proto.Task.prototype.getPass = function() {
  return /** @type{?proto.Pass} */ (
    jspb.Message.getWrapperField(this, proto.Pass, 3));
};


/** @param {?proto.Pass|undefined} value */
proto.Task.prototype.setPass = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Task.oneofGroups_[0], value);
};


proto.Task.prototype.clearPass = function() {
  this.setPass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Task.prototype.hasPass = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TeamConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TeamConfig.repeatedFields_, null);
};
goog.inherits(proto.TeamConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TeamConfig.displayName = 'proto.TeamConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TeamConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TeamConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.TeamConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TeamConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TeamConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerConfig.toObject, includeInstance),
    teamid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TeamConfig}
 */
proto.TeamConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TeamConfig;
  return proto.TeamConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TeamConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TeamConfig}
 */
proto.TeamConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.PlayerConfig;
      reader.readMessage(value,proto.PlayerConfig.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TeamConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TeamConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TeamConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TeamConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PlayerConfig.serializeBinaryToWriter
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated PlayerConfig players = 2;
 * @return {!Array.<!proto.PlayerConfig>}
 */
proto.TeamConfig.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.PlayerConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerConfig, 2));
};


/** @param {!Array.<!proto.PlayerConfig>} value */
proto.TeamConfig.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PlayerConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerConfig}
 */
proto.TeamConfig.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PlayerConfig, opt_index);
};


proto.TeamConfig.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * optional uint32 teamID = 1;
 * @return {number}
 */
proto.TeamConfig.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TeamConfig.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TeamInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TeamInfo.repeatedFields_, null);
};
goog.inherits(proto.TeamInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TeamInfo.displayName = 'proto.TeamInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TeamInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TeamInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TeamInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TeamInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TeamInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playeridsList: jspb.Message.getRepeatedField(msg, 2),
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TeamInfo}
 */
proto.TeamInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TeamInfo;
  return proto.TeamInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TeamInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TeamInfo}
 */
proto.TeamInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setPlayeridsList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TeamInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TeamInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TeamInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TeamInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayeridsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 playerIds = 2;
 * @return {!Array.<number>}
 */
proto.TeamInfo.prototype.getPlayeridsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.TeamInfo.prototype.setPlayeridsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.TeamInfo.prototype.addPlayerids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.TeamInfo.prototype.clearPlayeridsList = function() {
  this.setPlayeridsList([]);
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.TeamInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TeamInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TestConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TestConfig.repeatedFields_, null);
};
goog.inherits(proto.TestConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TestConfig.displayName = 'proto.TestConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TestConfig.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TestConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.TestConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TestConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TestConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomseedsList: jspb.Message.getRepeatedField(msg, 13),
    shufflerestriction: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startingplayer: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usespecifiedseed: jspb.Message.getFieldWithDefault(msg, 3, false),
    randomseed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    usezeromanacostforcasting: jspb.Message.getFieldWithDefault(msg, 5, false),
    usemaxlandsperturn: jspb.Message.getFieldWithDefault(msg, 6, 0),
    treeofcongress: (f = msg.getTreeofcongress()) && proto.TreeOfCongress.toObject(includeInstance, f),
    uselibraryrng: jspb.Message.getFieldWithDefault(msg, 9, false),
    disablegamestatequeueingduringcancelableactions: jspb.Message.getFieldWithDefault(msg, 10, false),
    disablehifigamestates: jspb.Message.getFieldWithDefault(msg, 11, false),
    disabletimers: jspb.Message.getFieldWithDefault(msg, 12, false),
    freemulligancount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    randomdrawcount: jspb.Message.getFieldWithDefault(msg, 15, 0),
    minrandomdrawdistance: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    maxrandomdrawdistance: +jspb.Message.getFieldWithDefault(msg, 17, 0.0),
    enableautoaccepthand: jspb.Message.getFieldWithDefault(msg, 18, false),
    enableautoplay: jspb.Message.getFieldWithDefault(msg, 19, false),
    disableunexpectedmessagerecovery: jspb.Message.getFieldWithDefault(msg, 20, false),
    disablesideboarding: jspb.Message.getFieldWithDefault(msg, 21, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TestConfig}
 */
proto.TestConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TestConfig;
  return proto.TestConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TestConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TestConfig}
 */
proto.TestConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 13:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setRandomseedsList(value);
      break;
    case 1:
      var value = /** @type {!proto.ShuffleRestriction} */ (reader.readEnum());
      msg.setShufflerestriction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartingplayer(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsespecifiedseed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandomseed(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsezeromanacostforcasting(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsemaxlandsperturn(value);
      break;
    case 7:
      var value = new proto.TreeOfCongress;
      reader.readMessage(value,proto.TreeOfCongress.deserializeBinaryFromReader);
      msg.setTreeofcongress(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUselibraryrng(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablegamestatequeueingduringcancelableactions(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablehifigamestates(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabletimers(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFreemulligancount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandomdrawcount(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinrandomdrawdistance(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxrandomdrawdistance(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableautoaccepthand(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableautoplay(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableunexpectedmessagerecovery(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablesideboarding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TestConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TestConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TestConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TestConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandomseedsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      13,
      f
    );
  }
  f = message.getShufflerestriction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStartingplayer();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUsespecifiedseed();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRandomseed();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUsezeromanacostforcasting();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUsemaxlandsperturn();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTreeofcongress();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.TreeOfCongress.serializeBinaryToWriter
    );
  }
  f = message.getUselibraryrng();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getDisablegamestatequeueingduringcancelableactions();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDisablehifigamestates();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getDisabletimers();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getFreemulligancount();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getRandomdrawcount();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getMinrandomdrawdistance();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getMaxrandomdrawdistance();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getEnableautoaccepthand();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getEnableautoplay();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getDisableunexpectedmessagerecovery();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getDisablesideboarding();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
};


/**
 * repeated uint32 randomSeeds = 13;
 * @return {!Array.<number>}
 */
proto.TestConfig.prototype.getRandomseedsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array.<number>} value */
proto.TestConfig.prototype.setRandomseedsList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.TestConfig.prototype.addRandomseeds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.TestConfig.prototype.clearRandomseedsList = function() {
  this.setRandomseedsList([]);
};


/**
 * optional ShuffleRestriction shuffleRestriction = 1;
 * @return {!proto.ShuffleRestriction}
 */
proto.TestConfig.prototype.getShufflerestriction = function() {
  return /** @type {!proto.ShuffleRestriction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ShuffleRestriction} value */
proto.TestConfig.prototype.setShufflerestriction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 startingPlayer = 2;
 * @return {number}
 */
proto.TestConfig.prototype.getStartingplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TestConfig.prototype.setStartingplayer = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool useSpecifiedSeed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getUsespecifiedseed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setUsespecifiedseed = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 randomSeed = 4;
 * @return {number}
 */
proto.TestConfig.prototype.getRandomseed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TestConfig.prototype.setRandomseed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool useZeroManaCostForCasting = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getUsezeromanacostforcasting = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setUsezeromanacostforcasting = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 useMaxLandsPerTurn = 6;
 * @return {number}
 */
proto.TestConfig.prototype.getUsemaxlandsperturn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TestConfig.prototype.setUsemaxlandsperturn = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional TreeOfCongress treeOfCongress = 7;
 * @return {?proto.TreeOfCongress}
 */
proto.TestConfig.prototype.getTreeofcongress = function() {
  return /** @type{?proto.TreeOfCongress} */ (
    jspb.Message.getWrapperField(this, proto.TreeOfCongress, 7));
};


/** @param {?proto.TreeOfCongress|undefined} value */
proto.TestConfig.prototype.setTreeofcongress = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.TestConfig.prototype.clearTreeofcongress = function() {
  this.setTreeofcongress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TestConfig.prototype.hasTreeofcongress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool useLibraryRNG = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getUselibraryrng = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setUselibraryrng = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool disableGameStateQueueingDuringCancelableActions = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getDisablegamestatequeueingduringcancelableactions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setDisablegamestatequeueingduringcancelableactions = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool disableHiFiGameStates = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getDisablehifigamestates = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setDisablehifigamestates = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool disableTimers = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getDisabletimers = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setDisabletimers = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint32 freeMulliganCount = 14;
 * @return {number}
 */
proto.TestConfig.prototype.getFreemulligancount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.TestConfig.prototype.setFreemulligancount = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 randomDrawCount = 15;
 * @return {number}
 */
proto.TestConfig.prototype.getRandomdrawcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.TestConfig.prototype.setRandomdrawcount = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional float minRandomDrawDistance = 16;
 * @return {number}
 */
proto.TestConfig.prototype.getMinrandomdrawdistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.TestConfig.prototype.setMinrandomdrawdistance = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float maxRandomDrawDistance = 17;
 * @return {number}
 */
proto.TestConfig.prototype.getMaxrandomdrawdistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.TestConfig.prototype.setMaxrandomdrawdistance = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional bool enableAutoAcceptHand = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getEnableautoaccepthand = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setEnableautoaccepthand = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional bool enableAutoPlay = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getEnableautoplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setEnableautoplay = function(value) {
  jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional bool disableUnexpectedMessageRecovery = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getDisableunexpectedmessagerecovery = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setDisableunexpectedmessagerecovery = function(value) {
  jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional bool disableSideboarding = 21;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TestConfig.prototype.getDisablesideboarding = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.TestConfig.prototype.setDisablesideboarding = function(value) {
  jspb.Message.setProto3BooleanField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Timeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Timeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Timeout.displayName = 'proto.Timeout';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Timeout.prototype.toObject = function(opt_includeInstance) {
  return proto.Timeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Timeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timeout.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Timeout}
 */
proto.Timeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Timeout;
  return proto.Timeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Timeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Timeout}
 */
proto.Timeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Timeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Timeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Timeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeoutConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimeoutConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimeoutConfig.displayName = 'proto.TimeoutConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeoutConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeoutConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeoutConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoutConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxtimeoutcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startingtimeoutcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxpipcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startingpipcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    durationsec: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeoutConfig}
 */
proto.TimeoutConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeoutConfig;
  return proto.TimeoutConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeoutConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeoutConfig}
 */
proto.TimeoutConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxtimeoutcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartingtimeoutcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxpipcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartingpipcount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationsec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeoutConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeoutConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeoutConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoutConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxtimeoutcount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStartingtimeoutcount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxpipcount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getStartingpipcount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDurationsec();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 maxTimeoutCount = 1;
 * @return {number}
 */
proto.TimeoutConfig.prototype.getMaxtimeoutcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TimeoutConfig.prototype.setMaxtimeoutcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 startingTimeoutCount = 2;
 * @return {number}
 */
proto.TimeoutConfig.prototype.getStartingtimeoutcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TimeoutConfig.prototype.setStartingtimeoutcount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxPipCount = 3;
 * @return {number}
 */
proto.TimeoutConfig.prototype.getMaxpipcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TimeoutConfig.prototype.setMaxpipcount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 startingPipCount = 4;
 * @return {number}
 */
proto.TimeoutConfig.prototype.getStartingpipcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TimeoutConfig.prototype.setStartingpipcount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 durationSec = 5;
 * @return {number}
 */
proto.TimeoutConfig.prototype.getDurationsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TimeoutConfig.prototype.setDurationsec = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeoutMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimeoutMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimeoutMessage.displayName = 'proto.TimeoutMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeoutMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeoutMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeoutMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoutMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeoutcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timer: (f = msg.getTimer()) && proto.TimerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeoutMessage}
 */
proto.TimeoutMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeoutMessage;
  return proto.TimeoutMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeoutMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeoutMessage}
 */
proto.TimeoutMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeatid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutcount(value);
      break;
    case 3:
      var value = new proto.TimerInfo;
      reader.readMessage(value,proto.TimerInfo.deserializeBinaryFromReader);
      msg.setTimer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeoutMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeoutMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeoutMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoutMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTimeoutcount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTimer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TimerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 seatId = 1;
 * @return {number}
 */
proto.TimeoutMessage.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TimeoutMessage.prototype.setSeatid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 timeoutCount = 2;
 * @return {number}
 */
proto.TimeoutMessage.prototype.getTimeoutcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TimeoutMessage.prototype.setTimeoutcount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TimerInfo timer = 3;
 * @return {?proto.TimerInfo}
 */
proto.TimeoutMessage.prototype.getTimer = function() {
  return /** @type{?proto.TimerInfo} */ (
    jspb.Message.getWrapperField(this, proto.TimerInfo, 3));
};


/** @param {?proto.TimerInfo|undefined} value */
proto.TimeoutMessage.prototype.setTimer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TimeoutMessage.prototype.clearTimer = function() {
  this.setTimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TimeoutMessage.prototype.hasTimer = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimerConfig.repeatedFields_, null);
};
goog.inherits(proto.TimerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimerConfig.displayName = 'proto.TimerConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimerConfig.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.TimerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlsList: jspb.Message.toObjectList(msg.getControlsList(),
    proto.TimerControl.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    durationsec: jspb.Message.getFieldWithDefault(msg, 4, 0),
    behavior: jspb.Message.getFieldWithDefault(msg, 5, 0),
    warningthresholdsec: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxdurationsec: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimerConfig}
 */
proto.TimerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimerConfig;
  return proto.TimerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimerConfig}
 */
proto.TimerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.TimerControl;
      reader.readMessage(value,proto.TimerControl.deserializeBinaryFromReader);
      msg.addControls(value);
      break;
    case 1:
      var value = /** @type {!proto.TimerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationsec(value);
      break;
    case 5:
      var value = /** @type {!proto.TimerBehavior} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWarningthresholdsec(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxdurationsec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.TimerControl.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDurationsec();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getWarningthresholdsec();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getMaxdurationsec();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * repeated TimerControl controls = 6;
 * @return {!Array.<!proto.TimerControl>}
 */
proto.TimerConfig.prototype.getControlsList = function() {
  return /** @type{!Array.<!proto.TimerControl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimerControl, 6));
};


/** @param {!Array.<!proto.TimerControl>} value */
proto.TimerConfig.prototype.setControlsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.TimerControl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimerControl}
 */
proto.TimerConfig.prototype.addControls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.TimerControl, opt_index);
};


proto.TimerConfig.prototype.clearControlsList = function() {
  this.setControlsList([]);
};


/**
 * optional TimerType type = 1;
 * @return {!proto.TimerType}
 */
proto.TimerConfig.prototype.getType = function() {
  return /** @type {!proto.TimerType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TimerType} value */
proto.TimerConfig.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 durationSec = 4;
 * @return {number}
 */
proto.TimerConfig.prototype.getDurationsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TimerConfig.prototype.setDurationsec = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional TimerBehavior behavior = 5;
 * @return {!proto.TimerBehavior}
 */
proto.TimerConfig.prototype.getBehavior = function() {
  return /** @type {!proto.TimerBehavior} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.TimerBehavior} value */
proto.TimerConfig.prototype.setBehavior = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint32 warningThresholdSec = 7;
 * @return {number}
 */
proto.TimerConfig.prototype.getWarningthresholdsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TimerConfig.prototype.setWarningthresholdsec = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 maxDurationSec = 8;
 * @return {number}
 */
proto.TimerConfig.prototype.getMaxdurationsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.TimerConfig.prototype.setMaxdurationsec = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimerControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimerControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimerControl.displayName = 'proto.TimerControl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimerControl.prototype.toObject = function(opt_includeInstance) {
  return proto.TimerControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimerControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimerControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, 0),
    behavior: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimerControl}
 */
proto.TimerControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimerControl;
  return proto.TimerControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimerControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimerControl}
 */
proto.TimerControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TimerEvent} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {!proto.TimerBehavior} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimerControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimerControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimerControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimerControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional TimerEvent event = 1;
 * @return {!proto.TimerEvent}
 */
proto.TimerControl.prototype.getEvent = function() {
  return /** @type {!proto.TimerEvent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TimerEvent} value */
proto.TimerControl.prototype.setEvent = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TimerBehavior behavior = 2;
 * @return {!proto.TimerBehavior}
 */
proto.TimerControl.prototype.getBehavior = function() {
  return /** @type {!proto.TimerBehavior} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.TimerBehavior} value */
proto.TimerControl.prototype.setBehavior = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimerInfo.displayName = 'proto.TimerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TimerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    timerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    durationsec: jspb.Message.getFieldWithDefault(msg, 3, 0),
    elapsedsec: jspb.Message.getFieldWithDefault(msg, 4, 0),
    running: jspb.Message.getFieldWithDefault(msg, 5, false),
    behavior: jspb.Message.getFieldWithDefault(msg, 6, 0),
    warningthresholdsec: jspb.Message.getFieldWithDefault(msg, 7, 0),
    elapsedms: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimerInfo}
 */
proto.TimerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimerInfo;
  return proto.TimerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimerInfo}
 */
proto.TimerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimerid(value);
      break;
    case 2:
      var value = /** @type {!proto.TimerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationsec(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setElapsedsec(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunning(value);
      break;
    case 6:
      var value = /** @type {!proto.TimerBehavior} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWarningthresholdsec(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setElapsedms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDurationsec();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getElapsedsec();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRunning();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getWarningthresholdsec();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getElapsedms();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional uint32 timerId = 1;
 * @return {number}
 */
proto.TimerInfo.prototype.getTimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TimerInfo.prototype.setTimerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TimerType type = 2;
 * @return {!proto.TimerType}
 */
proto.TimerInfo.prototype.getType = function() {
  return /** @type {!proto.TimerType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.TimerType} value */
proto.TimerInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 durationSec = 3;
 * @return {number}
 */
proto.TimerInfo.prototype.getDurationsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TimerInfo.prototype.setDurationsec = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 elapsedSec = 4;
 * @return {number}
 */
proto.TimerInfo.prototype.getElapsedsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TimerInfo.prototype.setElapsedsec = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool running = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TimerInfo.prototype.getRunning = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.TimerInfo.prototype.setRunning = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional TimerBehavior behavior = 6;
 * @return {!proto.TimerBehavior}
 */
proto.TimerInfo.prototype.getBehavior = function() {
  return /** @type {!proto.TimerBehavior} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.TimerBehavior} value */
proto.TimerInfo.prototype.setBehavior = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint32 warningThresholdSec = 7;
 * @return {number}
 */
proto.TimerInfo.prototype.getWarningthresholdsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TimerInfo.prototype.setWarningthresholdsec = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 elapsedMs = 8;
 * @return {number}
 */
proto.TimerInfo.prototype.getElapsedms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.TimerInfo.prototype.setElapsedms = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TreeOfCongress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TreeOfCongress.repeatedFields_, null);
};
goog.inherits(proto.TreeOfCongress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TreeOfCongress.displayName = 'proto.TreeOfCongress';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TreeOfCongress.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TreeOfCongress.prototype.toObject = function(opt_includeInstance) {
  return proto.TreeOfCongress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TreeOfCongress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TreeOfCongress.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemseatidList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TreeOfCongress}
 */
proto.TreeOfCongress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TreeOfCongress;
  return proto.TreeOfCongress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TreeOfCongress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TreeOfCongress}
 */
proto.TreeOfCongress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSystemseatidList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TreeOfCongress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TreeOfCongress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TreeOfCongress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TreeOfCongress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemseatidList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 systemSeatId = 1;
 * @return {!Array.<number>}
 */
proto.TreeOfCongress.prototype.getSystemseatidList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.TreeOfCongress.prototype.setSystemseatidList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.TreeOfCongress.prototype.addSystemseatid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.TreeOfCongress.prototype.clearSystemseatidList = function() {
  this.setSystemseatidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TurnInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TurnInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TurnInfo.displayName = 'proto.TurnInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TurnInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TurnInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TurnInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TurnInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, 0),
    step: jspb.Message.getFieldWithDefault(msg, 2, 0),
    turnnumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    activeplayer: jspb.Message.getFieldWithDefault(msg, 4, 0),
    priorityplayer: jspb.Message.getFieldWithDefault(msg, 5, 0),
    decisionplayer: jspb.Message.getFieldWithDefault(msg, 6, 0),
    stormcount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    nextphase: jspb.Message.getFieldWithDefault(msg, 8, 0),
    nextstep: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TurnInfo}
 */
proto.TurnInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TurnInfo;
  return proto.TurnInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TurnInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TurnInfo}
 */
proto.TurnInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {!proto.Step} */ (reader.readEnum());
      msg.setStep(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurnnumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveplayer(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriorityplayer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecisionplayer(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStormcount(value);
      break;
    case 8:
      var value = /** @type {!proto.Phase} */ (reader.readEnum());
      msg.setNextphase(value);
      break;
    case 9:
      var value = /** @type {!proto.Step} */ (reader.readEnum());
      msg.setNextstep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TurnInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TurnInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TurnInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TurnInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStep();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTurnnumber();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getActiveplayer();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPriorityplayer();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDecisionplayer();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getStormcount();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getNextphase();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getNextstep();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional Phase phase = 1;
 * @return {!proto.Phase}
 */
proto.TurnInfo.prototype.getPhase = function() {
  return /** @type {!proto.Phase} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Phase} value */
proto.TurnInfo.prototype.setPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Step step = 2;
 * @return {!proto.Step}
 */
proto.TurnInfo.prototype.getStep = function() {
  return /** @type {!proto.Step} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Step} value */
proto.TurnInfo.prototype.setStep = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 turnNumber = 3;
 * @return {number}
 */
proto.TurnInfo.prototype.getTurnnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TurnInfo.prototype.setTurnnumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 activePlayer = 4;
 * @return {number}
 */
proto.TurnInfo.prototype.getActiveplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TurnInfo.prototype.setActiveplayer = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 priorityPlayer = 5;
 * @return {number}
 */
proto.TurnInfo.prototype.getPriorityplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TurnInfo.prototype.setPriorityplayer = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 decisionPlayer = 6;
 * @return {number}
 */
proto.TurnInfo.prototype.getDecisionplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TurnInfo.prototype.setDecisionplayer = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 stormCount = 7;
 * @return {number}
 */
proto.TurnInfo.prototype.getStormcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TurnInfo.prototype.setStormcount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Phase nextPhase = 8;
 * @return {!proto.Phase}
 */
proto.TurnInfo.prototype.getNextphase = function() {
  return /** @type {!proto.Phase} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.Phase} value */
proto.TurnInfo.prototype.setNextphase = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional Step nextStep = 9;
 * @return {!proto.Step}
 */
proto.TurnInfo.prototype.getNextstep = function() {
  return /** @type {!proto.Step} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.Step} value */
proto.TurnInfo.prototype.setNextstep = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UIMessage.repeatedFields_, null);
};
goog.inherits(proto.UIMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIMessage.displayName = 'proto.UIMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UIMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.UIMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatidsList: jspb.Message.getRepeatedField(msg, 1),
    onselect: (f = msg.getOnselect()) && proto.OnSelect.toObject(includeInstance, f),
    onhover: (f = msg.getOnhover()) && proto.OnHover.toObject(includeInstance, f),
    onshuffle: (f = msg.getOnshuffle()) && proto.OnShuffle.toObject(includeInstance, f),
    onchat: (f = msg.getOnchat()) && proto.OnChat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIMessage}
 */
proto.UIMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIMessage;
  return proto.UIMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIMessage}
 */
proto.UIMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSeatidsList(value);
      break;
    case 2:
      var value = new proto.OnSelect;
      reader.readMessage(value,proto.OnSelect.deserializeBinaryFromReader);
      msg.setOnselect(value);
      break;
    case 3:
      var value = new proto.OnHover;
      reader.readMessage(value,proto.OnHover.deserializeBinaryFromReader);
      msg.setOnhover(value);
      break;
    case 4:
      var value = new proto.OnShuffle;
      reader.readMessage(value,proto.OnShuffle.deserializeBinaryFromReader);
      msg.setOnshuffle(value);
      break;
    case 5:
      var value = new proto.OnChat;
      reader.readMessage(value,proto.OnChat.deserializeBinaryFromReader);
      msg.setOnchat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getOnselect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OnSelect.serializeBinaryToWriter
    );
  }
  f = message.getOnhover();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OnHover.serializeBinaryToWriter
    );
  }
  f = message.getOnshuffle();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OnShuffle.serializeBinaryToWriter
    );
  }
  f = message.getOnchat();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.OnChat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 seatIds = 1;
 * @return {!Array.<number>}
 */
proto.UIMessage.prototype.getSeatidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.UIMessage.prototype.setSeatidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.UIMessage.prototype.addSeatids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.UIMessage.prototype.clearSeatidsList = function() {
  this.setSeatidsList([]);
};


/**
 * optional OnSelect onSelect = 2;
 * @return {?proto.OnSelect}
 */
proto.UIMessage.prototype.getOnselect = function() {
  return /** @type{?proto.OnSelect} */ (
    jspb.Message.getWrapperField(this, proto.OnSelect, 2));
};


/** @param {?proto.OnSelect|undefined} value */
proto.UIMessage.prototype.setOnselect = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UIMessage.prototype.clearOnselect = function() {
  this.setOnselect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIMessage.prototype.hasOnselect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OnHover onHover = 3;
 * @return {?proto.OnHover}
 */
proto.UIMessage.prototype.getOnhover = function() {
  return /** @type{?proto.OnHover} */ (
    jspb.Message.getWrapperField(this, proto.OnHover, 3));
};


/** @param {?proto.OnHover|undefined} value */
proto.UIMessage.prototype.setOnhover = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.UIMessage.prototype.clearOnhover = function() {
  this.setOnhover(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIMessage.prototype.hasOnhover = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OnShuffle onShuffle = 4;
 * @return {?proto.OnShuffle}
 */
proto.UIMessage.prototype.getOnshuffle = function() {
  return /** @type{?proto.OnShuffle} */ (
    jspb.Message.getWrapperField(this, proto.OnShuffle, 4));
};


/** @param {?proto.OnShuffle|undefined} value */
proto.UIMessage.prototype.setOnshuffle = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.UIMessage.prototype.clearOnshuffle = function() {
  this.setOnshuffle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIMessage.prototype.hasOnshuffle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OnChat onChat = 5;
 * @return {?proto.OnChat}
 */
proto.UIMessage.prototype.getOnchat = function() {
  return /** @type{?proto.OnChat} */ (
    jspb.Message.getWrapperField(this, proto.OnChat, 5));
};


/** @param {?proto.OnChat|undefined} value */
proto.UIMessage.prototype.setOnchat = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.UIMessage.prototype.clearOnchat = function() {
  this.setOnchat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIMessage.prototype.hasOnchat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UInt32Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UInt32Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UInt32Value.displayName = 'proto.UInt32Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UInt32Value.prototype.toObject = function(opt_includeInstance) {
  return proto.UInt32Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UInt32Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UInt32Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UInt32Value}
 */
proto.UInt32Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UInt32Value;
  return proto.UInt32Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UInt32Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UInt32Value}
 */
proto.UInt32Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UInt32Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UInt32Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UInt32Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UInt32Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.UInt32Value.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UInt32Value.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserConnectionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserConnectionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserConnectionInfo.displayName = 'proto.UserConnectionInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserConnectionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.UserConnectionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserConnectionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserConnectionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionstate: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lastconnecttimestamp: jspb.Message.getFieldWithDefault(msg, 10, 0),
    lastdisconnecttimestamp: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserConnectionInfo}
 */
proto.UserConnectionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserConnectionInfo;
  return proto.UserConnectionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserConnectionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserConnectionInfo}
 */
proto.UserConnectionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ConnectionState} */ (reader.readEnum());
      msg.setConnectionstate(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastconnecttimestamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastdisconnecttimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserConnectionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserConnectionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserConnectionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserConnectionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionstate();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLastconnecttimestamp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getLastdisconnecttimestamp();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
};


/**
 * optional ConnectionState connectionState = 1;
 * @return {!proto.ConnectionState}
 */
proto.UserConnectionInfo.prototype.getConnectionstate = function() {
  return /** @type {!proto.ConnectionState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ConnectionState} value */
proto.UserConnectionInfo.prototype.setConnectionstate = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 lastConnectTimestamp = 10;
 * @return {number}
 */
proto.UserConnectionInfo.prototype.getLastconnecttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.UserConnectionInfo.prototype.setLastconnecttimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 lastDisconnectTimestamp = 11;
 * @return {number}
 */
proto.UserConnectionInfo.prototype.getLastdisconnecttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.UserConnectionInfo.prototype.setLastdisconnecttimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserOption.displayName = 'proto.UserOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserOption.prototype.toObject = function(opt_includeInstance) {
  return proto.UserOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionprompt: (f = msg.getOptionprompt()) && proto.Prompt.toObject(includeInstance, f),
    responsetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserOption}
 */
proto.UserOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserOption;
  return proto.UserOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserOption}
 */
proto.UserOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Prompt;
      reader.readMessage(value,proto.Prompt.deserializeBinaryFromReader);
      msg.setOptionprompt(value);
      break;
    case 2:
      var value = /** @type {!proto.ClientMessageType} */ (reader.readEnum());
      msg.setResponsetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionprompt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getResponsetype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Prompt optionPrompt = 1;
 * @return {?proto.Prompt}
 */
proto.UserOption.prototype.getOptionprompt = function() {
  return /** @type{?proto.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.Prompt, 1));
};


/** @param {?proto.Prompt|undefined} value */
proto.UserOption.prototype.setOptionprompt = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UserOption.prototype.clearOptionprompt = function() {
  this.setOptionprompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserOption.prototype.hasOptionprompt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientMessageType responseType = 2;
 * @return {!proto.ClientMessageType}
 */
proto.UserOption.prototype.getResponsetype = function() {
  return /** @type {!proto.ClientMessageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ClientMessageType} value */
proto.UserOption.prototype.setResponsetype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ValueHeuristicDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ValueHeuristicDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ValueHeuristicDefinition.displayName = 'proto.ValueHeuristicDefinition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ValueHeuristicDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.ValueHeuristicDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ValueHeuristicDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValueHeuristicDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
    weight: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ValueHeuristicDefinition}
 */
proto.ValueHeuristicDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ValueHeuristicDefinition;
  return proto.ValueHeuristicDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ValueHeuristicDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ValueHeuristicDefinition}
 */
proto.ValueHeuristicDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriority(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ValueHeuristicDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ValueHeuristicDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ValueHeuristicDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValueHeuristicDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ValueHeuristicDefinition.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ValueHeuristicDefinition.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 priority = 2;
 * @return {number}
 */
proto.ValueHeuristicDefinition.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ValueHeuristicDefinition.prototype.setPriority = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 weight = 3;
 * @return {number}
 */
proto.ValueHeuristicDefinition.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ValueHeuristicDefinition.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ValueHeuristicParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ValueHeuristicParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ValueHeuristicParameter.displayName = 'proto.ValueHeuristicParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ValueHeuristicParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.ValueHeuristicParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ValueHeuristicParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValueHeuristicParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramvalue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ValueHeuristicParameter}
 */
proto.ValueHeuristicParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ValueHeuristicParameter;
  return proto.ValueHeuristicParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ValueHeuristicParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ValueHeuristicParameter}
 */
proto.ValueHeuristicParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParamvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ValueHeuristicParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ValueHeuristicParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ValueHeuristicParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValueHeuristicParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamvalue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ValueHeuristicParameter.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ValueHeuristicParameter.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 paramValue = 2;
 * @return {number}
 */
proto.ValueHeuristicParameter.prototype.getParamvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ValueHeuristicParameter.prototype.setParamvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZoneInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ZoneInfo.repeatedFields_, null);
};
goog.inherits(proto.ZoneInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ZoneInfo.displayName = 'proto.ZoneInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ZoneInfo.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZoneInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ZoneInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZoneInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZoneInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinstanceidsList: jspb.Message.getRepeatedField(msg, 5),
    viewersList: jspb.Message.getRepeatedField(msg, 6),
    zoneid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    visibility: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ownerseatid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZoneInfo}
 */
proto.ZoneInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZoneInfo;
  return proto.ZoneInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZoneInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZoneInfo}
 */
proto.ZoneInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setObjectinstanceidsList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setViewersList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setZoneid(value);
      break;
    case 2:
      var value = /** @type {!proto.ZoneType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.Visibility} */ (reader.readEnum());
      msg.setVisibility(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOwnerseatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZoneInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZoneInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZoneInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZoneInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinstanceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getViewersList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getZoneid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getVisibility();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOwnerseatid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated uint32 objectInstanceIds = 5;
 * @return {!Array.<number>}
 */
proto.ZoneInfo.prototype.getObjectinstanceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.ZoneInfo.prototype.setObjectinstanceidsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ZoneInfo.prototype.addObjectinstanceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.ZoneInfo.prototype.clearObjectinstanceidsList = function() {
  this.setObjectinstanceidsList([]);
};


/**
 * repeated uint32 viewers = 6;
 * @return {!Array.<number>}
 */
proto.ZoneInfo.prototype.getViewersList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.ZoneInfo.prototype.setViewersList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ZoneInfo.prototype.addViewers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.ZoneInfo.prototype.clearViewersList = function() {
  this.setViewersList([]);
};


/**
 * optional uint32 zoneId = 1;
 * @return {number}
 */
proto.ZoneInfo.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ZoneInfo.prototype.setZoneid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ZoneType type = 2;
 * @return {!proto.ZoneType}
 */
proto.ZoneInfo.prototype.getType = function() {
  return /** @type {!proto.ZoneType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ZoneType} value */
proto.ZoneInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Visibility visibility = 3;
 * @return {!proto.Visibility}
 */
proto.ZoneInfo.prototype.getVisibility = function() {
  return /** @type {!proto.Visibility} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Visibility} value */
proto.ZoneInfo.prototype.setVisibility = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 ownerSeatId = 4;
 * @return {number}
 */
proto.ZoneInfo.prototype.getOwnerseatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ZoneInfo.prototype.setOwnerseatid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.AIConfigOption = {
  AICONFIGOPTION_NONE: 0,
  AICONFIGOPTION_INACTIVE: 1,
  AICONFIGOPTION_ACTIVE: 2
};

/**
 * @enum {number}
 */
proto.AIConfigYesNo = {
  AICONFIGYESNO_NONE: 0,
  AICONFIGYESNO_NO: 1,
  AICONFIGYESNO_YES: 2
};

/**
 * @enum {number}
 */
proto.AIMode = {
  AIMODE_NONE: 0,
  AIMODE_GOLDFISH: 1,
  AIMODE_GAMEPLAY: 2,
  AIMODE_RANDOM: 3
};

/**
 * @enum {number}
 */
proto.AbilityCategory = {
  ABILITYCATEGORY_NONE: 0,
  ABILITYCATEGORY_ACTIVATED: 1,
  ABILITYCATEGORY_TRIGGERED: 2,
  ABILITYCATEGORY_STATIC: 3,
  ABILITYCATEGORY_SPELL: 4,
  ABILITYCATEGORY_ADDITIONALCOST: 5,
  ABILITYCATEGORY_ACTIVATEDTEST: 6,
  ABILITYCATEGORY_CHAINED: 7,
  ABILITYCATEGORY_ALTERNATIVECOST: 8,
  ABILITYCATEGORY_OPENINGHANDACTION: 9
};

/**
 * @enum {number}
 */
proto.AbilityGameAdjustments = {
  ABILITYGAMEADJUSTMENTS_NONE: 0,
  ABILITYGAMEADJUSTMENTS_LOADSIDEBOARDS: 1
};

/**
 * @enum {number}
 */
proto.AbilityPaymentType = {
  ABILITYPAYMENTTYPE_NONE: 0,
  ABILITYPAYMENTTYPE_TAPSYMBOL: 1,
  ABILITYPAYMENTTYPE_LOYALTY: 2
};

/**
 * @enum {number}
 */
proto.AbilitySubCategory = {
  ABILITYSUBCATEGORY_NONE: 0,
  ABILITYSUBCATEGORY_MANA: 1,
  ABILITYSUBCATEGORY_LOYALTY: 2,
  ABILITYSUBCATEGORY_PAYMENT: 3,
  ABILITYSUBCATEGORY_CREW: 4,
  ABILITYSUBCATEGORY_EMBALM: 5,
  ABILITYSUBCATEGORY_CYCLING: 6,
  ABILITYSUBCATEGORY_TRANSFORM: 7,
  ABILITYSUBCATEGORY_EXPLORE: 8,
  ABILITYSUBCATEGORY_ETERNALIZE: 9,
  ABILITYSUBCATEGORY_ENTERTHEBATTLEFIELD: 10,
  ABILITYSUBCATEGORY_SURVEIL: 11
};

/**
 * @enum {number}
 */
proto.AbilityType = {
  ABILITYTYPE_NONE: 0,
  ABILITYTYPE_DEATHTOUCH: 1,
  ABILITYTYPE_DEFENDER: 2,
  ABILITYTYPE_DOUBLESTRIKE: 3,
  ABILITYTYPE_ENCHANT: 4,
  ABILITYTYPE_EQUIP: 5,
  ABILITYTYPE_FIRSTSTRIKE: 6,
  ABILITYTYPE_FLASH: 7,
  ABILITYTYPE_FLYING: 8,
  ABILITYTYPE_HASTE: 9,
  ABILITYTYPE_HEXPROOF: 10,
  ABILITYTYPE_INTIMIDATE: 11,
  ABILITYTYPE_LIFELINK: 12,
  ABILITYTYPE_REACH: 13,
  ABILITYTYPE_TRAMPLE: 14,
  ABILITYTYPE_VIGILANCE: 15,
  ABILITYTYPE_LANDWALK: 16,
  ABILITYTYPE_PROTECTIONFROM: 21,
  ABILITYTYPE_SHROUD: 22,
  ABILITYTYPE_BANDING: 23,
  ABILITYTYPE_RAMPAGE: 24,
  ABILITYTYPE_CUMULATIVEUPKEEP: 25,
  ABILITYTYPE_FLANKING: 26,
  ABILITYTYPE_PHASING: 27,
  ABILITYTYPE_BUYBACK: 28,
  ABILITYTYPE_SHADOW: 29,
  ABILITYTYPE_CYCLING: 30,
  ABILITYTYPE_ECHO: 31,
  ABILITYTYPE_HORSEMANSHIP: 32,
  ABILITYTYPE_FADING: 33,
  ABILITYTYPE_KICKER: 34,
  ABILITYTYPE_FLASHBACK: 35,
  ABILITYTYPE_MADNESS: 36,
  ABILITYTYPE_MORPH: 37,
  ABILITYTYPE_FEAR: 38,
  ABILITYTYPE_AMPLIFY: 39,
  ABILITYTYPE_PROVOKE: 40,
  ABILITYTYPE_STORM: 41,
  ABILITYTYPE_AFFINITYFOR: 42,
  ABILITYTYPE_ENTWINE: 43,
  ABILITYTYPE_MODULAR: 44,
  ABILITYTYPE_SUNBURST: 45,
  ABILITYTYPE_BUSHIDO: 46,
  ABILITYTYPE_SOULSHIFT: 47,
  ABILITYTYPE_SPLICE: 48,
  ABILITYTYPE_OFFERING: 49,
  ABILITYTYPE_NINJITSU: 50,
  ABILITYTYPE_EPIC: 51,
  ABILITYTYPE_CONVOKE: 52,
  ABILITYTYPE_DREDGE: 53,
  ABILITYTYPE_TRANSMUTE: 54,
  ABILITYTYPE_BLOODTHIRST: 55,
  ABILITYTYPE_HAUNT: 56,
  ABILITYTYPE_REPLICATE: 57,
  ABILITYTYPE_FORECAST: 58,
  ABILITYTYPE_GRAFT: 59,
  ABILITYTYPE_RECOVER: 60,
  ABILITYTYPE_RIPPLE: 61,
  ABILITYTYPE_SPLITSECOND: 62,
  ABILITYTYPE_SUSPEND: 63,
  ABILITYTYPE_VANISHING: 64,
  ABILITYTYPE_ABSORB: 65,
  ABILITYTYPE_AURASWAP: 66,
  ABILITYTYPE_DELVE: 67,
  ABILITYTYPE_FORTIFY: 68,
  ABILITYTYPE_FRENZY: 69,
  ABILITYTYPE_GRAVESTORM: 70,
  ABILITYTYPE_POISONOUS: 71,
  ABILITYTYPE_TRANSFIGURE: 72,
  ABILITYTYPE_CHAMPION: 73,
  ABILITYTYPE_CHANGELING: 74,
  ABILITYTYPE_EVOKE: 75,
  ABILITYTYPE_HIDEAWAY: 76,
  ABILITYTYPE_PROWL: 77,
  ABILITYTYPE_REINFORCE: 78,
  ABILITYTYPE_CONSPIRE: 79,
  ABILITYTYPE_PERSIST: 80,
  ABILITYTYPE_WITHER: 81,
  ABILITYTYPE_RETRACE: 82,
  ABILITYTYPE_DEVOUR: 83,
  ABILITYTYPE_EXALTED: 84,
  ABILITYTYPE_UNEARTH: 85,
  ABILITYTYPE_CASCADE: 86,
  ABILITYTYPE_ANNIHILATOR: 87,
  ABILITYTYPE_LEVELUP: 88,
  ABILITYTYPE_REBOUND: 89,
  ABILITYTYPE_TOTEMARMOR: 90,
  ABILITYTYPE_INFECT: 91,
  ABILITYTYPE_BATTLECRY: 92,
  ABILITYTYPE_LIVINGWEAPON: 93,
  ABILITYTYPE_UNDYING: 94,
  ABILITYTYPE_MIRACLE: 95,
  ABILITYTYPE_SOULBOND: 96,
  ABILITYTYPE_OVERLOAD: 97,
  ABILITYTYPE_SCAVENGE: 98,
  ABILITYTYPE_UNLEASH: 99,
  ABILITYTYPE_CIPHER: 100,
  ABILITYTYPE_EVOLVE: 101,
  ABILITYTYPE_EXTORT: 102,
  ABILITYTYPE_FUSE: 103,
  ABILITYTYPE_INDESTRUCTIBLE: 104,
  ABILITYTYPE_REGENERATE: 105,
  ABILITYTYPE_ENTERZONE_TAPPED: 106,
  ABILITYTYPE_ENTERZONE_CONTROLLED: 107,
  ABILITYTYPE_ENTERZONE_ATTACHED: 108,
  ABILITYTYPE_LEVEL: 109,
  ABILITYTYPE_ENTERZONE_WITHCOUNTERS: 110,
  ABILITYTYPE_TURNFACEUP_WITHCOUNTERS: 111,
  ABILITYTYPE_PLANESWALKERLOYALTYREPLACEMENT: 114,
  ABILITYTYPE_MULTIKICKER: 122,
  ABILITYTYPE_BASICLANDCYCLING: 123,
  ABILITYTYPE_FORESTCYCLING: 124,
  ABILITYTYPE_ISLANDCYCLING: 125,
  ABILITYTYPE_MOUNTAINCYCLING: 126,
  ABILITYTYPE_PLAINSCYCLING: 127,
  ABILITYTYPE_SLIVERCYCLING: 128,
  ABILITYTYPE_SWAMPCYCLING: 129,
  ABILITYTYPE_WIZARDCYCLING: 130,
  ABILITYTYPE_MONSTROSITY: 134,
  ABILITYTYPE_TRIBUTE: 135,
  ABILITYTYPE_OUTLAST: 136,
  ABILITYTYPE_PROWESS: 137,
  ABILITYTYPE_BOLSTER: 138,
  ABILITYTYPE_PLANESWALKERDAMAGEREDIRECTION: 139,
  ABILITYTYPE_ORDEROBJECTSENTERINGGRAVEYARD: 140,
  ABILITYTYPE_ORDEROBJECTSENTERINGLIBRARY: 141,
  ABILITYTYPE_MENACE: 142,
  ABILITYTYPE_SKULK: 143,
  ABILITYTYPE_INGEST: 144,
  ABILITYTYPE_MANIFEST: 145,
  ABILITYTYPE_EMERGE: 147,
  ABILITYTYPE_DELIVERANCE: 148,
  ABILITYTYPE_CASTWITHOUTPAYINGMANACOST: 149,
  ABILITYTYPE_MEGAMORPH: 150,
  ABILITYTYPE_DEVOID: 151,
  ABILITYTYPE_SACRIFICECLUE: 152,
  ABILITYTYPE_ESCALATE: 153,
  ABILITYTYPE_FABRICATE: 154,
  ABILITYTYPE_CREW: 156,
  ABILITYTYPE_IMPROVISE: 157,
  ABILITYTYPE_CHOOSEZONEFORMUTUALLYEXCLUSIVEZONETRANSFERS: 158,
  ABILITYTYPE_AFTERMATH: 159,
  ABILITYTYPE_EMBALM: 160,
  ABILITYTYPE_TAPFORIMPROVISE: 161,
  ABILITYTYPE_EXERT: 162,
  ABILITYTYPE_ETERNALIZE: 163,
  ABILITYTYPE_AFFLICT: 164,
  ABILITYTYPE_ASCEND: 165,
  ABILITYTYPE_SAGACHAPTER: 166,
  ABILITYTYPE_SAGALOREREPLACEMENT: 167,
  ABILITYTYPE_SAGALORETURN: 168,
  ABILITYTYPE_SURVEIL: 169,
  ABILITYTYPE_JUMPSTART: 170,
  ABILITYTYPE_MENTOR: 171,
  ABILITYTYPE_TAPFORCONVOKE: 172,
  ABILITYTYPE_PLACEHOLDER1: 173,
  ABILITYTYPE_PLACEHOLDER2: 174,
  ABILITYTYPE_PLACEHOLDER3: 175,
  ABILITYTYPE_PLACEHOLDER4: 176,
  ABILITYTYPE_PLACEHOLDER5: 177,
  ABILITYTYPE_TWIDDLE_TEST: 989,
  ABILITYTYPE_DONATE_TEST: 990,
  ABILITYTYPE_BOUNCE_TEST: 991,
  ABILITYTYPE_DRAWCARD_TEST: 992,
  ABILITYTYPE_ADDCOST_TEST: 993,
  ABILITYTYPE_DEPLOYBEARS_TEST: 994,
  ABILITYTYPE_ENDTURN_TEST: 995,
  ABILITYTYPE_WISH_TEST: 996,
  ABILITYTYPE_PUTLIBRARY_TEST: 997,
  ABILITYTYPE_GAINHASTE_TEST: 998,
  ABILITYTYPE_ADDWUBRG_TEST: 999,
  ABILITYTYPE_INTRINSICMANA_W: 1001,
  ABILITYTYPE_INTRINSICMANA_U: 1002,
  ABILITYTYPE_INTRINSICMANA_B: 1003,
  ABILITYTYPE_INTRINSICMANA_R: 1004,
  ABILITYTYPE_INTRINSICMANA_G: 1005,
  ABILITYTYPE_AUTOGEN: 1006
};

/**
 * @enum {number}
 */
proto.AbilityWord = {
  ABILITYWORD_NONE: 0,
  ABILITYWORD_BATTALION: 1,
  ABILITYWORD_BLOODRUSH: 2,
  ABILITYWORD_CHANNEL: 3,
  ABILITYWORD_CHROMA: 4,
  ABILITYWORD_COHORT: 5,
  ABILITYWORD_CONSTELLATION: 6,
  ABILITYWORD_CONVERGE: 7,
  ABILITYWORD_COUNCILSDILEMMA: 8,
  ABILITYWORD_DELIRIUM: 9,
  ABILITYWORD_DOMAIN: 10,
  ABILITYWORD_FATEFULHOUR: 11,
  ABILITYWORD_FEROCIOUS: 12,
  ABILITYWORD_FORMIDABLE: 13,
  ABILITYWORD_GRANDEUR: 14,
  ABILITYWORD_HELLBENT: 15,
  ABILITYWORD_HEROIC: 16,
  ABILITYWORD_IMPRINT: 17,
  ABILITYWORD_INSPIRED: 18,
  ABILITYWORD_JOINFORCES: 19,
  ABILITYWORD_KINSHIP: 20,
  ABILITYWORD_LANDFALL: 21,
  ABILITYWORD_LIEUTENANT: 22,
  ABILITYWORD_METALCRAFT: 23,
  ABILITYWORD_MORBID: 24,
  ABILITYWORD_PARLEY: 25,
  ABILITYWORD_RADIANCE: 26,
  ABILITYWORD_RAID: 27,
  ABILITYWORD_RALLY: 28,
  ABILITYWORD_SPELLMASTERY: 29,
  ABILITYWORD_STRIVE: 30,
  ABILITYWORD_SWEEP: 31,
  ABILITYWORD_TEMPTINGOFFER: 32,
  ABILITYWORD_THRESHOLD: 33,
  ABILITYWORD_WILLOFTHECOUNCIL: 34,
  ABILITYWORD_REVOLT: 35,
  ABILITYWORD_ENRAGE: 36,
  ABILITYWORD_HISTORIC: 37,
  ABILITYWORD_UNDERGROWTH: 38
};

/**
 * @enum {number}
 */
proto.ActionCostType = {
  ACTIONCOSTTYPE_NONE: 0,
  ACTIONCOSTTYPE_SELECT: 1,
  ACTIONCOSTTYPE_SELECTCOUNTER: 2,
  ACTIONCOSTTYPE_AUTOSELECT: 3
};

/**
 * @enum {number}
 */
proto.ActionType = {
  ACTIONTYPE_NONE: 0,
  ACTIONTYPE_CAST: 1,
  ACTIONTYPE_ACTIVATE: 2,
  ACTIONTYPE_PLAY: 3,
  ACTIONTYPE_ACTIVATE_MANA: 4,
  ACTIONTYPE_PASS: 5,
  ACTIONTYPE_ACTIVATE_TEST: 6,
  ACTIONTYPE_MODE: 7,
  ACTIONTYPE_SPECIAL_TURNFACEUP: 8,
  ACTIONTYPE_RESOLUTIONCOST: 9,
  ACTIONTYPE_CASTLEFT: 10,
  ACTIONTYPE_CASTRIGHT: 11,
  ACTIONTYPE_MAKE_PAYMENT: 12,
  ACTIONTYPE_CASTINGTIMEOPTION: 13,
  ACTIONTYPE_COMBATCOST: 14,
  ACTIONTYPE_OPENINGHANDACTION: 15
};

/**
 * @enum {number}
 */
proto.AllowCancel = {
  ALLOWCANCEL_NONE: 0,
  ALLOWCANCEL_CONTINUE: 1,
  ALLOWCANCEL_ABORT: 2,
  ALLOWCANCEL_NO: 3
};

/**
 * @enum {number}
 */
proto.AnnotationType = {
  ANNOTATIONTYPE_NONE: 0,
  ANNOTATIONTYPE_ZONETRANSFER: 1,
  ANNOTATIONTYPE_LOSSOFGAME: 2,
  ANNOTATIONTYPE_DAMAGEDEALT: 3,
  ANNOTATIONTYPE_TAPPEDUNTAPPEDPERMANENT: 4,
  ANNOTATIONTYPE_MODIFIEDPOWER: 5,
  ANNOTATIONTYPE_MODIFIEDTOUGHNESS: 6,
  ANNOTATIONTYPE_MODIFIEDCOLOR: 7,
  ANNOTATIONTYPE_PHASEORSTEPMODIFIED: 8,
  ANNOTATIONTYPE_ADDABILITY: 9,
  ANNOTATIONTYPE_MODIFIEDLIFE: 10,
  ANNOTATIONTYPE_CREATEATTACHMENT: 11,
  ANNOTATIONTYPE_REMOVEATTACHMENT: 12,
  ANNOTATIONTYPE_OBJECTIDCHANGED: 13,
  ANNOTATIONTYPE_COUNTER: 14,
  ANNOTATIONTYPE_CONTROLLERCHANGED: 15,
  ANNOTATIONTYPE_COUNTERADDED: 16,
  ANNOTATIONTYPE_COUNTERREMOVED: 17,
  ANNOTATIONTYPE_LAYEREDEFFECTCREATED: 18,
  ANNOTATIONTYPE_LAYEREDEFFECTDESTROYED: 19,
  ANNOTATIONTYPE_ATTACHMENT: 20,
  ANNOTATIONTYPE_HAUNT: 21,
  ANNOTATIONTYPE_COPIEDOBJECT: 22,
  ANNOTATIONTYPE_REMOVEABILITY: 23,
  ANNOTATIONTYPE_WINTHEGAME: 24,
  ANNOTATIONTYPE_MODIFIEDTYPE: 25,
  ANNOTATIONTYPE_TARGETSPEC: 26,
  ANNOTATIONTYPE_TEXTCHANGE: 27,
  ANNOTATIONTYPE_FACEDOWN: 28,
  ANNOTATIONTYPE_TURNPERMANENT: 29,
  ANNOTATIONTYPE_DYNAMICABILITY: 30,
  ANNOTATIONTYPE_OBJECTSSELECTED: 31,
  ANNOTATIONTYPE_TRIGGERINGOBJECT: 32,
  ANNOTATIONTYPE_DAMAGESOURCE: 33,
  ANNOTATIONTYPE_MANAPAID: 34,
  ANNOTATIONTYPE_TOKENCREATED: 35,
  ANNOTATIONTYPE_ABILITYINSTANCECREATED: 36,
  ANNOTATIONTYPE_ABILITYINSTANCEDELETED: 37,
  ANNOTATIONTYPE_DISPLAYCARDUNDERCARD: 38,
  ANNOTATIONTYPE_ABILITYWORDACTIVE: 39,
  ANNOTATIONTYPE_LINKINFO: 40,
  ANNOTATIONTYPE_TOKENDELETED: 41,
  ANNOTATIONTYPE_QUALIFICATION: 42,
  ANNOTATIONTYPE_RESOLUTIONSTART: 43,
  ANNOTATIONTYPE_RESOLUTIONCOMPLETE: 44,
  ANNOTATIONTYPE_DESIGNATION: 45,
  ANNOTATIONTYPE_GAINDESIGNATION: 46,
  ANNOTATIONTYPE_CARDREVEALED: 47,
  ANNOTATIONTYPE_NEWTURNSTARTED: 48,
  ANNOTATIONTYPE_MANADETAILS: 49,
  ANNOTATIONTYPE_DISQUALIFIEDEFFECT: 50,
  ANNOTATIONTYPE_LAYEREDEFFECT: 51,
  ANNOTATIONTYPE_PENDINGEFFECT: 52,
  ANNOTATIONTYPE_SHOULDNTPLAY: 53,
  ANNOTATIONTYPE_USEORCOSTSMANACOST: 54,
  ANNOTATIONTYPE_REMAININGSELECTIONS: 55,
  ANNOTATIONTYPE_SHUFFLE: 56,
  ANNOTATIONTYPE_COINFLIP: 57,
  ANNOTATIONTYPE_CHOOSERANDOM: 58,
  ANNOTATIONTYPE_REVEALEDCARDCREATED: 59,
  ANNOTATIONTYPE_REVEALEDCARDDELETED: 60,
  ANNOTATIONTYPE_SUSPENDLIKE: 61,
  ANNOTATIONTYPE_REPLACEMENTEFFECT: 62,
  ANNOTATIONTYPE_ENTEREDZONETHISTURN: 63,
  ANNOTATIONTYPE_CASTINGTIMEOPTION: 64,
  ANNOTATIONTYPE_SCRY: 65,
  ANNOTATIONTYPE_PREDICTEDDIRECTDAMAGE: 66,
  ANNOTATIONTYPE_SWITCHPOWERTOUGHNESS: 67,
  ANNOTATIONTYPE_SUPPLEMENTALTEXT: 68
};

/**
 * @enum {number}
 */
proto.Answer = {
  ANSWER_NONE: 0,
  ANSWER_YES: 1,
  ANSWER_NO: 2
};

/**
 * @enum {number}
 */
proto.AttackState = {
  ATTACKSTATE_NONE: 0,
  ATTACKSTATE_DECLARED: 1,
  ATTACKSTATE_ATTACKING: 2
};

/**
 * @enum {number}
 */
proto.AttackWarningType = {
  ATTACKWARNINGTYPE_NONE: 0,
  ATTACKWARNINGTYPE_MUSTATTACKWITHATLEASTONE: 1,
  ATTACKWARNINGTYPE_CANNOTATTACKALONE: 2,
  ATTACKWARNINGTYPE_MUSTATTACK: 3
};

/**
 * @enum {number}
 */
proto.AuthenticationType = {
  AUTHENTICATIONTYPE_INVALID: 0,
  AUTHENTICATIONTYPE_PLAYFABIMPERSONATION: 1,
  AUTHENTICATIONTYPE_SERVICE: 2
};

/**
 * @enum {number}
 */
proto.AutoPassOption = {
  AUTOPASSOPTION_NONE: 0,
  AUTOPASSOPTION_TURN: 1,
  AUTOPASSOPTION_UNLESSACTION: 2,
  AUTOPASSOPTION_ENDSTEP: 3,
  AUTOPASSOPTION_CLEAR: 4,
  AUTOPASSOPTION_UNLESSOPPONENTACTION: 5,
  AUTOPASSOPTION_RESOLVEMYSTACKEFFECTS: 6,
  AUTOPASSOPTION_FULLCONTROL: 7
};

/**
 * @enum {number}
 */
proto.AutoPassPriority = {
  AUTOPASSPRIORITY_NONE: 0,
  AUTOPASSPRIORITY_NO: 1,
  AUTOPASSPRIORITY_YES: 2
};

/**
 * @enum {number}
 */
proto.AutoTapStopsSetting = {
  AUTOTAPSTOPSSETTING_NONE: 0,
  AUTOTAPSTOPSSETTING_ENABLE: 1,
  AUTOTAPSTOPSSETTING_DISABLE: 2
};

/**
 * @enum {number}
 */
proto.BasicLandType = {
  BASICLANDTYPE_NONE: 0,
  BASICLANDTYPE_PLAINS: 1,
  BASICLANDTYPE_ISLAND: 2,
  BASICLANDTYPE_SWAMP: 3,
  BASICLANDTYPE_MOUNTAIN: 4,
  BASICLANDTYPE_FOREST: 5
};

/**
 * @enum {number}
 */
proto.BlockState = {
  BLOCKSTATE_NONE: 0,
  BLOCKSTATE_DECLARED: 1,
  BLOCKSTATE_BLOCKING: 2,
  BLOCKSTATE_BLOCKED: 3,
  BLOCKSTATE_UNBLOCKED: 4
};

/**
 * @enum {number}
 */
proto.BlockWarningType = {
  BLOCKWARNINGTYPE_NONE: 0,
  BLOCKWARNINGTYPE_INSUFFICIENTBLOCKERS: 1,
  BLOCKWARNINGTYPE_CANNOTBLOCKALONE: 2,
  BLOCKWARNINGTYPE_MUSTBEBLOCKED: 3,
  BLOCKWARNINGTYPE_MUSTBLOCK: 4,
  BLOCKWARNINGTYPE_MUSTBEBLOCKEDBYALL: 5
};

/**
 * @enum {number}
 */
proto.CardColor = {
  CARDCOLOR_COLORLESS: 0,
  CARDCOLOR_WHITE: 1,
  CARDCOLOR_BLUE: 2,
  CARDCOLOR_BLACK: 3,
  CARDCOLOR_RED: 4,
  CARDCOLOR_GREEN: 5,
  CARDCOLOR_LAND: 6,
  CARDCOLOR_ARTIFACT: 7
};

/**
 * @enum {number}
 */
proto.CardMechanicType = {
  CARDMECHANICTYPE_NONE: 0,
  CARDMECHANICTYPE_ADDABILITY: 2,
  CARDMECHANICTYPE_ADDATTACHMENT: 3,
  CARDMECHANICTYPE_DEALDAMAGE: 4,
  CARDMECHANICTYPE_DESTROYPERMANENT: 5,
  CARDMECHANICTYPE_DISCARD: 6,
  CARDMECHANICTYPE_DRAWCARD: 7,
  CARDMECHANICTYPE_LOSSOFGAME: 8,
  CARDMECHANICTYPE_SETCOLOR: 9,
  CARDMECHANICTYPE_MODIFYLIFE: 10,
  CARDMECHANICTYPE_MODIFYPOWER: 11,
  CARDMECHANICTYPE_MODIFYTOUGHNESS: 12,
  CARDMECHANICTYPE_PHASEORSTEPTRANSITION: 13,
  CARDMECHANICTYPE_PUTCOUNTERONOBJECT: 14,
  CARDMECHANICTYPE_CREATETOKEN: 15,
  CARDMECHANICTYPE_REMOVECOUNTERFROMOBJECT: 16,
  CARDMECHANICTYPE_RESOLVEABILITY: 17,
  CARDMECHANICTYPE_REVEAL: 18,
  CARDMECHANICTYPE_TAPPERMANENT: 19,
  CARDMECHANICTYPE_UNTAPPERMANENT: 21,
  CARDMECHANICTYPE_ZONETRANSFER: 22,
  CARDMECHANICTYPE_REGENERATEPERMANENT: 23,
  CARDMECHANICTYPE_SACRIFICEPERMANENT: 24,
  CARDMECHANICTYPE_SETCONTROLLER: 25,
  CARDMECHANICTYPE_DECLAREDATTACKER: 26,
  CARDMECHANICTYPE_DECLAREDBLOCKER: 27,
  CARDMECHANICTYPE_BECOMETARGET: 28,
  CARDMECHANICTYPE_ADDTOMANAPOOL: 29,
  CARDMECHANICTYPE_ENTERZONE: 30,
  CARDMECHANICTYPE_SHUFFLELIBRARY: 31,
  CARDMECHANICTYPE_COUNTEROBJECTONSTACK: 32,
  CARDMECHANICTYPE_EXILEGAMEOBJECT: 33,
  CARDMECHANICTYPE_DAMAGEDEALT: 34,
  CARDMECHANICTYPE_PHASEINPERMANENT: 35,
  CARDMECHANICTYPE_PHASEOUTPERMANENT: 36,
  CARDMECHANICTYPE_ATTACKERBLOCKED: 37,
  CARDMECHANICTYPE_ATTACKERSSUBMITTED: 38,
  CARDMECHANICTYPE_BLOCKERSDETERMINED: 39,
  CARDMECHANICTYPE_SETPOWER: 40,
  CARDMECHANICTYPE_SETTOUGHNESS: 41,
  CARDMECHANICTYPE_BEGINTURN: 42,
  CARDMECHANICTYPE_TURNFACEUP: 43,
  CARDMECHANICTYPE_TRANSFORM: 44,
  CARDMECHANICTYPE_DREDGE: 45,
  CARDMECHANICTYPE_EXPLORE: 46,
  CARDMECHANICTYPE_PROVOKE: 47
};

/**
 * @enum {number}
 */
proto.CardType = {
  CARDTYPE_NONE: 0,
  CARDTYPE_ARTIFACT: 1,
  CARDTYPE_CREATURE: 2,
  CARDTYPE_ENCHANTMENT: 3,
  CARDTYPE_INSTANT: 4,
  CARDTYPE_LAND: 5,
  CARDTYPE_PHENOMENON: 6,
  CARDTYPE_PLANE: 7,
  CARDTYPE_PLANESWALKER: 8,
  CARDTYPE_SCHEME: 9,
  CARDTYPE_SORCERY: 10,
  CARDTYPE_TRIBAL: 11,
  CARDTYPE_VANGUARD: 12
};

/**
 * @enum {number}
 */
proto.CastingTimeOptionType = {
  CASTINGTIMEOPTIONTYPE_NONE: 0,
  CASTINGTIMEOPTIONTYPE_DONE: 1,
  CASTINGTIMEOPTIONTYPE_CHOOSEX: 2,
  CASTINGTIMEOPTIONTYPE_KICKER: 3,
  CASTINGTIMEOPTIONTYPE_MULTIKICKER: 4,
  CASTINGTIMEOPTIONTYPE_ADDITIONALCOST: 5,
  CASTINGTIMEOPTIONTYPE_OPTIONALCOST: 6,
  CASTINGTIMEOPTIONTYPE_REPLICATE: 7,
  CASTINGTIMEOPTIONTYPE_CONSPIRE: 8,
  CASTINGTIMEOPTIONTYPE_MANATYPE: 9,
  CASTINGTIMEOPTIONTYPE_MODAL: 10,
  CASTINGTIMEOPTIONTYPE_CHOOSEORCOST: 11,
  CASTINGTIMEOPTIONTYPE_SELECTION: 12
};

/**
 * @enum {number}
 */
proto.ChoicePersistence = {
  CHOICEPERSISTENCE_NONE: 0,
  CHOICEPERSISTENCE_CHOOSEONCE: 1,
  CHOICEPERSISTENCE_CHOOSEALWAYS: 2
};

/**
 * @enum {number}
 */
proto.ClientMessageType = {
  CLIENTMESSAGETYPE_NONE: 0,
  CLIENTMESSAGETYPE_CONNECTREQ: 1,
  CLIENTMESSAGETYPE_CANCELACTIONREQ: 5,
  CLIENTMESSAGETYPE_CHOOSEMODALRESP: 6,
  CLIENTMESSAGETYPE_CONCEDEREQ: 7,
  CLIENTMESSAGETYPE_ENTERSIDEBOARDINGREQ: 8,
  CLIENTMESSAGETYPE_FORCEDRAWREQ: 9,
  CLIENTMESSAGETYPE_GETSETTINGSREQ: 11,
  CLIENTMESSAGETYPE_GROUPRESP: 12,
  CLIENTMESSAGETYPE_MULLIGANRESP: 13,
  CLIENTMESSAGETYPE_ORDERRESP: 14,
  CLIENTMESSAGETYPE_PERFORMACTIONRESP: 15,
  CLIENTMESSAGETYPE_CONTROLREQ: 17,
  CLIENTMESSAGETYPE_SELECTNRESP: 18,
  CLIENTMESSAGETYPE_SETSETTINGSREQ: 20,
  CLIENTMESSAGETYPE_UNDOREQ: 22,
  CLIENTMESSAGETYPE_CHOOSESTARTINGPLAYERRESP: 24,
  CLIENTMESSAGETYPE_OPTIONALACTIONRESP: 25,
  CLIENTMESSAGETYPE_ALLOWFORCEDRAWRESP: 26,
  CLIENTMESSAGETYPE_REVEALHANDRESP: 28,
  CLIENTMESSAGETYPE_DECLAREATTACKERSRESP: 30,
  CLIENTMESSAGETYPE_SUBMITATTACKERSREQ: 31,
  CLIENTMESSAGETYPE_DECLAREBLOCKERSRESP: 32,
  CLIENTMESSAGETYPE_SUBMITBLOCKERSREQ: 33,
  CLIENTMESSAGETYPE_ORDERCOMBATDAMAGERESP: 34,
  CLIENTMESSAGETYPE_ASSIGNDAMAGERESP: 35,
  CLIENTMESSAGETYPE_SELECTTARGETSRESP: 36,
  CLIENTMESSAGETYPE_SUBMITTARGETSREQ: 37,
  CLIENTMESSAGETYPE_DRAWCARDRESP: 38,
  CLIENTMESSAGETYPE_SELECTREPLACEMENTRESP: 39,
  CLIENTMESSAGETYPE_SELECTNGROUPRESP: 40,
  CLIENTMESSAGETYPE_ALTERNATIVECOSTRESP: 41,
  CLIENTMESSAGETYPE_DISTRIBUTIONRESP: 42,
  CLIENTMESSAGETYPE_NUMERICINPUTRESP: 43,
  CLIENTMESSAGETYPE_SEARCHRESP: 44,
  CLIENTMESSAGETYPE_ACTIONCOSTRESP: 45,
  CLIENTMESSAGETYPE_CASTINGTIMEOPTIONSRESP: 46,
  CLIENTMESSAGETYPE_SELECTMANATYPERESP: 47,
  CLIENTMESSAGETYPE_SELECTFROMGROUPSRESP: 48,
  CLIENTMESSAGETYPE_SEARCHFROMGROUPSRESP: 49,
  CLIENTMESSAGETYPE_GATHERRESP: 50,
  CLIENTMESSAGETYPE_SUBMITPAYMENTRESP: 51,
  CLIENTMESSAGETYPE_AUTORESP: 52,
  CLIENTMESSAGETYPE_UIMESSAGE: 53,
  CLIENTMESSAGETYPE_SUBMITDECKRESP: 54,
  CLIENTMESSAGETYPE_TAKETIMEOUTREQ: 55
};

/**
 * @enum {number}
 */
proto.ClientToMatchServiceMessageType = {
  CLIENTTOMATCHSERVICEMESSAGETYPE_NONE: 0,
  CLIENTTOMATCHSERVICEMESSAGETYPE_CLIENTTOMATCHDOORCONNECTREQUEST: 1,
  CLIENTTOMATCHSERVICEMESSAGETYPE_CLIENTTOGREMESSAGE: 2,
  CLIENTTOMATCHSERVICEMESSAGETYPE_CLIENTTOGREUIMESSAGE: 3,
  CLIENTTOMATCHSERVICEMESSAGETYPE_AUTHENTICATEREQUEST: 4,
  CLIENTTOMATCHSERVICEMESSAGETYPE_CREATEMATCHGAMEROOMREQUEST: 5,
  CLIENTTOMATCHSERVICEMESSAGETYPE_ECHOREQUEST: 8
};

/**
 * @enum {number}
 */
proto.ClientType = {
  CLIENTTYPE_INVALID: 0,
  CLIENTTYPE_USER: 1,
  CLIENTTYPE_SERVICE: 2,
  CLIENTTYPE_FAMILIAR: 3
};

/**
 * @enum {number}
 */
proto.CoinFace = {
  COINFACE_NONE: 0,
  COINFACE_HEADS: 1,
  COINFACE_TAILS: 2
};

/**
 * @enum {number}
 */
proto.Color = {
  COLOR_NONE: 0,
  COLOR_WHITE: 1,
  COLOR_BLUE: 2,
  COLOR_BLACK: 3,
  COLOR_RED: 4,
  COLOR_GREEN: 5
};

/**
 * @enum {number}
 */
proto.ConnectionState = {
  CONNECTIONSTATE_INVALID: 0,
  CONNECTIONSTATE_OPEN: 1,
  CONNECTIONSTATE_CLOSED: 2,
  CONNECTIONSTATE_CONNECTING: 3,
  CONNECTIONSTATE_CLOSING: 4
};

/**
 * @enum {number}
 */
proto.ConnectionStateChangedEventType = {
  CONNECTIONSTATECHANGEDEVENTTYPE_INVALID: 0,
  CONNECTIONSTATECHANGEDEVENTTYPE_CONNECTED: 1,
  CONNECTIONSTATECHANGEDEVENTTYPE_DISCONNECTED: 2
};

/**
 * @enum {number}
 */
proto.ConnectionStatus = {
  CONNECTIONSTATUS_NONE: 0,
  CONNECTIONSTATUS_SUCCESS: 1,
  CONNECTIONSTATUS_ALREADYCONNECTED: 2,
  CONNECTIONSTATUS_GAMEOVER: 3,
  CONNECTIONSTATUS_GRPVERSIONINCOMPAT: 4
};

/**
 * @enum {number}
 */
proto.ConstructedMatchType = {
  PRECON: 0,
  UNRANKED: 1,
  RANKED: 2
};

/**
 * @enum {number}
 */
proto.ControllerType = {
  CONTROLLERTYPE_NONE: 0,
  CONTROLLERTYPE_PLAYER: 1,
  CONTROLLERTYPE_AI: 2,
  CONTROLLERTYPE_AI_GOLDFISH: 3,
  CONTROLLERTYPE_AI_PETROCK: 4
};

/**
 * @enum {number}
 */
proto.CostCategory = {
  COSTCATEGORY_NONE: 0,
  COSTCATEGORY_EXECUTABLE: 1,
  COSTCATEGORY_PREDICTABLE: 2
};

/**
 * @enum {number}
 */
proto.CostType = {
  COSTTYPE_NONE: 0,
  COSTTYPE_MANA: 1,
  COSTTYPE_TAPSELF: 2,
  COSTTYPE_SACSELF: 3,
  COSTTYPE_ACTION: 4,
  COSTTYPE_LOYALTY: 5,
  COSTTYPE_DISCARDSELF: 6,
  COSTTYPE_LIFE: 7,
  COSTTYPE_EXILESELF: 8,
  COSTTYPE_UNTAPSELF: 9,
  COSTTYPE_OR: 10
};

/**
 * @enum {number}
 */
proto.CounterType = {
  COUNTERTYPE_NONE: 0,
  COUNTERTYPE_P1P1: 1,
  COUNTERTYPE_M1M1: 2,
  COUNTERTYPE_POISON: 3,
  COUNTERTYPE_WIND: 4,
  COUNTERTYPE_TIME: 5,
  COUNTERTYPE_FADE: 6,
  COUNTERTYPE_LOYALTY: 7,
  COUNTERTYPE_WISH: 8,
  COUNTERTYPE_AGE: 9,
  COUNTERTYPE_AIM: 10,
  COUNTERTYPE_ARROW: 11,
  COUNTERTYPE_ARROWHEAD: 12,
  COUNTERTYPE_AWAKENING: 13,
  COUNTERTYPE_BLAZE: 14,
  COUNTERTYPE_BLOOD: 15,
  COUNTERTYPE_BOUNTY: 16,
  COUNTERTYPE_BRIBERY: 17,
  COUNTERTYPE_CARRION: 18,
  COUNTERTYPE_CHARGE: 19,
  COUNTERTYPE_CONTROL: 20,
  COUNTERTYPE_CORPSE: 21,
  COUNTERTYPE_CREDIT: 22,
  COUNTERTYPE_CUBE: 23,
  COUNTERTYPE_CURRENCY: 24,
  COUNTERTYPE_DEATH: 25,
  COUNTERTYPE_DELAY: 26,
  COUNTERTYPE_DEPLETION: 27,
  COUNTERTYPE_DESPAIR: 28,
  COUNTERTYPE_DEVOTION: 29,
  COUNTERTYPE_DIVINITY: 30,
  COUNTERTYPE_DOOM: 31,
  COUNTERTYPE_DREAM: 32,
  COUNTERTYPE_ECHO: 33,
  COUNTERTYPE_ELIXIR: 34,
  COUNTERTYPE_ENERGY: 35,
  COUNTERTYPE_EON: 36,
  COUNTERTYPE_EYEBALL: 37,
  COUNTERTYPE_FATE: 38,
  COUNTERTYPE_FEATHER: 39,
  COUNTERTYPE_FILIBUSTER: 40,
  COUNTERTYPE_FLAME: 41,
  COUNTERTYPE_FLOOD: 42,
  COUNTERTYPE_FUNGUS: 43,
  COUNTERTYPE_FUSE: 44,
  COUNTERTYPE_GLYPH: 45,
  COUNTERTYPE_GOLD: 46,
  COUNTERTYPE_GROWTH: 47,
  COUNTERTYPE_HATCHLING: 48,
  COUNTERTYPE_HEALING: 49,
  COUNTERTYPE_HOOFPRINT: 50,
  COUNTERTYPE_HOURGLASS: 51,
  COUNTERTYPE_HUNGER: 52,
  COUNTERTYPE_ICE: 53,
  COUNTERTYPE_INFECTION: 54,
  COUNTERTYPE_INTERVENTION: 55,
  COUNTERTYPE_JAVELIN: 56,
  COUNTERTYPE_KI: 57,
  COUNTERTYPE_LEVEL: 58,
  COUNTERTYPE_LUCK: 59,
  COUNTERTYPE_MAGNET: 60,
  COUNTERTYPE_MANNEQUIN: 61,
  COUNTERTYPE_MATRIX: 62,
  COUNTERTYPE_MAY: 63,
  COUNTERTYPE_MINE: 64,
  COUNTERTYPE_MINING: 65,
  COUNTERTYPE_MIRE: 66,
  COUNTERTYPE_MUSTER: 67,
  COUNTERTYPE_NET: 68,
  COUNTERTYPE_OMEN: 69,
  COUNTERTYPE_ORE: 70,
  COUNTERTYPE_PAGE: 71,
  COUNTERTYPE_PAIN: 72,
  COUNTERTYPE_PARALYZATION: 73,
  COUNTERTYPE_PETAL: 74,
  COUNTERTYPE_PETRIFICATION: 75,
  COUNTERTYPE_PHYLACTERY: 76,
  COUNTERTYPE_PIN: 77,
  COUNTERTYPE_PLAGUE: 78,
  COUNTERTYPE_POLYP: 79,
  COUNTERTYPE_PRESSURE: 80,
  COUNTERTYPE_PUPA: 81,
  COUNTERTYPE_QUEST: 82,
  COUNTERTYPE_SCREAM: 83,
  COUNTERTYPE_SCROLL: 84,
  COUNTERTYPE_SHELL: 85,
  COUNTERTYPE_SHIELD: 86,
  COUNTERTYPE_SHRED: 87,
  COUNTERTYPE_SLEEP: 88,
  COUNTERTYPE_SLEIGHT: 89,
  COUNTERTYPE_SLIME: 90,
  COUNTERTYPE_SOOT: 91,
  COUNTERTYPE_SPELL: 92,
  COUNTERTYPE_SPORE: 93,
  COUNTERTYPE_STORAGE: 94,
  COUNTERTYPE_STRIFE: 95,
  COUNTERTYPE_STUDY: 96,
  COUNTERTYPE_THEFT: 97,
  COUNTERTYPE_TIDE: 98,
  COUNTERTYPE_TOWER: 100,
  COUNTERTYPE_TRAINING: 101,
  COUNTERTYPE_TRAP: 102,
  COUNTERTYPE_TREASURE: 103,
  COUNTERTYPE_VERSE: 104,
  COUNTERTYPE_VITALITY: 105,
  COUNTERTYPE_WAGE: 106,
  COUNTERTYPE_WINCH: 107,
  COUNTERTYPE_LORE: 108,
  COUNTERTYPE_P1P2: 109,
  COUNTERTYPE_P0P1: 110,
  COUNTERTYPE_P0P2: 111,
  COUNTERTYPE_P1P0: 112,
  COUNTERTYPE_P2P2: 113,
  COUNTERTYPE_M0M1: 114,
  COUNTERTYPE_M0M2: 115,
  COUNTERTYPE_M1M0: 116,
  COUNTERTYPE_M2M1: 117,
  COUNTERTYPE_M2M2: 118,
  COUNTERTYPE_MANIFESTATION: 119,
  COUNTERTYPE_GEM: 120,
  COUNTERTYPE_CRYSTAL: 121,
  COUNTERTYPE_ISOLATION: 122,
  COUNTERTYPE_HOUR: 123,
  COUNTERTYPE_UNITY: 124,
  COUNTERTYPE_VELOCITY: 125,
  COUNTERTYPE_BRICK: 126,
  COUNTERTYPE_LANDMARK: 127,
  COUNTERTYPE_PREY: 128,
  COUNTERTYPE_SILVER: 129,
  COUNTERTYPE_EGG: 130,
  COUNTERTYPE_HIT: 131,
  COUNTERTYPE_PLACEHOLDERCOUNTERTYPE1: 132,
  COUNTERTYPE_PLACEHOLDERCOUNTERTYPE2: 133,
  COUNTERTYPE_PLACEHOLDERCOUNTERTYPE3: 134,
  COUNTERTYPE_PLACEHOLDERCOUNTERTYPE4: 135,
  COUNTERTYPE_PLACEHOLDERCOUNTERTYPE5: 136
};

/**
 * @enum {number}
 */
proto.DamageRecType = {
  DAMAGERECTYPE_NONE: 0,
  DAMAGERECTYPE_TEAM: 1,
  DAMAGERECTYPE_PLAYER: 2,
  DAMAGERECTYPE_PLANESWALKER: 3
};

/**
 * @enum {number}
 */
proto.DamageType = {
  DAMAGETYPE_NONE: 0,
  DAMAGETYPE_COMBAT: 1,
  DAMAGETYPE_DIRECT: 2,
  DAMAGETYPE_FIGHT: 3
};

/**
 * @enum {number}
 */
proto.Designations = {
  DESIGNATION_COMMANDER: 0,
  DESIGNATION_MONARCH: 1,
  DESIGNATION_MONSTROUS: 2,
  DESIGNATION_PLANARCONTROLLER: 3,
  DESIGNATION_RENOWNED: 4,
  DESIGNATION_CITYSBLESSING: 5
};

/**
 * @enum {number}
 */
proto.DetermineOptionsState = {
  DETERMINEOPTIONSSTATE_NONE: 0,
  DETERMINEOPTIONSSTATE_MODAL: 1,
  DETERMINEOPTIONSSTATE_TARGETLIMITING: 2,
  DETERMINEOPTIONSSTATE_NONMANA: 3,
  DETERMINEOPTIONSSTATE_MANA: 4
};

/**
 * @enum {number}
 */
proto.DifficultyLevel = {
  DIFFICULTYLEVEL_NONE: 0,
  DIFFICULTYLEVEL_EASY: 1,
  DIFFICULTYLEVEL_MODERATE: 2,
  DIFFICULTYLEVEL_HARD: 3
};

/**
 * @enum {number}
 */
proto.DropMatchmakingResponseCode = {
  DROPUNKNOWNERROR: 0,
  DROPSUCCESS: 1,
  DROPERRORNOTJOINED: 2,
  DROPERROREVENTNOTFOUND: 3,
  DROPERRORCOURSENOTFOUND: 4,
  DROPSERVICEERROR: 5,
  DROPERRORUNAVAILABLE: 6
};

/**
 * @enum {number}
 */
proto.FailureReason = {
  FAILUREREASON_NONE: 0,
  FAILUREREASON_EXPIRED: 1,
  FAILUREREASON_OUTOFTURN: 2,
  FAILUREREASON_REQRESPMISMATCH: 3,
  FAILUREREASON_ACTIONNOTBATCHABLE: 4,
  FAILUREREASON_ACTIONINVALID: 5,
  FAILUREREASON_INCOMPLETEMESSAGE: 6,
  FAILUREREASON_ILLEGALOPTION: 7,
  FAILUREREASON_UNRECOGNIZEDVALUE: 8,
  FAILUREREASON_TARGETSUNAVAILABLE: 9,
  FAILUREREASON_TARGETINDEXOUTOFRANGE: 10,
  FAILUREREASON_TARGETILLEGAL: 11,
  FAILUREREASON_UNRECOGNIZEDMANAID: 12,
  FAILUREREASON_INVALIDOPTIONSELECTION: 13,
  FAILUREREASON_UNEXPECTEDMESSAGE: 14,
  FAILUREREASON_LIMITVIOLATION: 15,
  FAILUREREASON_RESTRICTIONVIOLATED: 16,
  FAILUREREASON_REQUIREMENTVIOLATED: 17,
  FAILUREREASON_UNPAYABLECOST: 18,
  FAILUREREASON_INVALIDSEATID: 19,
  FAILUREREASON_INVALIDTEAMID: 20,
  FAILUREREASON_INVALIDMATCHSTATE: 21,
  FAILUREREASON_INVALIDMATCHSCOPE: 22,
  FAILUREREASON_INVALIDDECK: 23,
  FAILUREREASON_INVALIDCANCELSTATE: 24,
  FAILUREREASON_INVALIDUNDOSTATE: 25,
  FAILUREREASON_PERMISSIONDENIED: 26,
  FAILUREREASON_NOTIMEOUT: 27,
  FAILUREREASON_INVALIDCOLOR: 28,
  FAILUREREASON_INVALIDMANACOLOR: 29,
  FAILUREREASON_INVALIDCOINFACE: 30,
  FAILUREREASON_INVALIDCARD: 31,
  FAILUREREASON_INVALIDCARDNAME: 32,
  FAILUREREASON_INVALIDCARDTYPE: 33,
  FAILUREREASON_INVALIDSUBTYPE: 34,
  FAILUREREASON_INVALIDSUPERTYPE: 35,
  FAILUREREASON_INVALIDCOUNTERTYPE: 36,
  FAILUREREASON_INVALIDABILITYTYPE: 37,
  FAILUREREASON_INVALIDBASICLANDTYPE: 38,
  FAILUREREASON_INVALIDOPTIONINDEX: 39,
  FAILUREREASON_INVALIDOPTIONCONTEXT: 40
};

/**
 * @enum {number}
 */
proto.GREMessageType = {
  GREMESSAGETYPE_NONE: 0,
  GREMESSAGETYPE_GAMESTATEMESSAGE: 1,
  GREMESSAGETYPE_ACTIONSAVAILABLEREQ: 2,
  GREMESSAGETYPE_CHOOSESTARTINGPLAYERREQ: 6,
  GREMESSAGETYPE_CONNECTRESP: 7,
  GREMESSAGETYPE_GETSETTINGSRESP: 9,
  GREMESSAGETYPE_SETSETTINGSRESP: 10,
  GREMESSAGETYPE_GROUPREQ: 11,
  GREMESSAGETYPE_ILLEGALREQUEST: 12,
  GREMESSAGETYPE_MODALREQ: 14,
  GREMESSAGETYPE_MULLIGANREQ: 15,
  GREMESSAGETYPE_OPTIONREQ: 16,
  GREMESSAGETYPE_ORDERREQ: 17,
  GREMESSAGETYPE_PROMPTREQ: 18,
  GREMESSAGETYPE_REVEALHANDREQ: 21,
  GREMESSAGETYPE_SELECTNREQ: 22,
  GREMESSAGETYPE_ALLOWFORCEDRAW: 24,
  GREMESSAGETYPE_BINARYGAMESTATE: 25,
  GREMESSAGETYPE_DECLAREATTACKERSREQ: 26,
  GREMESSAGETYPE_SUBMITATTACKERSRESP: 27,
  GREMESSAGETYPE_DECLAREBLOCKERSREQ: 28,
  GREMESSAGETYPE_SUBMITBLOCKERSRESP: 29,
  GREMESSAGETYPE_ASSIGNDAMAGEREQ: 30,
  GREMESSAGETYPE_ASSIGNDAMAGECONFIRMATION: 31,
  GREMESSAGETYPE_ORDERCOMBATDAMAGEREQ: 32,
  GREMESSAGETYPE_ORDERDAMAGECONFIRMATION: 33,
  GREMESSAGETYPE_SELECTTARGETSREQ: 34,
  GREMESSAGETYPE_SUBMITTARGETSRESP: 35,
  GREMESSAGETYPE_PAYCOSTSREQ: 36,
  GREMESSAGETYPE_INTERMISSIONREQ: 37,
  GREMESSAGETYPE_DIEROLLRESULTSRESP: 38,
  GREMESSAGETYPE_SELECTREPLACEMENTREQ: 39,
  GREMESSAGETYPE_SELECTNGROUPREQ: 40,
  GREMESSAGETYPE_ALTERNATIVECOSTREQ: 41,
  GREMESSAGETYPE_DISTRIBUTIONREQ: 42,
  GREMESSAGETYPE_NUMERICINPUTREQ: 43,
  GREMESSAGETYPE_SEARCHREQ: 44,
  GREMESSAGETYPE_OPTIONALACTIONMESSAGE: 45,
  GREMESSAGETYPE_CASTINGTIMEOPTIONSREQ: 46,
  GREMESSAGETYPE_SELECTMANATYPEREQ: 47,
  GREMESSAGETYPE_SELECTFROMGROUPSREQ: 48,
  GREMESSAGETYPE_SEARCHFROMGROUPSREQ: 49,
  GREMESSAGETYPE_GATHERREQ: 50,
  GREMESSAGETYPE_QUEUEDGAMESTATEMESSAGE: 51,
  GREMESSAGETYPE_UIMESSAGE: 52,
  GREMESSAGETYPE_SUBMITDECKREQ: 53,
  GREMESSAGETYPE_EDICTALMESSAGE: 54,
  GREMESSAGETYPE_TIMEOUTMESSAGE: 55
};

/**
 * @enum {number}
 */
proto.GRETHHostEmulatorErrorCodes = {
  GRETHHOSTEMULATORERRORCODE_SUCCESS: 0,
  GRETHHOSTEMULATORERRORCODE_TIMEOUT: 1,
  GRETHHOSTEMULATORERRORCODE_UNKNOWNID: 2,
  GRETHHOSTEMULATORERRORCODE_IDINUSE: 3
};

/**
 * @enum {number}
 */
proto.GRETHHostErrorCode = {
  GRETHHOSTERRORCODE_SUCCESS: 0,
  GRETHHOSTERRORCODE_NULLPAYLOAD: 1,
  GRETHHOSTERRORCODE_PARSEFAILED: 2,
  GRETHHOSTERRORCODE_INCOMPLETEPAYLOAD: 3,
  GRETHHOSTERRORCODE_GRECREATEFAILED: 4,
  GRETHHOSTERRORCODE_GREDESTROYFAILED: 5,
  GRETHHOSTERRORCODE_AICREATEFAILED: 6,
  GRETHHOSTERRORCODE_AIDESTROYFAILED: 7,
  GRETHHOSTERRORCODE_UNRECOGNIZEDGREID: 8,
  GRETHHOSTERRORCODE_INVALIDPOINTER: 9,
  GRETHHOSTERRORCODE_UNKNOWNERROR: 10
};

/**
 * @enum {number}
 */
proto.GRETHHostOperationMode = {
  GRETHHOSTOPERATIONMODE_NORMAL: 0,
  GRETHHOSTOPERATIONMODE_LOOPBACK: 1
};

/**
 * @enum {number}
 */
proto.GameFormat = {
  GAMEFORMAT_NONE: 0,
  GAMEFORMAT_BLOCK: 1,
  GAMEFORMAT_STANDARD: 2,
  GAMEFORMAT_MODERN: 3,
  GAMEFORMAT_LEGACY: 4,
  GAMEFORMAT_VINTAGE: 5,
  GAMEFORMAT_DRAFT: 7,
  GAMEFORMAT_SEALED: 8
};

/**
 * @enum {number}
 */
proto.GameObjectType = {
  GAMEOBJECTTYPE_NONE: 0,
  GAMEOBJECTTYPE_CARD: 1,
  GAMEOBJECTTYPE_TOKEN: 2,
  GAMEOBJECTTYPE_ABILITY: 3,
  GAMEOBJECTTYPE_EMBLEM: 4,
  GAMEOBJECTTYPE_SPLITCARD: 5,
  GAMEOBJECTTYPE_SPLITLEFT: 6,
  GAMEOBJECTTYPE_SPLITRIGHT: 7,
  GAMEOBJECTTYPE_REVEALEDCARD: 8
};

/**
 * @enum {number}
 */
proto.GameRoomType = {
  GAMEROOMTYPE_INVALID: 0,
  GAMEROOMTYPE_MATCH: 1,
  GAMEROOMTYPE_DRAFT: 2
};

/**
 * @enum {number}
 */
proto.GameStage = {
  GAMESTAGE_NONE: 0,
  GAMESTAGE_START: 1,
  GAMESTAGE_PLAY: 2,
  GAMESTAGE_GAMEOVER: 3
};

/**
 * @enum {number}
 */
proto.GameStateType = {
  GAMESTATETYPE_NONE: 0,
  GAMESTATETYPE_FULL: 1,
  GAMESTATETYPE_DIFF: 2,
  GAMESTATETYPE_BINARY: 3
};

/**
 * @enum {number}
 */
proto.GameStateUpdate = {
  GAMESTATEUPDATE_NONE: 0,
  GAMESTATEUPDATE_SEND: 1,
  GAMESTATEUPDATE_SENDANDRECORD: 2,
  GAMESTATEUPDATE_SENDHIFI: 3,
  GAMESTATEUPDATE_UNDO: 4,
  GAMESTATEUPDATE_RESTORE: 5
};

/**
 * @enum {number}
 */
proto.GameType = {
  GAMETYPE_NONE: 0,
  GAMETYPE_DUEL: 1,
  GAMETYPE_MULTIPLAYER: 2,
  GAMETYPE_SOLITAIRE: 3
};

/**
 * @enum {number}
 */
proto.GameVariant = {
  GAMEVARIANT_NONE: 0,
  GAMEVARIANT_NORMAL: 1,
  GAMEVARIANT_PLANECHASE: 2,
  GAMEVARIANT_VANGUARD: 3,
  GAMEVARIANT_COMMANDER: 4,
  GAMEVARIANT_ARCHENEMY: 5,
  GAMEVARIANT_TEAMVSTEAM: 6,
  GAMEVARIANT_TWOHEADEDGIANT: 7
};

/**
 * @enum {number}
 */
proto.GroupType = {
  GROUPTYPE_NONE: 0,
  GROUPTYPE_ORDERED: 1,
  GROUPTYPE_ARBITRARY: 2
};

/**
 * @enum {number}
 */
proto.Grouping = {
  GROUPING_NONE: 0,
  GROUPING_SINGLE: 1,
  GROUPING_BATCHABLE: 2
};

/**
 * @enum {number}
 */
proto.GroupingContext = {
  GROUPINGCONTEXT_NONE: 0,
  GROUPINGCONTEXT_SCRY: 1,
  GROUPINGCONTEXT_SURVEIL: 2
};

/**
 * @enum {number}
 */
proto.GroupingStyle = {
  GROUPINGSTYLE_NONE: 0,
  GROUPINGSTYLE_SINGLEGROUP: 1,
  GROUPINGSTYLE_ALLGROUPS: 2,
  GROUPINGSTYLE_MIXED: 3
};

/**
 * @enum {number}
 */
proto.HeuristicPriority = {
  HEURISTICPRIORITY_NONE: 0,
  HEURISTICPRIORITY_TARGETCREATURE: 10,
  HEURISTICPRIORITY_TARGETPLANESWALKER: 11,
  HEURISTICPRIORITY_TARGETPLAYER: 12,
  HEURISTICPRIORITY_OBJECTSCORE: 13
};

/**
 * @enum {number}
 */
proto.HighlightType = {
  HIGHLIGHTTYPE_NONE: 0,
  HIGHLIGHTTYPE_COLD: 1,
  HIGHLIGHTTYPE_TEPID: 2,
  HIGHLIGHTTYPE_HOT: 3
};

/**
 * @enum {number}
 */
proto.IRFormat = {
  IRFORMAT_NONE: 0,
  IRFORMAT_SUPERTYPES: 1,
  IRFORMAT_SIDEBOARDCARDS: 2
};

/**
 * @enum {number}
 */
proto.IdType = {
  IDTYPE_NONE: 0,
  IDTYPE_INSTANCEID: 1,
  IDTYPE_PROMPTPARAMETERINDEX: 2
};

/**
 * @enum {number}
 */
proto.JoinMatchmakingResponseCode = {
  JOINUNKNOWNERROR: 0,
  JOINSUCCESS: 1,
  JOINERRORALREADYJOINED: 2,
  JOINERROREVENTNOTFOUND: 3,
  JOINERRORCOURSENOTFOUND: 4,
  JOINSERVICEERROR: 5,
  JOINERRORUNAVAILABLE: 6,
  JOINERRORNOVALIDDECK: 7,
  JOINERRORCOURSENOTACTIVE: 8
};

/**
 * @enum {number}
 */
proto.KeyValuePairValueType = {
  KEYVALUEPAIRVALUETYPE_NONE: 0,
  KEYVALUEPAIRVALUETYPE_UINT32: 1,
  KEYVALUEPAIRVALUETYPE_INT32: 2,
  KEYVALUEPAIRVALUETYPE_UINT64: 3,
  KEYVALUEPAIRVALUETYPE_INT64: 4,
  KEYVALUEPAIRVALUETYPE_BOOL: 5,
  KEYVALUEPAIRVALUETYPE_STRING: 6,
  KEYVALUEPAIRVALUETYPE_FLOAT: 7,
  KEYVALUEPAIRVALUETYPE_DOUBLE: 8
};

/**
 * @enum {number}
 */
proto.LinkType = {
  LINKTYPE_NONE: 0,
  LINKTYPE_EXILE: 1,
  LINKTYPE_SACRIFICE: 2,
  LINKTYPE_CHOOSE: 3,
  LINKTYPE_HAUNT: 4,
  LINKTYPE_REVEAL: 5,
  LINKTYPE_KICKER: 6,
  LINKTYPE_TARGET: 7
};

/**
 * @enum {number}
 */
proto.LinkedFace = {
  LINKEDFACE_NONE: 0,
  LINKEDFACE_DFC_FRONT: 1,
  LINKEDFACE_DFC_BACK: 2,
  LINKEDFACE_MELDCARD: 3,
  LINKEDFACE_MELDEDPERMANENT: 4,
  LINKEDFACE_SPLITCARD: 5,
  LINKEDFACE_SPLITHALF: 6
};

/**
 * @enum {number}
 */
proto.LobbyErrorCode = {
  LOBBYERRORCODE_INVALID: 0,
  LOBBYERRORCODE_SUCCESS: 1,
  LOBBYERRORCODE_PROTOBUFPARSEERROR: 11,
  LOBBYERRORCODE_INVALIDMESSAGETYPE: 12,
  LOBBYERRORCODE_INVALIDMESSAGEFIELD: 13,
  LOBBYERRORCODE_BUFFEROVERFLOW: 14,
  LOBBYERRORCODE_UNAUTHORIZED: 20,
  LOBBYERRORCODE_FORBIDDEN: 21,
  LOBBYERRORCODE_OPERATIONCANCELED: 30,
  LOBBYERRORCODE_REQUESTTIMEOUT: 31,
  LOBBYERRORCODE_INVALIDOPERATION: 32,
  LOBBYERRORCODE_NOTFOUND: 40,
  LOBBYERRORCODE_USERNOTFOUND: 41,
  LOBBYERRORCODE_QUEUENOTFOUND: 42,
  LOBBYERRORCODE_DECKNOTFOUND: 43,
  LOBBYERRORCODE_EVENTNOTFOUND: 44,
  LOBBYERRORCODE_ALREADYINQUEUE: 50,
  LOBBYERRORCODE_ALREADYINMATCH: 51,
  LOBBYERRORCODE_DRAFTSTARTERROR: 60,
  LOBBYERRORCODE_INTERNALSERVERERROR: 500,
  LOBBYERRORCODE_NOTIMPLEMENTED: 501,
  LOBBYERRORCODE_SERVICEUNAVAILABLE: 503
};

/**
 * @enum {number}
 */
proto.LobbyUserStateType = {
  LOBBYUSERSTATETYPE_INVALID: 0,
  LOBBYUSERSTATETYPE_IDLE: 1,
  LOBBYUSERSTATETYPE_JOININGQUEUE: 2,
  LOBBYUSERSTATETYPE_JOINEDQUEUE: 3,
  LOBBYUSERSTATETYPE_DROPPINGQUEUE: 4,
  LOBBYUSERSTATETYPE_MATCHMADE: 10,
  LOBBYUSERSTATETYPE_INDRAFT: 15,
  LOBBYUSERSTATETYPE_CREATINGMATCH: 20,
  LOBBYUSERSTATETYPE_PLAYINGMATCH: 21
};

/**
 * @enum {number}
 */
proto.ManaColor = {
  MANACOLOR_NONE: 0,
  MANACOLOR_WHITE: 1,
  MANACOLOR_BLUE: 2,
  MANACOLOR_BLACK: 3,
  MANACOLOR_RED: 4,
  MANACOLOR_GREEN: 5,
  MANACOLOR_PHYREXIAN: 6,
  MANACOLOR_GENERIC: 7,
  MANACOLOR_X: 8,
  MANACOLOR_Y: 9,
  MANACOLOR_TWOGENERIC: 10,
  MANACOLOR_ANYCOLOR: 11,
  MANACOLOR_COLORLESS: 12
};

/**
 * @enum {number}
 */
proto.ManaPaymentStrategyType = {
  MANAPAYMENTSTRATEGYTYPE_NONE: 0,
  MANAPAYMENTSTRATEGYTYPE_AUTO: 1,
  MANAPAYMENTSTRATEGYTYPE_MANUAL: 2,
  MANAPAYMENTSTRATEGYTYPE_LEGACY: 3
};

/**
 * @enum {number}
 */
proto.ManaSelectionType = {
  MANASELECTIONTYPE_NONE: 0,
  MANASELECTIONTYPE_AUTO: 1,
  MANASELECTIONTYPE_MANUAL: 2
};

/**
 * @enum {number}
 */
proto.ManaSpecType = {
  MANASPECTYPE_NONE: 0,
  MANASPECTYPE_FROMBASIC: 1,
  MANASPECTYPE_PREDICTIVE: 2,
  MANASPECTYPE_RESTRICTED: 3,
  MANASPECTYPE_TRIGGER: 4,
  MANASPECTYPE_FROMCREATURE: 5,
  MANASPECTYPE_FROMSNOW: 6,
  MANASPECTYPE_DOESNOTEMPTY: 7,
  MANASPECTYPE_ADDITIONALEFFECT: 8
};

/**
 * @enum {number}
 */
proto.MatchCompletedReasonType = {
  MATCHCOMPLETEDREASONTYPE_INVALID: 0,
  MATCHCOMPLETEDREASONTYPE_SUCCESS: 1,
  MATCHCOMPLETEDREASONTYPE_FORCERESULTREQUEST: 2,
  MATCHCOMPLETEDREASONTYPE_CANCELED: 3,
  MATCHCOMPLETEDREASONTYPE_PLAYERJOINTIMEOUT: 10,
  MATCHCOMPLETEDREASONTYPE_PLAYERINACTIVITYTIMEOUT: 11,
  MATCHCOMPLETEDREASONTYPE_PLAYERDISCONNECTTIMEOUT: 12,
  MATCHCOMPLETEDREASONTYPE_SYSTEMSHUTDOWN: 30,
  MATCHCOMPLETEDREASONTYPE_GREERROR: 31,
  MATCHCOMPLETEDREASONTYPE_SERVICEFABRICERROR: 33,
  MATCHCOMPLETEDREASONTYPE_CODECONTRACTERROR: 34,
  MATCHCOMPLETEDREASONTYPE_UNKNOWNSERVERERROR: 40
};

/**
 * @enum {number}
 */
proto.MatchControllerEventType = {
  MATCHCONTROLLEREVENTTYPE_INVALID: 0,
  MATCHCONTROLLEREVENTTYPE_MATCHGAMEROOMSTATECHANGED: 1,
  MATCHCONTROLLEREVENTTYPE_MATCHCONTROLLERSTATECHANGED: 2,
  MATCHCONTROLLEREVENTTYPE_MATCHCONTROLLERHEALTHREPORT: 3
};

/**
 * @enum {number}
 */
proto.MatchControllerState = {
  MATCHCONTROLLERSTATE_INVALID: 0,
  MATCHCONTROLLERSTATE_OPENING: 1,
  MATCHCONTROLLERSTATE_RUNNING: 2,
  MATCHCONTROLLERSTATE_RECOVERING: 3,
  MATCHCONTROLLERSTATE_DRAINING: 4,
  MATCHCONTROLLERSTATE_CLOSING: 20,
  MATCHCONTROLLERSTATE_CLOSED: 21
};

/**
 * @enum {number}
 */
proto.MatchGameRoomStateType = {
  MATCHGAMEROOMSTATETYPE_INVALID: 0,
  MATCHGAMEROOMSTATETYPE_WAITINGFORPLAYERSTOJOIN: 1,
  MATCHGAMEROOMSTATETYPE_STARTPENDING: 2,
  MATCHGAMEROOMSTATETYPE_WAITINGFORGRECONNECTIONS: 3,
  MATCHGAMEROOMSTATETYPE_PLAYING: 5,
  MATCHGAMEROOMSTATETYPE_MATCHCOMPLETED: 15,
  MATCHGAMEROOMSTATETYPE_MATCHRESULTSPROCESSED: 20,
  MATCHGAMEROOMSTATETYPE_GAMEROOMCLOSING: 21,
  MATCHGAMEROOMSTATETYPE_GAMEROOMCLOSED: 22
};

/**
 * @enum {number}
 */
proto.MatchScope = {
  MATCHSCOPE_NONE: 0,
  MATCHSCOPE_GAME: 1,
  MATCHSCOPE_MATCH: 2
};

/**
 * @enum {number}
 */
proto.MatchServiceErrorCode = {
  MATCHSERVICEERRORCODE_INVALID: 0,
  MATCHSERVICEERRORCODE_SUCCESS: 1,
  MATCHSERVICEERRORCODE_GREERROR: 100,
  MATCHSERVICEERRORCODE_OPERATIONCANCELED: 101,
  MATCHSERVICEERRORCODE_INVALIDUSER: 102,
  MATCHSERVICEERRORCODE_INVALIDSTATE: 103,
  MATCHSERVICEERRORCODE_CREATEROOMFAILED: 104,
  MATCHSERVICEERRORCODE_AUTHREQUIRED: 105,
  MATCHSERVICEERRORCODE_NOTFOUND: 106,
  MATCHSERVICEERRORCODE_SERVICEFABRICTRANSACTIONERROR: 107,
  MATCHSERVICEERRORCODE_BADREQUEST: 108,
  MATCHSERVICEERRORCODE_GAMEROOMFULL: 110,
  MATCHSERVICEERRORCODE_NOTAUTHORIZED: 111,
  MATCHSERVICEERRORCODE_BUFFEROVERFLOW: 112,
  MATCHSERVICEERRORCODE_IMMUTABLEPROPERTY: 113,
  MATCHSERVICEERRORCODE_SERVERBUSY: 114,
  MATCHSERVICEERRORCODE_REQUESTQUEUEOVERFLOW: 115,
  MATCHSERVICEERRORCODE_UNKNOWNSERVERERROR: 500
};

/**
 * @enum {number}
 */
proto.MatchState = {
  MATCHSTATE_NONE: 0,
  MATCHSTATE_GAMEINPROGRESS: 1,
  MATCHSTATE_GAMECOMPLETE: 2,
  MATCHSTATE_MATCHCOMPLETE: 3,
  MATCHSTATE_SIDEBOARDING: 4
};

/**
 * @enum {number}
 */
proto.MatchWinCondition = {
  MATCHWINCONDITION_NONE: 0,
  MATCHWINCONDITION_SINGLEELIMINATION: 1,
  MATCHWINCONDITION_BEST2OF3: 2,
  MATCHWINCONDITION_BEST3OF5: 3
};

/**
 * @enum {number}
 */
proto.MayCast = {
  MAYCAST_INSTANTSONLY: 0,
  MAYCAST_ANYSPELL: 1
};

/**
 * @enum {number}
 */
proto.MayPlay = {
  MAYPLAY_SPELLS: 0,
  MAYPLAY_SPELLSANDLANDS: 1
};

/**
 * @enum {number}
 */
proto.MechanicType = {
  MECHANICTYPE_NONE: 0,
  MECHANICTYPE_COMBATENHANCINGSORCERY: 1,
  MECHANICTYPE_COMBATENHANCINGINSTANT: 2,
  MECHANICTYPE_HASTE: 3,
  MECHANICTYPE_FLASH: 4,
  MECHANICTYPE_REPLACEOPPONENTBEGINNINGPHASE: 5,
  MECHANICTYPE_REPLACEAIBEGINNINGPHASE: 6,
  MECHANICTYPE_DIRECTDAMAGEPLAYER: 7,
  MECHANICTYPE_EVASION: 9,
  MECHANICTYPE_MUSTATTACK: 10,
  MECHANICTYPE_MUSTBLOCK: 11,
  MECHANICTYPE_COMBATENHANCINGABILITY: 12,
  MECHANICTYPE_MAIN2CREATURE: 13,
  MECHANICTYPE_DIRECTDAMAGECREATURE_SORCERY: 14,
  MECHANICTYPE_DIRECTDAMAGECREATURE_INSTANT: 15
};

/**
 * @enum {number}
 */
proto.MessageIdType = {
  MESSAGEIDTYPE_NONE: 0,
  MESSAGEIDTYPE_PROMPT: 1,
  MESSAGEIDTYPE_CHOICE: 2,
  MESSAGEIDTYPE_LOCALIZATIONID: 3
};

/**
 * @enum {number}
 */
proto.MiscellaneousTerm = {
  MISCELLANEOUSTERM_NONE: 0,
  MISCELLANEOUSTERM_SCRY: 1,
  MISCELLANEOUSTERM_HISTORIC: 2,
  MISCELLANEOUSTERM_SURVEIL: 3
};

/**
 * @enum {number}
 */
proto.MulliganOption = {
  MULLIGANOPTION_NONE: 0,
  MULLIGANOPTION_MULLIGAN: 1,
  MULLIGANOPTION_ACCEPTHAND: 2
};

/**
 * @enum {number}
 */
proto.MulliganType = {
  MULLIGANTYPE_NONE: 0,
  MULLIGANTYPE_PARIS: 1,
  MULLIGANTYPE_VANCOUVER: 2
};

/**
 * @enum {number}
 */
proto.OptionContext = {
  OPTIONCONTEXT_NONE: 0,
  OPTIONCONTEXT_MANAABILITY: 1,
  OPTIONCONTEXT_PAYMENT: 2,
  OPTIONCONTEXT_STACKING: 3,
  OPTIONCONTEXT_TARGETING: 4,
  OPTIONCONTEXT_RESOLUTION: 5,
  OPTIONCONTEXT_TURNBASED: 6,
  OPTIONCONTEXT_REPLACEMENT: 7,
  OPTIONCONTEXT_ACTIVATECAST: 8,
  OPTIONCONTEXT_TURNFACEUP: 9
};

/**
 * @enum {number}
 */
proto.OptionResponse = {
  OPTIONRESPONSE_NONE: 0,
  OPTIONRESPONSE_ALLOW_YES: 1,
  OPTIONRESPONSE_CANCEL_NO: 2
};

/**
 * @enum {number}
 */
proto.OptionType = {
  OPTIONTYPE_NONE: 0,
  OPTIONTYPE_MODAL: 1,
  OPTIONTYPE_SPLICE: 2,
  OPTIONTYPE_ALTERNATIVECOST: 3,
  OPTIONTYPE_NUMERIC: 4,
  OPTIONTYPE_VARIABLECOST: 5,
  OPTIONTYPE_MANATYPE: 6,
  OPTIONTYPE_ORDER: 7,
  OPTIONTYPE_SEARCH: 8,
  OPTIONTYPE_GROUP: 9,
  OPTIONTYPE_SELECT: 10,
  OPTIONTYPE_SELECTGROUP: 11,
  OPTIONTYPE_DISTRIBUTION: 12,
  OPTIONTYPE_OPTIONALACTION: 13,
  OPTIONTYPE_ACTIONSAVAILABLE: 14,
  OPTIONTYPE_SELECTFROMGROUPS: 15,
  OPTIONTYPE_SEARCHFROMGROUPS: 16,
  OPTIONTYPE_GATHERING: 17
};

/**
 * @enum {number}
 */
proto.OrderCombatDamageType = {
  ORDERCOMBATDAMAGETYPE_NONE: 0,
  ORDERCOMBATDAMAGETYPE_ATTACKER: 1,
  ORDERCOMBATDAMAGETYPE_BLOCKER: 2
};

/**
 * @enum {number}
 */
proto.OrderingContext = {
  ORDERINGCONTEXT_NONE: 0,
  ORDERINGCONTEXT_ORDERINGFORBOTTOM: 1,
  ORDERINGCONTEXT_ORDERINGFORTOP: 2
};

/**
 * @enum {number}
 */
proto.OrderingFunctionType = {
  ORDERINGFUNCTIONTYPE_NONE: 0,
  ORDERINGFUNCTIONTYPE_CONSTANTVALUE: 1,
  ORDERINGFUNCTIONTYPE_OBJECTSCORE: 2,
  ORDERINGFUNCTIONTYPE_CHECKCARDMECHANIC: 3,
  ORDERINGFUNCTIONTYPE_CHECKBLOCKERS: 4,
  ORDERINGFUNCTIONTYPE_CHECKATTACKERS: 5,
  ORDERINGFUNCTIONTYPE_CHECKCARDMECHANICIFNOATTACKERS: 6,
  ORDERINGFUNCTIONTYPE_CHECKABILITYMECHANIC: 7,
  ORDERINGFUNCTIONTYPE_CHECKABILITYMECHANICIFNOATTACKERS: 8,
  ORDERINGFUNCTIONTYPE_CHECKPREDEFINEDCARDMECHANICS: 9,
  ORDERINGFUNCTIONTYPE_CHECKPREDEFINEDABILITYMECHANICS: 10,
  ORDERINGFUNCTIONTYPE_CHECKPREDEFINEDCARDMECHANICSIFNOATTACKERS: 11,
  ORDERINGFUNCTIONTYPE_CHECKPREDEFINEDABILITYMECHANICSIFNOATTACKERS: 12,
  ORDERINGFUNCTIONTYPE_MULLIGAN: 13,
  ORDERINGFUNCTIONTYPE_PLAYLAND: 14,
  ORDERINGFUNCTIONTYPE_CHECKHASABILITY: 15,
  ORDERINGFUNCTIONTYPE_MANASELECT: 16
};

/**
 * @enum {number}
 */
proto.OrderingParameterId = {
  ORDERINGPARAMETERID_NONE: 0,
  ORDERINGPARAMETERID_BESTSINGLEBLOCK: 1,
  ORDERINGPARAMETERID_GOODSINGLEBLOCK: 2,
  ORDERINGPARAMETERID_GOODSINGLETRADE: 3,
  ORDERINGPARAMETERID_GOODMULTITRADE: 4,
  ORDERINGPARAMETERID_CHUMPBLOCK: 5,
  ORDERINGPARAMETERID_PLAYERDEATH: 6,
  ORDERINGPARAMETERID_MUSTBLOCK: 7,
  ORDERINGPARAMETERID_ATTACKWITHEVASION: 9,
  ORDERINGPARAMETERID_MUSTATTACK: 10,
  ORDERINGPARAMETERID_FAVORABLETRADE: 11,
  ORDERINGPARAMETERID_UNFAVORABLETRADE: 12,
  ORDERINGPARAMETERID_OPPONENTDAMAGE: 13
};

/**
 * @enum {number}
 */
proto.OrderingType = {
  ORDERINGTYPE_NONE: 0,
  ORDERINGTYPE_ORDERASINDICATED: 1,
  ORDERINGTYPE_ORDERARBITRARYONCE: 2,
  ORDERINGTYPE_ORDERARBITRARYALWAYS: 3,
  ORDERINGTYPE_PROMPTALWAYS: 4
};

/**
 * @enum {number}
 */
proto.ParameterType = {
  PARAMETERTYPE_NONE: 0,
  PARAMETERTYPE_NONLOCALIZEDSTRING: 1,
  PARAMETERTYPE_NUMBER: 2,
  PARAMETERTYPE_REFERENCE: 3,
  PARAMETERTYPE_REPEATEDNUMBER: 4,
  PARAMETERTYPE_PROMPTID: 5,
  PARAMETERTYPE_PRIORITY: 6
};

/**
 * @enum {number}
 */
proto.PerformActionFor = {
  PERFORMACTIONFOR_ATTACKERS: 0,
  PERFORMACTIONFOR_BLOCKERS: 1
};

/**
 * @enum {number}
 */
proto.Phase = {
  PHASE_NONE: 0,
  PHASE_BEGINNING: 1,
  PHASE_MAIN1: 2,
  PHASE_COMBAT: 3,
  PHASE_MAIN2: 4,
  PHASE_ENDING: 5
};

/**
 * @enum {number}
 */
proto.PlayerIs = {
  PLAYERIS_NONE: 0,
  PLAYERIS_DONTCARE: 1,
  PLAYERIS_AI: 2,
  PLAYERIS_OPPONENT: 3
};

/**
 * @enum {number}
 */
proto.PlayerOrTeam = {
  PLAYERORTEAM_PLAYER: 0,
  PLAYERORTEAM_TEAM: 1
};

/**
 * @enum {number}
 */
proto.PresenceState = {
  PRESENCESTATE_INVALID: 0,
  PRESENCESTATE_OFFLINE: 1,
  PRESENCESTATE_ONLINE: 2
};

/**
 * @enum {number}
 */
proto.PromptMessage = {
  PROMPTMESSAGE_NONE: 0,
  PROMPTMESSAGE_GAMESTATEMESSAGE: 1,
  PROMPTMESSAGE_ACTIONSAVAILABLEREQ: 2,
  PROMPTMESSAGE_ILLEGALREQUEST: 3,
  PROMPTMESSAGE_MATCHSTATE: 4,
  PROMPTMESSAGE_OPTIONREQ: 5,
  PROMPTMESSAGE_DECLAREATTACKERSREQ: 6,
  PROMPTMESSAGE_DECLAREBLOCKERSREQ: 7,
  PROMPTMESSAGE_ASSIGNDAMAGEREQ: 8,
  PROMPTMESSAGE_ORDERCOMBATDAMAGEREQ: 9,
  PROMPTMESSAGE_SELECTTARGETSREQ: 10,
  PROMPTMESSAGE_PAYCOSTREQ: 11,
  PROMPTMESSAGE_INVALIDSELECTION: 12,
  PROMPTMESSAGE_INVALIDORDERING: 13,
  PROMPTMESSAGE_DISCARD: 14,
  PROMPTMESSAGE_WAITINGFORACTIONSAVAILABLEREQ: 15,
  PROMPTMESSAGE_WAITINGFORDECLAREATTACKERSREQ: 16,
  PROMPTMESSAGE_WAITINGFORDECLAREBLOCKERSREQ: 17,
  PROMPTMESSAGE_WAITINGFORASSIGNDAMAGEREQ: 18,
  PROMPTMESSAGE_WAITINGFORORDERCOMBATDAMAGEREQ: 19,
  PROMPTMESSAGE_WAITINGFORSELECTTARGETSREQ: 20,
  PROMPTMESSAGE_WAITINGFORPAYCOSTREQ: 21,
  PROMPTMESSAGE_WAITINGFORDISCARD: 22,
  PROMPTMESSAGE_SELECTOPTIONSREQ: 23,
  PROMPTMESSAGE_WAITINGFORSELECTOPTIONSREQ: 24,
  PROMPTMESSAGE_GAMERESULTWINLOSS: 25,
  PROMPTMESSAGE_GAMERESULTDRAW: 26,
  PROMPTMESSAGE_MATCHRESULTWINLOSS: 27,
  PROMPTMESSAGE_MATCHRESULTDRAW: 28,
  PROMPTMESSAGE_INTERMISSIONREVEALHAND: 29,
  PROMPTMESSAGE_INTERMISSIONDRAWCARD: 30,
  PROMPTMESSAGE_INTERMISSIONBEGINSIDEBOARDING: 31,
  PROMPTMESSAGE_CHOOSESTARTING: 32,
  PROMPTMESSAGE_WAITINGFORCHOOSESTARTING: 33,
  PROMPTMESSAGE_MULLIGANORACCEPTHAND: 34,
  PROMPTMESSAGE_WAITINGFORMULLIGANORACCEPTHAND: 35,
  PROMPTMESSAGE_MULLIGANED: 36,
  PROMPTMESSAGE_ACCEPTEDHAND: 37,
  PROMPTMESSAGE_CHOICEMULLIGAN: 38,
  PROMPTMESSAGE_CHOICEKEEP: 39,
  PROMPTMESSAGE_GROUPREQ: 40,
  PROMPTMESSAGE_WAITINGFORGROUPREQ: 41,
  PROMPTMESSAGE_ORDERREQ: 42,
  PROMPTMESSAGE_WAITINGFORORDERREQ: 43,
  PROMPTMESSAGE_SELECTNGROUPREQ: 44,
  PROMPTMESSAGE_WAITINGFORSELECTNGROUPREQ: 45,
  PROMPTMESSAGE_COINFLIP: 46,
  PROMPTMESSAGE_CHOICEHEADS: 47,
  PROMPTMESSAGE_CHOICETAILS: 48,
  PROMPTMESSAGE_WAITINGFORSEARCHREQ: 49,
  PROMPTMESSAGE_WAITINGFOROPTIONALACTIONREQ: 50,
  PROMPTMESSAGE_XCOSTREQ: 51,
  PROMPTMESSAGE_WAITINGFORNUMERICREQ: 52,
  PROMPTMESSAGE_MINIMUMBLOCKERSNOTMET: 53,
  PROMPTMESSAGE_DOMODULARABILITY: 54,
  PROMPTMESSAGE_WAITINGFORDOMODULARABILITY: 55,
  PROMPTMESSAGE_MOVECOUNTERSMESSAGE: 56,
  PROMPTMESSAGE_WAITINGFORMOVECOUNTERS: 57,
  PROMPTMESSAGE_DORECOVER: 58,
  PROMPTMESSAGE_WAITINGFORDORECOVER: 59,
  PROMPTMESSAGE_DOECHOPAYMENT: 60,
  PROMPTMESSAGE_WAITINGFORDOECHOPAYMENT: 61,
  PROMPTMESSAGE_DOPROVOKEABILITY: 62,
  PROMPTMESSAGE_WAITINGFORDOPROVOKEABILITY: 63,
  PROMPTMESSAGE_DOCASCADEABILITY: 64,
  PROMPTMESSAGE_WAITINGFORDOCASCADEABILITY: 65,
  PROMPTMESSAGE_DOSOULSHIFT: 66,
  PROMPTMESSAGE_WAITINGFORSOULSHIFT: 67,
  PROMPTMESSAGE_APPLYPLANESWALKERREDIRECTION: 68,
  PROMPTMESSAGE_WAITINGFORAPPLYPLANESWALKERREDIRECT: 69,
  PROMPTMESSAGE_PLANESWALKERUNIQUENESS: 70,
  PROMPTMESSAGE_WAITINGFORPLANESWALKERUNIQUENESS: 71,
  PROMPTMESSAGE_LEGENDRULE: 72,
  PROMPTMESSAGE_WAITINGFORLEGENDRULE: 73,
  PROMPTMESSAGE_SELECTREPLACEMENT: 74,
  PROMPTMESSAGE_WAITINGFORSELECTREPLACEMENT: 75,
  PROMPTMESSAGE_APPLYUNLEASH: 76,
  PROMPTMESSAGE_WAITINGFORUNLEASH: 77,
  PROMPTMESSAGE_CHOOSEOBJECTTOCOPY: 78,
  PROMPTMESSAGE_WAITINGFORCHOOSEOBJECTTOCOPY: 79,
  PROMPTMESSAGE_SELECTMANATYPEREQ: 80,
  PROMPTMESSAGE_WAITINGFORSELECTMANATYPEREQ: 81,
  PROMPTMESSAGE_WAITINGFORDISTRIBUTIONREQ: 82,
  PROMPTMESSAGE_CHOOSEMODALREQ: 83,
  PROMPTMESSAGE_WAITINGFORCHOOSEMODALREQ: 84,
  PROMPTMESSAGE_ORDEROBJECTENTERINGGRAVEYARD: 85,
  PROMPTMESSAGE_ORDEROBJECTENTERINGLIBRARY: 86,
  PROMPTMESSAGE_WAITINGFORORDEROBJECTENTERINGZONE: 87,
  PROMPTMESSAGE_CHOOSECREATURESFORCONSPIRE: 88,
  PROMPTMESSAGE_APPLYDREDGE: 89,
  PROMPTMESSAGE_WAITINGFORDREDGE: 90,
  PROMPTMESSAGE_ORDEROBJECTENTERINGBATTLEFIELD: 91,
  PROMPTMESSAGE_SCRY: 92,
  PROMPTMESSAGE_WAITINGFORSCRY: 93,
  PROMPTMESSAGE_UNPAYABLECOST: 94,
  PROMPTMESSAGE_CASTFORMADNESSCOST: 95,
  PROMPTMESSAGE_SACRIFICECLUE: 96,
  PROMPTMESSAGE_SELECTFROMGROUPSREQ: 97,
  PROMPTMESSAGE_WAITINGFORSELECTFROMGROUPSREQ: 98,
  PROMPTMESSAGE_SELECTPERMANENTSTOUNTAP: 99,
  PROMPTMESSAGE_WAITINGFORSELECTPERMANENTSTOUNTAP: 100,
  PROMPTMESSAGE_UNBOUNDEDLOOPDETECTEDACTIVE: 101,
  PROMPTMESSAGE_UNBOUNDEDLOOPDETECTEDNOTACTIVE: 102,
  PROMPTMESSAGE_INFINITELOOPDETECTED: 103,
  PROMPTMESSAGE_CLICKOKTOCONTINUE: 104,
  PROMPTMESSAGE_WAITINGFORPLAYER: 105,
  PROMPTMESSAGE_GATHERREQ: 106,
  PROMPTMESSAGE_WAITINGFORGATHERREQ: 107,
  PROMPTMESSAGE_SELECTZONEFORMUTUALLYEXCLUSIVEZONETRANSFERS: 108,
  PROMPTMESSAGE_WAITINGFORPLAYERTOSELECTMUTUALLYEXCLUSIVEZONE: 109,
  PROMPTMESSAGE_PUTORREMOVECOUNTERS: 110,
  PROMPTMESSAGE_SELECTZONESTOSEARCH: 111,
  PROMPTMESSAGE_CHOOSEACTION: 112,
  PROMPTMESSAGE_CHOOSETARGETFORNEXTCOPY: 113,
  PROMPTMESSAGE_PERFORMOPENINGHANDACTIONS: 114,
  PROMPTMESSAGE_DOEXPLOREPUTCARDINGRAVEYARD: 115,
  PROMPTMESSAGE_WAITINGFOREXPLOREPUTCARDINGRAVEYARD: 116,
  PROMPTMESSAGE_WARNING_INSUFFICIENTBLOCKERS: 117,
  PROMPTMESSAGE_CHOOSEACOLOR: 118,
  PROMPTMESSAGE_WARNING_BLOCKERCANNOTBLOCKALONE: 119,
  PROMPTMESSAGE_WARNING_ATTACKERCANNOTATTACKALONE: 120,
  PROMPTMESSAGE_WARNING_ATTACKERMUSTBEBLOCKED: 121,
  PROMPTMESSAGE_WARNING_MUSTATTACKWITHATLEASTONE: 122,
  PROMPTMESSAGE_SELECTANATTACKEE: 123,
  PROMPTMESSAGE_WARNING_MUSTATTACK: 124,
  PROMPTMESSAGE_WARNING_MUSTBLOCK: 125,
  PROMPTMESSAGE_CITYSBLESSINGDESIGNATION: 126,
  PROMPTMESSAGE_ASSIGNDAMAGEREQCANIGNOREBLOCKERS: 127,
  PROMPTMESSAGE_SELECTANATTACHEE: 128,
  PROMPTMESSAGE_SURVEIL: 129,
  PROMPTMESSAGE_WARNING_ATTACKERMUSTBEBLOCKEDBYALL: 130,
  PROMPTMESSAGE_PLACEHOLDER1: 131,
  PROMPTMESSAGE_PLACEHOLDER2: 132,
  PROMPTMESSAGE_PLACEHOLDER3: 133,
  PROMPTMESSAGE_PLACEHOLDER4: 134,
  PROMPTMESSAGE_PLACEHOLDER5: 135
};

/**
 * @enum {number}
 */
proto.PromptPriority = {
  PROMPTPRIORITY_NONE: 0,
  PROMPTPRIORITY_PERSIST: 1
};

/**
 * @enum {number}
 */
proto.ProtoVersion = {
  PROTOVERSION_NONE: 0,
  PROTOVERSION_HIFIGAMESTATES: 1,
  PROTOVERSION_PREVIOUSGAMESTATEID: 2,
  PROTOVERSION_TIMERS: 3,
  PROTOVERSION_MANAREQUIREMENT: 4,
  PROTOVERSION_AUTOTAPACTIONS: 5,
  PROTOVERSION_UIMESSAGES: 6,
  PROTOVERSION_AUTOTAPSTOPSSETTING: 7,
  PROTOVERSION_SIDEBOARDING: 8,
  PROTOVERSION_AUTOOPTIONALPAYMENTCANCELLATIONSETTING: 9,
  PROTOVERSION_COSTCATEGORY: 10,
  PROTOVERSION_TIMERSV2: 11,
  PROTOVERSION_CONTROL: 12,
  PROTOVERSION_TIMERSV3: 13,
  PROTOVERSION_AUTOACCEPTHAND: 14,
  PROTOVERSION_TIMERSV4: 15,
  PROTOVERSION_TIMERSV5: 16,
  PROTOVERSION_MANAPAYMENTSTRATEGYTYPE: 17,
  PROTOVERSION_TIMERSV6: 18,
  PROTOVERSION_TIMERSV7: 19,
  PROTOVERSION_TIMERSV8: 20,
  PROTOVERSION_TRANSIENTSTOPS: 21,
  PROTOVERSION_COSMETICS: 22,
  PROTOVERSION_RESULTSPEC: 23,
  PROTOVERSION_RESULTREASON: 24,
  PROTOVERSION_SUPERFORMAT: 25,
  PROTOVERSION_AUTOSELECTREPLACEMENTSETTING: 26,
  PROTOVERSION_MULLIGANTYPE: 27,
  PROTOVERSION_PENDINGMESSAGETYPE: 28
};

/**
 * @enum {number}
 */
proto.QualificationType = {
  QUALIFICATIONTYPE_NONE: 0,
  QUALIFICATIONTYPE_COSTTOCAST: 1,
  QUALIFICATIONTYPE_CANTBECOUNTERED: 10,
  QUALIFICATIONTYPE_CANTBEACTIVATED: 11,
  QUALIFICATIONTYPE_CANTBEREGENERATED: 12,
  QUALIFICATIONTYPE_CANTBEENCHANTED: 13,
  QUALIFICATIONTYPE_CANTBEEQUIPPED: 14,
  QUALIFICATIONTYPE_CANTBEDESTROYED: 15,
  QUALIFICATIONTYPE_CANTBEPREVENTED: 16,
  QUALIFICATIONTYPE_CANTBETHETARGETOF: 17,
  QUALIFICATIONTYPE_CANTBESACRIFICED: 19,
  QUALIFICATIONTYPE_CANTGENERICEFFECT: 20,
  QUALIFICATIONTYPE_CANTUNTAP: 21,
  QUALIFICATIONTYPE_CANTDRAW: 22,
  QUALIFICATIONTYPE_CANTPLAY: 23,
  QUALIFICATIONTYPE_CANTCYCLE: 24,
  QUALIFICATIONTYPE_CANTCAST: 25,
  QUALIFICATIONTYPE_CANTSEARCH: 26,
  QUALIFICATIONTYPE_CANTHAVE: 27,
  QUALIFICATIONTYPE_CANTENTER: 28,
  QUALIFICATIONTYPE_CANTATTACK: 30,
  QUALIFICATIONTYPE_CANTBLOCK: 31,
  QUALIFICATIONTYPE_CANTBEBLOCKED: 32,
  QUALIFICATIONTYPE_MUSTBLOCKATTACKER: 33,
  QUALIFICATIONTYPE_MUSTATTACK: 34,
  QUALIFICATIONTYPE_BLOCKEDBYMAXCOUNT: 39,
  QUALIFICATIONTYPE_BLOCKEDBYMINCOUNT: 40,
  QUALIFICATIONTYPE_MUSTATTACKSPECIFIC: 41,
  QUALIFICATIONTYPE_BLOCKIFABLE: 42,
  QUALIFICATIONTYPE_ABLETOATTACK: 43,
  QUALIFICATIONTYPE_ATTACKTHATCOMBATIFABLE: 44,
  QUALIFICATIONTYPE_MAYPLAY: 47,
  QUALIFICATIONTYPE_CANTTRANSFORM: 48,
  QUALIFICATIONTYPE_CANATTACK: 49,
  QUALIFICATIONTYPE_CANTCREW: 50,
  QUALIFICATIONTYPE_CANTBLOCKUNLESSALSO: 52,
  QUALIFICATIONTYPE_CANTACTIVATE: 53,
  QUALIFICATIONTYPE_MAXATTACKERS: 54,
  QUALIFICATIONTYPE_MAXBLOCKERS: 55,
  QUALIFICATIONTYPE_CANTATTACKUNLESSALSO: 56,
  QUALIFICATIONTYPE_CANONLYATTACKALONE: 57,
  QUALIFICATIONTYPE_IFATTACKS: 58,
  QUALIFICATIONTYPE_ATTACKCOST: 59,
  QUALIFICATIONTYPE_BLOCKCOST: 60,
  QUALIFICATIONTYPE_CANTCAUSEABILITIESTOTRIGGER: 61,
  QUALIFICATIONTYPE_ASSIGNCOMBATDAMAGEWITHTOUGHNESS: 62,
  QUALIFICATIONTYPE_PLAYERMUSTATTACKELEMENTSOFLIST: 63,
  QUALIFICATIONTYPE_CANTLOSETHEGAME: 64,
  QUALIFICATIONTYPE_CANTLOSEMANA: 65,
  QUALIFICATIONTYPE_MAYPLAYADDITIONALLANDS: 66,
  QUALIFICATIONTYPE_ASSIGNCOMBATDAMAGEASTHOUGHWERENTBLOCKED: 67,
  QUALIFICATIONTYPE_MAYPLAYVALIDITEMS: 68,
  QUALIFICATIONTYPE_CANBETHETARGETOF: 69
};

/**
 * @enum {number}
 */
proto.QueueType = {
  QUEUETYPE_INVALID: 0,
  QUEUETYPE_MATCHQUEUE: 1,
  QUEUETYPE_DRAFTQUEUE: 2
};

/**
 * @enum {number}
 */
proto.ReasonFaceDown = {
  REASONFACEDOWN_NONE: 0,
  REASONFACEDOWN_MOVEDFACEDOWN: 1,
  REASONFACEDOWN_MORPH: 2,
  REASONFACEDOWN_MANIFEST: 3,
  REASONFACEDOWN_TURNEDFACEDOWN: 4
};

/**
 * @enum {number}
 */
proto.ReferenceType = {
  REFERENCETYPE_NONE: 0,
  REFERENCETYPE_INSTANCEID: 1,
  REFERENCETYPE_CATALOGID: 2,
  REFERENCETYPE_LOCALIZATIONID: 3,
  REFERENCETYPE_PLAYERSEATID: 4
};

/**
 * @enum {number}
 */
proto.ReplacementEffectSpawnerType = {
  REPLACEMENTEFFECTSPAWNERTYPE_NONE: 0,
  REPLACEMENTEFFECTSPAWNERTYPE_PREVENTDAMAGE: 1
};

/**
 * @enum {number}
 */
proto.RequiresConfirmation = {
  REQUIRESCONFIRMATION_NONE: 0,
  REQUIRESCONFIRMATION_SACRIFICE: 1,
  REQUIRESCONFIRMATION_PAYLIFE: 2,
  REQUIRESCONFIRMATION_DISCARD: 3,
  REQUIRESCONFIRMATION_EXILE: 4,
  REQUIRESCONFIRMATION_TARGET: 5,
  REQUIRESCONFIRMATION_SELECTION: 6,
  REQUIRESCONFIRMATION_FOROPPONENT: 7
};

/**
 * @enum {number}
 */
proto.ResultCode = {
  RESULTCODE_NONE: 0,
  RESULTCODE_SUCCESS: 1,
  RESULTCODE_FAILURE: 2,
  RESULTCODE_CANNOTATTACK: 3,
  RESULTCODE_ATTACKCOSTUNPAID: 4,
  RESULTCODE_CANNOTBLOCK: 5,
  RESULTCODE_ILLEGALBLOCK: 6,
  RESULTCODE_ORDERMISMATCH: 7,
  RESULTCODE_MISSINGDAMAGESOURCE: 8,
  RESULTCODE_INVALIDDAMAGESOURCE: 9,
  RESULTCODE_NONLETHALASSIGNMENT: 10,
  RESULTCODE_INVALIDASSIGNMENT: 11,
  RESULTCODE_TOOMANYTARGETS: 12,
  RESULTCODE_NOTENOUGHTARGETS: 13,
  RESULTCODE_ILLEGALTARGET: 14,
  RESULTCODE_RESTRICTIONVIOLATED: 15,
  RESULTCODE_REQUIREMENTVIOLATED: 16
};

/**
 * @enum {number}
 */
proto.ResultReason = {
  RESULTREASON_NONE: 0,
  RESULTREASON_GAME: 1,
  RESULTREASON_CONCEDE: 2,
  RESULTREASON_TIMEOUT: 3,
  RESULTREASON_LOOP: 4,
  RESULTREASON_FORCE: 5
};

/**
 * @enum {number}
 */
proto.ResultType = {
  RESULTTYPE_NONE: 0,
  RESULTTYPE_SUSPENDED: 1,
  RESULTTYPE_DRAW: 2,
  RESULTTYPE_WINLOSS: 3
};

/**
 * @enum {number}
 */
proto.SelectAction = {
  SELECTACTION_NONE: 0,
  SELECTACTION_SELECT: 1,
  SELECTACTION_UNSELECT: 2
};

/**
 * @enum {number}
 */
proto.SelectionContext = {
  SELECTIONCONTEXT_NONE: 0,
  SELECTIONCONTEXT_DISCARD: 1,
  SELECTIONCONTEXT_MANAPOOL: 2,
  SELECTIONCONTEXT_RESOLUTION: 3,
  SELECTIONCONTEXT_TRIGGEREDABILITY: 4,
  SELECTIONCONTEXT_MODAL: 5,
  SELECTIONCONTEXT_REPLACEMENT: 6,
  SELECTIONCONTEXT_NONMANA_PAYMENT: 7,
  SELECTIONCONTEXT_MANAFROMABILITY: 8
};

/**
 * @enum {number}
 */
proto.SelectionListType = {
  SELECTIONLISTTYPE_NONE: 0,
  SELECTIONLISTTYPE_STATIC: 1,
  SELECTIONLISTTYPE_DYNAMIC: 2,
  SELECTIONLISTTYPE_STATICSUBSET: 3
};

/**
 * @enum {number}
 */
proto.Setting = {
  SETTING_NONE: 0,
  SETTING_ENABLE: 1,
  SETTING_DISABLE: 2
};

/**
 * @enum {number}
 */
proto.SettingKey = {
  SETTINGKEY_NONE: 0,
  SETTINGKEY_BYABILITY: 1,
  SETTINGKEY_BYCARDTITLE: 2
};

/**
 * @enum {number}
 */
proto.SettingScope = {
  SETTINGSCOPE_NONE: 0,
  SETTINGSCOPE_ANYPLAYER: 1,
  SETTINGSCOPE_OPPONENTS: 2,
  SETTINGSCOPE_TEAM: 3
};

/**
 * @enum {number}
 */
proto.SettingStatus = {
  SETTINGSTATUS_NONE: 0,
  SETTINGSTATUS_SET: 1,
  SETTINGSTATUS_CLEAR: 2
};

/**
 * @enum {number}
 */
proto.ShuffleRestriction = {
  SHUFFLERESTRICTION_NONE: 0,
  SHUFFLERESTRICTION_OPENINGHAND: 1,
  SHUFFLERESTRICTION_ALL: 2
};

/**
 * @enum {number}
 */
proto.SmartStopsSetting = {
  SMARTSTOPSSETTING_NONE: 0,
  SMARTSTOPSSETTING_ENABLE: 1,
  SMARTSTOPSSETTING_DISABLE: 2
};

/**
 * @enum {number}
 */
proto.SortBy = {
  SORTBY_NONE: 0,
  SORTBY_HIGHTOLOW: 1,
  SORTBY_LOWTOHIGH: 2
};

/**
 * @enum {number}
 */
proto.StaticList = {
  STATICLIST_NONE: 0,
  STATICLIST_CARDCOLORS: 1,
  STATICLIST_MANACOLORS: 2,
  STATICLIST_SUPERTYPES: 3,
  STATICLIST_CARDTYPES: 4,
  STATICLIST_SUBTYPES: 5,
  STATICLIST_COLORS: 6,
  STATICLIST_COINFACES: 7,
  STATICLIST_WISHCARDS: 8,
  STATICLIST_BASICLANDTYPES: 9,
  STATICLIST_CREATURETYPES: 10,
  STATICLIST_COUNTERTYPES: 11,
  STATICLIST_KEYWORDS: 12,
  STATICLIST_CARDNAMES: 13
};

/**
 * @enum {number}
 */
proto.Step = {
  STEP_NONE: 0,
  STEP_UNTAP: 1,
  STEP_UPKEEP: 2,
  STEP_DRAW: 3,
  STEP_BEGINCOMBAT: 4,
  STEP_DECLAREATTACK: 5,
  STEP_DECLAREBLOCK: 6,
  STEP_COMBATDAMAGE: 7,
  STEP_ENDCOMBAT: 8,
  STEP_END: 9,
  STEP_CLEANUP: 10,
  STEP_FIRSTSTRIKEDAMAGE: 11
};

/**
 * @enum {number}
 */
proto.StopType = {
  STOPTYPE_NONE: 0,
  STOPTYPE_UPKEEPSTEP: 1,
  STOPTYPE_DRAWSTEP: 2,
  STOPTYPE_PRECOMBATMAINPHASE: 3,
  STOPTYPE_BEGINCOMBATSTEP: 4,
  STOPTYPE_DECLAREATTACKERSSTEP: 5,
  STOPTYPE_DECLAREBLOCKERSSTEP: 6,
  STOPTYPE_COMBATDAMAGESTEP: 7,
  STOPTYPE_ENDCOMBATSTEP: 8,
  STOPTYPE_POSTCOMBATMAINPHASE: 9,
  STOPTYPE_ENDSTEP: 10,
  STOPTYPE_FIRSTSTRIKEDAMAGESTEP: 11
};

/**
 * @enum {number}
 */
proto.SubType = {
  SUBTYPE_NONE: 0,
  SUBTYPE_ANGEL: 1,
  SUBTYPE_ARCHER: 2,
  SUBTYPE_ARCHON: 3,
  SUBTYPE_ARTIFICER: 4,
  SUBTYPE_ASSASSIN: 5,
  SUBTYPE_AURA: 6,
  SUBTYPE_BASILISK: 7,
  SUBTYPE_BAT: 8,
  SUBTYPE_BEAR: 9,
  SUBTYPE_BEAST: 10,
  SUBTYPE_BERSERKER: 11,
  SUBTYPE_BIRD: 12,
  SUBTYPE_BOAR: 13,
  SUBTYPE_CAT: 14,
  SUBTYPE_CHANDRA: 15,
  SUBTYPE_CLERIC: 16,
  SUBTYPE_CONSTRUCT: 17,
  SUBTYPE_CROCODILE: 18,
  SUBTYPE_DEMON: 19,
  SUBTYPE_DJINN: 20,
  SUBTYPE_DRAGON: 21,
  SUBTYPE_DRAKE: 22,
  SUBTYPE_DRUID: 23,
  SUBTYPE_FISH: 24,
  SUBTYPE_ELEMENTAL: 25,
  SUBTYPE_ELEPHANT: 26,
  SUBTYPE_ELF: 27,
  SUBTYPE_EQUIPMENT: 28,
  SUBTYPE_FOREST: 29,
  SUBTYPE_GARRUK: 30,
  SUBTYPE_GATE: 31,
  SUBTYPE_GIANT: 32,
  SUBTYPE_GIDEON: 33,
  SUBTYPE_GOBLIN: 34,
  SUBTYPE_GOLEM: 35,
  SUBTYPE_GRIFFIN: 36,
  SUBTYPE_HORSE: 37,
  SUBTYPE_HOUND: 38,
  SUBTYPE_HUMAN: 39,
  SUBTYPE_HYDRA: 40,
  SUBTYPE_ILLUSION: 41,
  SUBTYPE_INSECT: 42,
  SUBTYPE_ISLAND: 43,
  SUBTYPE_JACE: 44,
  SUBTYPE_KNIGHT: 45,
  SUBTYPE_MERFOLK: 46,
  SUBTYPE_MINOTAUR: 47,
  SUBTYPE_MONK: 48,
  SUBTYPE_MOUNTAIN: 49,
  SUBTYPE_OGRE: 50,
  SUBTYPE_OOZE: 51,
  SUBTYPE_PEGASUS: 52,
  SUBTYPE_PHOENIX: 53,
  SUBTYPE_PLAINS: 54,
  SUBTYPE_RHINO: 55,
  SUBTYPE_ROGUE: 56,
  SUBTYPE_SALAMANDER: 57,
  SUBTYPE_SCOUT: 58,
  SUBTYPE_SERPENT: 59,
  SUBTYPE_SHADE: 60,
  SUBTYPE_SHAMAN: 61,
  SUBTYPE_SIREN: 62,
  SUBTYPE_SKELETON: 63,
  SUBTYPE_SOLDIER: 64,
  SUBTYPE_SORIN: 65,
  SUBTYPE_SPHINX: 66,
  SUBTYPE_SPIDER: 67,
  SUBTYPE_SPIRIT: 68,
  SUBTYPE_SWAMP: 69,
  SUBTYPE_TOWER: 70,
  SUBTYPE_TREEFOLK: 71,
  SUBTYPE_TROLL: 72,
  SUBTYPE_URZAS: 73,
  SUBTYPE_VAMPIRE: 74,
  SUBTYPE_VEDALKEN: 75,
  SUBTYPE_WALL: 76,
  SUBTYPE_WARRIOR: 77,
  SUBTYPE_WIZARD: 78,
  SUBTYPE_WOLF: 79,
  SUBTYPE_WURM: 80,
  SUBTYPE_ZOMBIE: 81,
  SUBTYPE_MINE: 82,
  SUBTYPE_POWER_PLANT: 83,
  SUBTYPE_SAPROLING: 84,
  SUBTYPE_AVATAR: 85,
  SUBTYPE_SLIVER: 86,
  SUBTYPE_SAMURAI: 87,
  SUBTYPE_PEST: 88,
  SUBTYPE_THALAKOS: 89,
  SUBTYPE_DAUTHI: 90,
  SUBTYPE_MINION: 91,
  SUBTYPE_ADVISOR: 92,
  SUBTYPE_AJANI: 93,
  SUBTYPE_ALARA: 94,
  SUBTYPE_ALLY: 95,
  SUBTYPE_ANTELOPE: 97,
  SUBTYPE_APE: 98,
  SUBTYPE_ARCANE: 99,
  SUBTYPE_ARKHOS: 100,
  SUBTYPE_ASHIOK: 101,
  SUBTYPE_ASSEMBLYWORKER: 102,
  SUBTYPE_ATOG: 103,
  SUBTYPE_AUROCHS: 104,
  SUBTYPE_AZGOL: 105,
  SUBTYPE_BADGER: 106,
  SUBTYPE_BARBARIAN: 107,
  SUBTYPE_BEEBLE: 108,
  SUBTYPE_BELENON: 109,
  SUBTYPE_BOLAS: 110,
  SUBTYPE_BOLASS: 111,
  SUBTYPE_BRINGER: 112,
  SUBTYPE_BRUSHWAGG: 113,
  SUBTYPE_CAMEL: 114,
  SUBTYPE_CARRIER: 115,
  SUBTYPE_CENTAUR: 116,
  SUBTYPE_CEPHALID: 117,
  SUBTYPE_CHIMERA: 118,
  SUBTYPE_COCKATRICE: 119,
  SUBTYPE_CRAB: 120,
  SUBTYPE_CURSE: 121,
  SUBTYPE_CYCLOPS: 122,
  SUBTYPE_DESERT: 123,
  SUBTYPE_DEVIL: 124,
  SUBTYPE_DOMINARIA: 125,
  SUBTYPE_DOMRI: 126,
  SUBTYPE_DREADNOUGHT: 127,
  SUBTYPE_DRONE: 128,
  SUBTYPE_DRYAD: 129,
  SUBTYPE_DWARF: 130,
  SUBTYPE_EFREET: 131,
  SUBTYPE_ELDER: 132,
  SUBTYPE_ELDRAZI: 133,
  SUBTYPE_ELK: 134,
  SUBTYPE_ELSPETH: 135,
  SUBTYPE_EQUILOR: 136,
  SUBTYPE_ERGAMON: 137,
  SUBTYPE_EYE: 138,
  SUBTYPE_FABACIN: 139,
  SUBTYPE_FAERIE: 140,
  SUBTYPE_FERRET: 141,
  SUBTYPE_FLAGBEARER: 142,
  SUBTYPE_FORTIFICATION: 143,
  SUBTYPE_FOX: 144,
  SUBTYPE_FROG: 145,
  SUBTYPE_FUNGUS: 146,
  SUBTYPE_GARGOYLE: 147,
  SUBTYPE_GNOME: 148,
  SUBTYPE_GOAT: 149,
  SUBTYPE_GOD: 150,
  SUBTYPE_GORGON: 151,
  SUBTYPE_GREMLIN: 152,
  SUBTYPE_HAG: 153,
  SUBTYPE_HARPY: 154,
  SUBTYPE_HELLION: 155,
  SUBTYPE_HIPPO: 156,
  SUBTYPE_HIPPOGRIFF: 157,
  SUBTYPE_HOMARID: 158,
  SUBTYPE_HOMUNCULUS: 159,
  SUBTYPE_HORROR: 160,
  SUBTYPE_HYENA: 161,
  SUBTYPE_IMP: 162,
  SUBTYPE_INCARNATION: 163,
  SUBTYPE_INNISTRAD: 164,
  SUBTYPE_IQUATANA: 165,
  SUBTYPE_IR: 166,
  SUBTYPE_JELLYFISH: 167,
  SUBTYPE_JUGGERNAUT: 168,
  SUBTYPE_KALDHEIM: 169,
  SUBTYPE_KAMIGAWA: 170,
  SUBTYPE_KARN: 171,
  SUBTYPE_KARSUS: 172,
  SUBTYPE_KAVU: 173,
  SUBTYPE_KEPHALAI: 174,
  SUBTYPE_KIRIN: 175,
  SUBTYPE_KITHKIN: 176,
  SUBTYPE_KOBOLD: 177,
  SUBTYPE_KOLBAHAN: 178,
  SUBTYPE_KOR: 179,
  SUBTYPE_KOTH: 180,
  SUBTYPE_KRAKEN: 181,
  SUBTYPE_KYNETH: 182,
  SUBTYPE_LAIR: 183,
  SUBTYPE_LAMMASU: 184,
  SUBTYPE_LEECH: 185,
  SUBTYPE_LEVIATHAN: 186,
  SUBTYPE_LHURGOYF: 187,
  SUBTYPE_LICID: 188,
  SUBTYPE_LILIANA: 189,
  SUBTYPE_LIZARD: 190,
  SUBTYPE_LOCUS: 191,
  SUBTYPE_LORWYN: 192,
  SUBTYPE_LUVION: 193,
  SUBTYPE_MANTICORE: 194,
  SUBTYPE_MASTICORE: 195,
  SUBTYPE_MEDITATION: 196,
  SUBTYPE_MERCADIA: 197,
  SUBTYPE_MERCENARY: 198,
  SUBTYPE_METATHRAN: 199,
  SUBTYPE_MIRRODIN: 200,
  SUBTYPE_MOAG: 201,
  SUBTYPE_MONGER: 202,
  SUBTYPE_MONGOOSE: 203,
  SUBTYPE_MONGSENG: 204,
  SUBTYPE_MOONFOLK: 205,
  SUBTYPE_MURAGANDA: 206,
  SUBTYPE_MUTANT: 207,
  SUBTYPE_MYR: 208,
  SUBTYPE_MYSTIC: 209,
  SUBTYPE_NAUTILUS: 210,
  SUBTYPE_NEPHILIM: 211,
  SUBTYPE_NEW: 212,
  SUBTYPE_NIGHTMARE: 213,
  SUBTYPE_NIGHTSTALKER: 214,
  SUBTYPE_NINJA: 215,
  SUBTYPE_NISSA: 216,
  SUBTYPE_NOGGLE: 217,
  SUBTYPE_NOMAD: 218,
  SUBTYPE_NYMPH: 219,
  SUBTYPE_OCTOPUS: 220,
  SUBTYPE_ORC: 221,
  SUBTYPE_ORGG: 222,
  SUBTYPE_OUPHE: 223,
  SUBTYPE_OX: 224,
  SUBTYPE_OYSTER: 225,
  SUBTYPE_PHELDDAGRIF: 226,
  SUBTYPE_PHYREXIA: 227,
  SUBTYPE_PIRATE: 228,
  SUBTYPE_PLANT: 229,
  SUBTYPE_PRAETOR: 230,
  SUBTYPE_PYRULEA: 231,
  SUBTYPE_RABBIT: 232,
  SUBTYPE_RABIAH: 233,
  SUBTYPE_RAL: 234,
  SUBTYPE_RAT: 235,
  SUBTYPE_RATH: 236,
  SUBTYPE_RAVNICA: 237,
  SUBTYPE_REALM: 238,
  SUBTYPE_REBEL: 239,
  SUBTYPE_REGATHA: 240,
  SUBTYPE_RIGGER: 241,
  SUBTYPE_SABLE: 242,
  SUBTYPE_SARKHAN: 243,
  SUBTYPE_SATYR: 244,
  SUBTYPE_SCARECROW: 245,
  SUBTYPE_SCORPION: 246,
  SUBTYPE_SEGOVIA: 247,
  SUBTYPE_SERRAS: 248,
  SUBTYPE_SHADOWMOOR: 249,
  SUBTYPE_SHANDALAR: 250,
  SUBTYPE_SHAPESHIFTER: 251,
  SUBTYPE_SHEEP: 252,
  SUBTYPE_SHRINE: 253,
  SUBTYPE_SLITH: 254,
  SUBTYPE_SLUG: 255,
  SUBTYPE_SNAKE: 256,
  SUBTYPE_SOLTARI: 257,
  SUBTYPE_SPAWN: 258,
  SUBTYPE_SPECTER: 259,
  SUBTYPE_SPELLSHAPER: 260,
  SUBTYPE_SPIKE: 261,
  SUBTYPE_SPONGE: 262,
  SUBTYPE_SQUID: 263,
  SUBTYPE_SQUIRREL: 264,
  SUBTYPE_STARFISH: 265,
  SUBTYPE_SURRAKAR: 266,
  SUBTYPE_TAMIYO: 267,
  SUBTYPE_TEZZERET: 268,
  SUBTYPE_THOPTER: 269,
  SUBTYPE_THRULL: 270,
  SUBTYPE_TIBALT: 271,
  SUBTYPE_TRAP: 272,
  SUBTYPE_TURTLE: 273,
  SUBTYPE_ULGROTHA: 274,
  SUBTYPE_UNICORN: 275,
  SUBTYPE_VALLA: 276,
  SUBTYPE_VENSER: 277,
  SUBTYPE_VIASHINO: 278,
  SUBTYPE_VOLVER: 279,
  SUBTYPE_VRASKA: 280,
  SUBTYPE_VRYN: 281,
  SUBTYPE_WEIRD: 282,
  SUBTYPE_WEREWOLF: 283,
  SUBTYPE_WHALE: 284,
  SUBTYPE_WILDFIRE: 285,
  SUBTYPE_WOLVERINE: 286,
  SUBTYPE_WOMBAT: 287,
  SUBTYPE_WORM: 288,
  SUBTYPE_WRAITH: 289,
  SUBTYPE_XENAGOS: 290,
  SUBTYPE_XEREX: 291,
  SUBTYPE_YETI: 292,
  SUBTYPE_ZENDIKAR: 293,
  SUBTYPE_ZUBERA: 294,
  SUBTYPE_GERM: 295,
  SUBTYPE_CONTRAPTION: 296,
  SUBTYPE_CITIZEN: 297,
  SUBTYPE_COWARD: 298,
  SUBTYPE_DESERTER: 299,
  SUBTYPE_PRISM: 300,
  SUBTYPE_REFLECTION: 301,
  SUBTYPE_SAND: 302,
  SUBTYPE_SERF: 303,
  SUBTYPE_DACK: 304,
  SUBTYPE_KIORA: 305,
  SUBTYPE_ALLCREATURETYPES: 306,
  SUBTYPE_BLINKMOTH: 307,
  SUBTYPE_CAMARID: 308,
  SUBTYPE_CARIBOU: 309,
  SUBTYPE_GRAVEBORN: 310,
  SUBTYPE_LAMIA: 311,
  SUBTYPE_ORB: 312,
  SUBTYPE_PENTAVITE: 313,
  SUBTYPE_PINCHER: 314,
  SUBTYPE_SPLINTER: 315,
  SUBTYPE_SURVIVOR: 316,
  SUBTYPE_TETRAVITE: 317,
  SUBTYPE_TRISKELAVITE: 318,
  SUBTYPE_SCION: 319,
  SUBTYPE_PROCESSOR: 320,
  SUBTYPE_ARLINN: 321,
  SUBTYPE_MOLE: 322,
  SUBTYPE_NAHIRI: 323,
  SUBTYPE_CLUE: 324,
  SUBTYPE_TEFERI: 325,
  SUBTYPE_DARETTI: 326,
  SUBTYPE_FREYALISE: 327,
  SUBTYPE_NIXILIS: 328,
  SUBTYPE_NARSET: 329,
  SUBTYPE_UGIN: 330,
  SUBTYPE_VEHICLE: 331,
  SUBTYPE_SERVO: 332,
  SUBTYPE_DOVIN: 333,
  SUBTYPE_SAHEELI: 334,
  SUBTYPE_MONKEY: 335,
  SUBTYPE_AETHERBORN: 336,
  SUBTYPE_PILOT: 337,
  SUBTYPE_JACKAL: 338,
  SUBTYPE_NAGA: 339,
  SUBTYPE_CARTOUCHE: 340,
  SUBTYPE_SAMUT: 341,
  SUBTYPE_DINOSAUR: 342,
  SUBTYPE_TREASURE: 343,
  SUBTYPE_HUATLI: 344,
  SUBTYPE_ANGRATH: 345,
  SUBTYPE_TRILOBITE: 346,
  SUBTYPE_SAGA: 347,
  SUBTYPE_JAYA: 348,
  SUBTYPE_VIVIEN: 349,
  SUBTYPE_EGG: 350,
  SUBTYPE_PLACEHOLDERSUBTYPE1: 351,
  SUBTYPE_PLACEHOLDERSUBTYPE2: 352,
  SUBTYPE_PLACEHOLDERSUBTYPE3: 353,
  SUBTYPE_PLACEHOLDERSUBTYPE4: 354,
  SUBTYPE_PLACEHOLDERSUBTYPE5: 355
};

/**
 * @enum {number}
 */
proto.SubZoneType = {
  SUBZONETYPE_NONE: 0,
  SUBZONETYPE_TOP: 1,
  SUBZONETYPE_BOTTOM: 2
};

/**
 * @enum {number}
 */
proto.SuperFormat = {
  SUPERFORMAT_NONE: 0,
  SUPERFORMAT_LIMITED: 1,
  SUPERFORMAT_CONSTRUCTED: 2
};

/**
 * @enum {number}
 */
proto.SuperType = {
  SUPERTYPE_NONE: 0,
  SUPERTYPE_BASIC: 1,
  SUPERTYPE_LEGENDARY: 2,
  SUPERTYPE_ONGOING: 3,
  SUPERTYPE_SNOW: 4,
  SUPERTYPE_WORLD: 5
};

/**
 * @enum {number}
 */
proto.TargetType = {
  TARGETTYPE_NONE: 0,
  TARGETTYPE_PLAYER: 1,
  TARGETTYPE_GAMEOBJECT: 2
};

/**
 * @enum {number}
 */
proto.TeamType = {
  TEAMTYPE_NONE: 0,
  TEAMTYPE_INDIVIDUAL: 1,
  TEAMTYPE_SHAREDTEAM: 2
};

/**
 * @enum {number}
 */
proto.TimeoutType = {
  TIMEOUTTYPE_NONE: 0,
  TIMEOUTTYPE_CHESSCLOCK: 1,
  TIMEOUTTYPE_INACTIVITY: 2
};

/**
 * @enum {number}
 */
proto.TimerBehavior = {
  TIMERBEHAVIOR_NONE: 0,
  TIMERBEHAVIOR_TIMEOUT: 1,
  TIMERBEHAVIOR_AUTORESPOND: 2,
  TIMERBEHAVIOR_TAKECONTROL: 3,
  TIMERBEHAVIOR_RELEASECONTROL: 4,
  TIMERBEHAVIOR_START: 5,
  TIMERBEHAVIOR_RESTART: 6,
  TIMERBEHAVIOR_STOP: 7,
  TIMERBEHAVIOR_RESET: 8,
  TIMERBEHAVIOR_ACTIVATE: 9,
  TIMERBEHAVIOR_DEACTIVATE: 10
};

/**
 * @enum {number}
 */
proto.TimerEvent = {
  TIMEREVENT_NONE: 0,
  TIMEREVENT_ONREQUESTSENT: 1,
  TIMEREVENT_ONRESPONSERECEIVED: 2,
  TIMEREVENT_ONEXPIRATION: 3,
  TIMEREVENT_ONMATCHSTART: 4,
  TIMEREVENT_ONGAMESTART: 5,
  TIMEREVENT_ONPLAYSTART: 6,
  TIMEREVENT_ONTURNCHANGED: 7,
  TIMEREVENT_ONACTIVEPLAYER: 8,
  TIMEREVENT_ONNONACTIVEPLAYER: 9,
  TIMEREVENT_BEGINNING: 10,
  TIMEREVENT_MAIN1: 11,
  TIMEREVENT_COMBAT: 12,
  TIMEREVENT_MAIN2: 13,
  TIMEREVENT_ENDING: 14,
  TIMEREVENT_ONWIN: 15,
  TIMEREVENT_ONLOSS: 16,
  TIMEREVENT_ONDRAW: 17,
  TIMEREVENT_ONGAMEOVER: 18,
  TIMEREVENT_ONMATCHOVER: 19,
  TIMEREVENT_ONTURNOVER: 20,
  TIMEREVENT_UPKEEP: 21,
  TIMEREVENT_DRAW: 22,
  TIMEREVENT_BEGINCOMBAT: 23,
  TIMEREVENT_DECLAREATTACK: 24,
  TIMEREVENT_DECLAREBLOCK: 25,
  TIMEREVENT_COMBATDAMAGE: 26,
  TIMEREVENT_ENDCOMBAT: 27,
  TIMEREVENT_END: 28,
  TIMEREVENT_CLEANUP: 29,
  TIMEREVENT_FIRSTSTRIKEDAMAGE: 30
};

/**
 * @enum {number}
 */
proto.TimerPackage = {
  TIMERPACKAGE_NONE: 0,
  TIMERPACKAGE_V1: 1,
  TIMERPACKAGE_V2: 2,
  TIMERPACKAGE_V3: 3,
  TIMERPACKAGE_V4: 4,
  TIMERPACKAGE_V5: 5
};

/**
 * @enum {number}
 */
proto.TimerType = {
  TIMERTYPE_NONE: 0,
  TIMERTYPE_DECISION: 1,
  TIMERTYPE_INACTIVITY: 2,
  TIMERTYPE_ACTIVEPLAYER: 3,
  TIMERTYPE_NONACTIVEPLAYER: 4,
  TIMERTYPE_PROLOGUE: 5,
  TIMERTYPE_EPILOGUE: 6
};

/**
 * @enum {number}
 */
proto.TypeCategory = {
  TYPECATEGORY_NONE: 0,
  TYPECATEGORY_COLOR: 3,
  TYPECATEGORY_CARDTYPE: 5,
  TYPECATEGORY_SUBTYPE: 6,
  TYPECATEGORY_SUPERTYPE: 7
};

/**
 * @enum {number}
 */
proto.Visibility = {
  VISIBILITY_NONE: 0,
  VISIBILITY_PUBLIC: 1,
  VISIBILITY_PRIVATE: 2,
  VISIBILITY_HIDDEN: 3
};

/**
 * @enum {number}
 */
proto.WellKnownCatalogId = {
  WELLKNOWNCATALOGID_NONE: 0,
  WELLKNOWNCATALOGID_TOKEN: 1,
  WELLKNOWNCATALOGID_EMBLEM: 2,
  WELLKNOWNCATALOGID_STANDARDCARDBACK: 3,
  WELLKNOWNCATALOGID_OBSCURED: 4,
  WELLKNOWNCATALOGID_DELAYEDTRIGGERABILITYHOLDER: 5
};

/**
 * @enum {number}
 */
proto.WishCards = {
  WISHCARDS_NONE: 0,
  WISHCARDS_GRIFFINSENTINEL: 41200,
  WISHCARDS_DIVINATION: 41202,
  WISHCARDS_DJINNOFWISHES: 41204,
  WISHCARDS_DOOMBLADE: 41205,
  WISHCARDS_ZOMBIEGOLIATH: 41210,
  WISHCARDS_WORDOFSEIZING: 53011
};

/**
 * @enum {number}
 */
proto.ZonePermissions = {
  ZONEPERMISSIONS_NONE: 0,
  ZONEPERMISSIONS_HAND: 1,
  ZONEPERMISSIONS_LIBRARY: 2,
  ZONEPERMISSIONS_ALL: 3
};

/**
 * @enum {number}
 */
proto.ZoneType = {
  ZONETYPE_NONE: 0,
  ZONETYPE_LIBRARY: 1,
  ZONETYPE_HAND: 2,
  ZONETYPE_BATTLEFIELD: 3,
  ZONETYPE_STACK: 4,
  ZONETYPE_GRAVEYARD: 5,
  ZONETYPE_EXILE: 6,
  ZONETYPE_COMMAND: 7,
  ZONETYPE_REVEALED: 8,
  ZONETYPE_LIMBO: 9,
  ZONETYPE_SIDEBOARD: 10,
  ZONETYPE_PENDING: 11,
  ZONETYPE_PHASEDOUT: 12
};

goog.object.extend(exports, proto);
